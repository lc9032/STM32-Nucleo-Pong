
pong.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e20  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000062c  08003fb4  08003fb4  00013fb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045e0  080045e0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080045e0  080045e0  000145e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080045e8  080045e8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045e8  080045e8  000145e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080045ec  080045ec  000145ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080045f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000212c  2000000c  080045fc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002138  080045fc  00022138  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c4cf  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002535  00000000  00000000  0002c50b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d80  00000000  00000000  0002ea40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c58  00000000  00000000  0002f7c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019734  00000000  00000000  00030418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f4c5  00000000  00000000  00049b4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096add  00000000  00000000  00059011  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000efaee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036e4  00000000  00000000  000efb40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003f9c 	.word	0x08003f9c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08003f9c 	.word	0x08003f9c

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <__aeabi_uldivmod>:
 80001e4:	b953      	cbnz	r3, 80001fc <__aeabi_uldivmod+0x18>
 80001e6:	b94a      	cbnz	r2, 80001fc <__aeabi_uldivmod+0x18>
 80001e8:	2900      	cmp	r1, #0
 80001ea:	bf08      	it	eq
 80001ec:	2800      	cmpeq	r0, #0
 80001ee:	bf1c      	itt	ne
 80001f0:	f04f 31ff 	movne.w	r1, #4294967295
 80001f4:	f04f 30ff 	movne.w	r0, #4294967295
 80001f8:	f000 b974 	b.w	80004e4 <__aeabi_idiv0>
 80001fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000200:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000204:	f000 f806 	bl	8000214 <__udivmoddi4>
 8000208:	f8dd e004 	ldr.w	lr, [sp, #4]
 800020c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000210:	b004      	add	sp, #16
 8000212:	4770      	bx	lr

08000214 <__udivmoddi4>:
 8000214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000218:	9d08      	ldr	r5, [sp, #32]
 800021a:	4604      	mov	r4, r0
 800021c:	468e      	mov	lr, r1
 800021e:	2b00      	cmp	r3, #0
 8000220:	d14d      	bne.n	80002be <__udivmoddi4+0xaa>
 8000222:	428a      	cmp	r2, r1
 8000224:	4694      	mov	ip, r2
 8000226:	d969      	bls.n	80002fc <__udivmoddi4+0xe8>
 8000228:	fab2 f282 	clz	r2, r2
 800022c:	b152      	cbz	r2, 8000244 <__udivmoddi4+0x30>
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	f1c2 0120 	rsb	r1, r2, #32
 8000236:	fa20 f101 	lsr.w	r1, r0, r1
 800023a:	fa0c fc02 	lsl.w	ip, ip, r2
 800023e:	ea41 0e03 	orr.w	lr, r1, r3
 8000242:	4094      	lsls	r4, r2
 8000244:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000248:	0c21      	lsrs	r1, r4, #16
 800024a:	fbbe f6f8 	udiv	r6, lr, r8
 800024e:	fa1f f78c 	uxth.w	r7, ip
 8000252:	fb08 e316 	mls	r3, r8, r6, lr
 8000256:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800025a:	fb06 f107 	mul.w	r1, r6, r7
 800025e:	4299      	cmp	r1, r3
 8000260:	d90a      	bls.n	8000278 <__udivmoddi4+0x64>
 8000262:	eb1c 0303 	adds.w	r3, ip, r3
 8000266:	f106 30ff 	add.w	r0, r6, #4294967295
 800026a:	f080 811f 	bcs.w	80004ac <__udivmoddi4+0x298>
 800026e:	4299      	cmp	r1, r3
 8000270:	f240 811c 	bls.w	80004ac <__udivmoddi4+0x298>
 8000274:	3e02      	subs	r6, #2
 8000276:	4463      	add	r3, ip
 8000278:	1a5b      	subs	r3, r3, r1
 800027a:	b2a4      	uxth	r4, r4
 800027c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000280:	fb08 3310 	mls	r3, r8, r0, r3
 8000284:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000288:	fb00 f707 	mul.w	r7, r0, r7
 800028c:	42a7      	cmp	r7, r4
 800028e:	d90a      	bls.n	80002a6 <__udivmoddi4+0x92>
 8000290:	eb1c 0404 	adds.w	r4, ip, r4
 8000294:	f100 33ff 	add.w	r3, r0, #4294967295
 8000298:	f080 810a 	bcs.w	80004b0 <__udivmoddi4+0x29c>
 800029c:	42a7      	cmp	r7, r4
 800029e:	f240 8107 	bls.w	80004b0 <__udivmoddi4+0x29c>
 80002a2:	4464      	add	r4, ip
 80002a4:	3802      	subs	r0, #2
 80002a6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002aa:	1be4      	subs	r4, r4, r7
 80002ac:	2600      	movs	r6, #0
 80002ae:	b11d      	cbz	r5, 80002b8 <__udivmoddi4+0xa4>
 80002b0:	40d4      	lsrs	r4, r2
 80002b2:	2300      	movs	r3, #0
 80002b4:	e9c5 4300 	strd	r4, r3, [r5]
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	428b      	cmp	r3, r1
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0xc2>
 80002c2:	2d00      	cmp	r5, #0
 80002c4:	f000 80ef 	beq.w	80004a6 <__udivmoddi4+0x292>
 80002c8:	2600      	movs	r6, #0
 80002ca:	e9c5 0100 	strd	r0, r1, [r5]
 80002ce:	4630      	mov	r0, r6
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	fab3 f683 	clz	r6, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d14a      	bne.n	8000374 <__udivmoddi4+0x160>
 80002de:	428b      	cmp	r3, r1
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xd4>
 80002e2:	4282      	cmp	r2, r0
 80002e4:	f200 80f9 	bhi.w	80004da <__udivmoddi4+0x2c6>
 80002e8:	1a84      	subs	r4, r0, r2
 80002ea:	eb61 0303 	sbc.w	r3, r1, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	469e      	mov	lr, r3
 80002f2:	2d00      	cmp	r5, #0
 80002f4:	d0e0      	beq.n	80002b8 <__udivmoddi4+0xa4>
 80002f6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002fa:	e7dd      	b.n	80002b8 <__udivmoddi4+0xa4>
 80002fc:	b902      	cbnz	r2, 8000300 <__udivmoddi4+0xec>
 80002fe:	deff      	udf	#255	; 0xff
 8000300:	fab2 f282 	clz	r2, r2
 8000304:	2a00      	cmp	r2, #0
 8000306:	f040 8092 	bne.w	800042e <__udivmoddi4+0x21a>
 800030a:	eba1 010c 	sub.w	r1, r1, ip
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f fe8c 	uxth.w	lr, ip
 8000316:	2601      	movs	r6, #1
 8000318:	0c20      	lsrs	r0, r4, #16
 800031a:	fbb1 f3f7 	udiv	r3, r1, r7
 800031e:	fb07 1113 	mls	r1, r7, r3, r1
 8000322:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000326:	fb0e f003 	mul.w	r0, lr, r3
 800032a:	4288      	cmp	r0, r1
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x12c>
 800032e:	eb1c 0101 	adds.w	r1, ip, r1
 8000332:	f103 38ff 	add.w	r8, r3, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x12a>
 8000338:	4288      	cmp	r0, r1
 800033a:	f200 80cb 	bhi.w	80004d4 <__udivmoddi4+0x2c0>
 800033e:	4643      	mov	r3, r8
 8000340:	1a09      	subs	r1, r1, r0
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb1 f0f7 	udiv	r0, r1, r7
 8000348:	fb07 1110 	mls	r1, r7, r0, r1
 800034c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000350:	fb0e fe00 	mul.w	lr, lr, r0
 8000354:	45a6      	cmp	lr, r4
 8000356:	d908      	bls.n	800036a <__udivmoddi4+0x156>
 8000358:	eb1c 0404 	adds.w	r4, ip, r4
 800035c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000360:	d202      	bcs.n	8000368 <__udivmoddi4+0x154>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f200 80bb 	bhi.w	80004de <__udivmoddi4+0x2ca>
 8000368:	4608      	mov	r0, r1
 800036a:	eba4 040e 	sub.w	r4, r4, lr
 800036e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000372:	e79c      	b.n	80002ae <__udivmoddi4+0x9a>
 8000374:	f1c6 0720 	rsb	r7, r6, #32
 8000378:	40b3      	lsls	r3, r6
 800037a:	fa22 fc07 	lsr.w	ip, r2, r7
 800037e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000382:	fa20 f407 	lsr.w	r4, r0, r7
 8000386:	fa01 f306 	lsl.w	r3, r1, r6
 800038a:	431c      	orrs	r4, r3
 800038c:	40f9      	lsrs	r1, r7
 800038e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000392:	fa00 f306 	lsl.w	r3, r0, r6
 8000396:	fbb1 f8f9 	udiv	r8, r1, r9
 800039a:	0c20      	lsrs	r0, r4, #16
 800039c:	fa1f fe8c 	uxth.w	lr, ip
 80003a0:	fb09 1118 	mls	r1, r9, r8, r1
 80003a4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a8:	fb08 f00e 	mul.w	r0, r8, lr
 80003ac:	4288      	cmp	r0, r1
 80003ae:	fa02 f206 	lsl.w	r2, r2, r6
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b8>
 80003b4:	eb1c 0101 	adds.w	r1, ip, r1
 80003b8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003bc:	f080 8088 	bcs.w	80004d0 <__udivmoddi4+0x2bc>
 80003c0:	4288      	cmp	r0, r1
 80003c2:	f240 8085 	bls.w	80004d0 <__udivmoddi4+0x2bc>
 80003c6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ca:	4461      	add	r1, ip
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d4:	fb09 1110 	mls	r1, r9, r0, r1
 80003d8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003dc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e0:	458e      	cmp	lr, r1
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1e2>
 80003e4:	eb1c 0101 	adds.w	r1, ip, r1
 80003e8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ec:	d26c      	bcs.n	80004c8 <__udivmoddi4+0x2b4>
 80003ee:	458e      	cmp	lr, r1
 80003f0:	d96a      	bls.n	80004c8 <__udivmoddi4+0x2b4>
 80003f2:	3802      	subs	r0, #2
 80003f4:	4461      	add	r1, ip
 80003f6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003fa:	fba0 9402 	umull	r9, r4, r0, r2
 80003fe:	eba1 010e 	sub.w	r1, r1, lr
 8000402:	42a1      	cmp	r1, r4
 8000404:	46c8      	mov	r8, r9
 8000406:	46a6      	mov	lr, r4
 8000408:	d356      	bcc.n	80004b8 <__udivmoddi4+0x2a4>
 800040a:	d053      	beq.n	80004b4 <__udivmoddi4+0x2a0>
 800040c:	b15d      	cbz	r5, 8000426 <__udivmoddi4+0x212>
 800040e:	ebb3 0208 	subs.w	r2, r3, r8
 8000412:	eb61 010e 	sbc.w	r1, r1, lr
 8000416:	fa01 f707 	lsl.w	r7, r1, r7
 800041a:	fa22 f306 	lsr.w	r3, r2, r6
 800041e:	40f1      	lsrs	r1, r6
 8000420:	431f      	orrs	r7, r3
 8000422:	e9c5 7100 	strd	r7, r1, [r5]
 8000426:	2600      	movs	r6, #0
 8000428:	4631      	mov	r1, r6
 800042a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042e:	f1c2 0320 	rsb	r3, r2, #32
 8000432:	40d8      	lsrs	r0, r3
 8000434:	fa0c fc02 	lsl.w	ip, ip, r2
 8000438:	fa21 f303 	lsr.w	r3, r1, r3
 800043c:	4091      	lsls	r1, r2
 800043e:	4301      	orrs	r1, r0
 8000440:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000444:	fa1f fe8c 	uxth.w	lr, ip
 8000448:	fbb3 f0f7 	udiv	r0, r3, r7
 800044c:	fb07 3610 	mls	r6, r7, r0, r3
 8000450:	0c0b      	lsrs	r3, r1, #16
 8000452:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000456:	fb00 f60e 	mul.w	r6, r0, lr
 800045a:	429e      	cmp	r6, r3
 800045c:	fa04 f402 	lsl.w	r4, r4, r2
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x260>
 8000462:	eb1c 0303 	adds.w	r3, ip, r3
 8000466:	f100 38ff 	add.w	r8, r0, #4294967295
 800046a:	d22f      	bcs.n	80004cc <__udivmoddi4+0x2b8>
 800046c:	429e      	cmp	r6, r3
 800046e:	d92d      	bls.n	80004cc <__udivmoddi4+0x2b8>
 8000470:	3802      	subs	r0, #2
 8000472:	4463      	add	r3, ip
 8000474:	1b9b      	subs	r3, r3, r6
 8000476:	b289      	uxth	r1, r1
 8000478:	fbb3 f6f7 	udiv	r6, r3, r7
 800047c:	fb07 3316 	mls	r3, r7, r6, r3
 8000480:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000484:	fb06 f30e 	mul.w	r3, r6, lr
 8000488:	428b      	cmp	r3, r1
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x28a>
 800048c:	eb1c 0101 	adds.w	r1, ip, r1
 8000490:	f106 38ff 	add.w	r8, r6, #4294967295
 8000494:	d216      	bcs.n	80004c4 <__udivmoddi4+0x2b0>
 8000496:	428b      	cmp	r3, r1
 8000498:	d914      	bls.n	80004c4 <__udivmoddi4+0x2b0>
 800049a:	3e02      	subs	r6, #2
 800049c:	4461      	add	r1, ip
 800049e:	1ac9      	subs	r1, r1, r3
 80004a0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a4:	e738      	b.n	8000318 <__udivmoddi4+0x104>
 80004a6:	462e      	mov	r6, r5
 80004a8:	4628      	mov	r0, r5
 80004aa:	e705      	b.n	80002b8 <__udivmoddi4+0xa4>
 80004ac:	4606      	mov	r6, r0
 80004ae:	e6e3      	b.n	8000278 <__udivmoddi4+0x64>
 80004b0:	4618      	mov	r0, r3
 80004b2:	e6f8      	b.n	80002a6 <__udivmoddi4+0x92>
 80004b4:	454b      	cmp	r3, r9
 80004b6:	d2a9      	bcs.n	800040c <__udivmoddi4+0x1f8>
 80004b8:	ebb9 0802 	subs.w	r8, r9, r2
 80004bc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c0:	3801      	subs	r0, #1
 80004c2:	e7a3      	b.n	800040c <__udivmoddi4+0x1f8>
 80004c4:	4646      	mov	r6, r8
 80004c6:	e7ea      	b.n	800049e <__udivmoddi4+0x28a>
 80004c8:	4620      	mov	r0, r4
 80004ca:	e794      	b.n	80003f6 <__udivmoddi4+0x1e2>
 80004cc:	4640      	mov	r0, r8
 80004ce:	e7d1      	b.n	8000474 <__udivmoddi4+0x260>
 80004d0:	46d0      	mov	r8, sl
 80004d2:	e77b      	b.n	80003cc <__udivmoddi4+0x1b8>
 80004d4:	3b02      	subs	r3, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	e732      	b.n	8000340 <__udivmoddi4+0x12c>
 80004da:	4630      	mov	r0, r6
 80004dc:	e709      	b.n	80002f2 <__udivmoddi4+0xde>
 80004de:	4464      	add	r4, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e742      	b.n	800036a <__udivmoddi4+0x156>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <draw_border_line_on_lcd>:
static bool player2_AI_mode;

static void game_init();

static void draw_border_line_on_lcd()
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af02      	add	r7, sp, #8
	lcd_draw_clear_rect(0,0,LCD_ROWS,1,1);
 80004ee:	2301      	movs	r3, #1
 80004f0:	9300      	str	r3, [sp, #0]
 80004f2:	2301      	movs	r3, #1
 80004f4:	2240      	movs	r2, #64	; 0x40
 80004f6:	2100      	movs	r1, #0
 80004f8:	2000      	movs	r0, #0
 80004fa:	f000 fc3d 	bl	8000d78 <lcd_draw_clear_rect>
	lcd_draw_clear_rect(LCD_COLUMNS-1,0,LCD_ROWS,1,1);
 80004fe:	2301      	movs	r3, #1
 8000500:	9300      	str	r3, [sp, #0]
 8000502:	2301      	movs	r3, #1
 8000504:	2240      	movs	r2, #64	; 0x40
 8000506:	2100      	movs	r1, #0
 8000508:	207f      	movs	r0, #127	; 0x7f
 800050a:	f000 fc35 	bl	8000d78 <lcd_draw_clear_rect>

	lcd_draw_clear_rect(0,0,1,LCD_COLUMNS,1);
 800050e:	2301      	movs	r3, #1
 8000510:	9300      	str	r3, [sp, #0]
 8000512:	2380      	movs	r3, #128	; 0x80
 8000514:	2201      	movs	r2, #1
 8000516:	2100      	movs	r1, #0
 8000518:	2000      	movs	r0, #0
 800051a:	f000 fc2d 	bl	8000d78 <lcd_draw_clear_rect>
	lcd_draw_clear_rect(0,LCD_ROWS-1,1,LCD_COLUMNS,1);
 800051e:	2301      	movs	r3, #1
 8000520:	9300      	str	r3, [sp, #0]
 8000522:	2380      	movs	r3, #128	; 0x80
 8000524:	2201      	movs	r2, #1
 8000526:	213f      	movs	r1, #63	; 0x3f
 8000528:	2000      	movs	r0, #0
 800052a:	f000 fc25 	bl	8000d78 <lcd_draw_clear_rect>

	lcd_draw_clear_rect(0,INFO_AREA_SIZE+1,1,LCD_COLUMNS,1);
 800052e:	2301      	movs	r3, #1
 8000530:	9300      	str	r3, [sp, #0]
 8000532:	2380      	movs	r3, #128	; 0x80
 8000534:	2201      	movs	r2, #1
 8000536:	2108      	movs	r1, #8
 8000538:	2000      	movs	r0, #0
 800053a:	f000 fc1d 	bl	8000d78 <lcd_draw_clear_rect>
}
 800053e:	bf00      	nop
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}

08000544 <update_score_on_lcd>:

static void update_score_on_lcd(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
	lcd_write_number(2, 2, player1_score/10);
 8000548:	4b1d      	ldr	r3, [pc, #116]	; (80005c0 <update_score_on_lcd+0x7c>)
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	4a1d      	ldr	r2, [pc, #116]	; (80005c4 <update_score_on_lcd+0x80>)
 800054e:	fba2 2303 	umull	r2, r3, r2, r3
 8000552:	08db      	lsrs	r3, r3, #3
 8000554:	b2db      	uxtb	r3, r3
 8000556:	461a      	mov	r2, r3
 8000558:	2102      	movs	r1, #2
 800055a:	2002      	movs	r0, #2
 800055c:	f000 fc44 	bl	8000de8 <lcd_write_number>
	lcd_write_number(7, 2, player1_score%10);
 8000560:	4b17      	ldr	r3, [pc, #92]	; (80005c0 <update_score_on_lcd+0x7c>)
 8000562:	781a      	ldrb	r2, [r3, #0]
 8000564:	4b17      	ldr	r3, [pc, #92]	; (80005c4 <update_score_on_lcd+0x80>)
 8000566:	fba3 1302 	umull	r1, r3, r3, r2
 800056a:	08d9      	lsrs	r1, r3, #3
 800056c:	460b      	mov	r3, r1
 800056e:	009b      	lsls	r3, r3, #2
 8000570:	440b      	add	r3, r1
 8000572:	005b      	lsls	r3, r3, #1
 8000574:	1ad3      	subs	r3, r2, r3
 8000576:	b2db      	uxtb	r3, r3
 8000578:	461a      	mov	r2, r3
 800057a:	2102      	movs	r1, #2
 800057c:	2007      	movs	r0, #7
 800057e:	f000 fc33 	bl	8000de8 <lcd_write_number>

	lcd_write_number(LCD_COLUMNS-11, 2, player2_score/10);
 8000582:	4b11      	ldr	r3, [pc, #68]	; (80005c8 <update_score_on_lcd+0x84>)
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	4a0f      	ldr	r2, [pc, #60]	; (80005c4 <update_score_on_lcd+0x80>)
 8000588:	fba2 2303 	umull	r2, r3, r2, r3
 800058c:	08db      	lsrs	r3, r3, #3
 800058e:	b2db      	uxtb	r3, r3
 8000590:	461a      	mov	r2, r3
 8000592:	2102      	movs	r1, #2
 8000594:	2075      	movs	r0, #117	; 0x75
 8000596:	f000 fc27 	bl	8000de8 <lcd_write_number>
	lcd_write_number(LCD_COLUMNS-6, 2, player2_score%10);
 800059a:	4b0b      	ldr	r3, [pc, #44]	; (80005c8 <update_score_on_lcd+0x84>)
 800059c:	781a      	ldrb	r2, [r3, #0]
 800059e:	4b09      	ldr	r3, [pc, #36]	; (80005c4 <update_score_on_lcd+0x80>)
 80005a0:	fba3 1302 	umull	r1, r3, r3, r2
 80005a4:	08d9      	lsrs	r1, r3, #3
 80005a6:	460b      	mov	r3, r1
 80005a8:	009b      	lsls	r3, r3, #2
 80005aa:	440b      	add	r3, r1
 80005ac:	005b      	lsls	r3, r3, #1
 80005ae:	1ad3      	subs	r3, r2, r3
 80005b0:	b2db      	uxtb	r3, r3
 80005b2:	461a      	mov	r2, r3
 80005b4:	2102      	movs	r1, #2
 80005b6:	207a      	movs	r0, #122	; 0x7a
 80005b8:	f000 fc16 	bl	8000de8 <lcd_write_number>
}
 80005bc:	bf00      	nop
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	20000039 	.word	0x20000039
 80005c4:	cccccccd 	.word	0xcccccccd
 80005c8:	2000003a 	.word	0x2000003a

080005cc <update_ball_position>:

static void update_ball_position()
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af02      	add	r7, sp, #8
	lcd_draw_clear_rect(ball_x, ball_y, BALL_SIZE, BALL_SIZE, 0);
 80005d2:	4b54      	ldr	r3, [pc, #336]	; (8000724 <update_ball_position+0x158>)
 80005d4:	f993 3000 	ldrsb.w	r3, [r3]
 80005d8:	b2d8      	uxtb	r0, r3
 80005da:	4b53      	ldr	r3, [pc, #332]	; (8000728 <update_ball_position+0x15c>)
 80005dc:	f993 3000 	ldrsb.w	r3, [r3]
 80005e0:	b2d9      	uxtb	r1, r3
 80005e2:	2300      	movs	r3, #0
 80005e4:	9300      	str	r3, [sp, #0]
 80005e6:	2304      	movs	r3, #4
 80005e8:	2204      	movs	r2, #4
 80005ea:	f000 fbc5 	bl	8000d78 <lcd_draw_clear_rect>

	if(ball_x <= PADDLE_WIDTH + 1)
 80005ee:	4b4d      	ldr	r3, [pc, #308]	; (8000724 <update_ball_position+0x158>)
 80005f0:	f993 3000 	ldrsb.w	r3, [r3]
 80005f4:	2b06      	cmp	r3, #6
 80005f6:	dc28      	bgt.n	800064a <update_ball_position+0x7e>
	{
		if((ball_y + BALL_SIZE > enc1_count) && (ball_y < enc1_count + PADDLE_LENGTH))
 80005f8:	4b4b      	ldr	r3, [pc, #300]	; (8000728 <update_ball_position+0x15c>)
 80005fa:	f993 3000 	ldrsb.w	r3, [r3]
 80005fe:	1cda      	adds	r2, r3, #3
 8000600:	4b4a      	ldr	r3, [pc, #296]	; (800072c <update_ball_position+0x160>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	429a      	cmp	r2, r3
 8000606:	db13      	blt.n	8000630 <update_ball_position+0x64>
 8000608:	4b48      	ldr	r3, [pc, #288]	; (800072c <update_ball_position+0x160>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	3313      	adds	r3, #19
 800060e:	4a46      	ldr	r2, [pc, #280]	; (8000728 <update_ball_position+0x15c>)
 8000610:	f992 2000 	ldrsb.w	r2, [r2]
 8000614:	4293      	cmp	r3, r2
 8000616:	db0b      	blt.n	8000630 <update_ball_position+0x64>
		{
			// The ball hits the paddle 1
			ball_dx = 1;
 8000618:	4b45      	ldr	r3, [pc, #276]	; (8000730 <update_ball_position+0x164>)
 800061a:	2201      	movs	r2, #1
 800061c:	701a      	strb	r2, [r3, #0]
			if(ball_dy == 0) ball_dy = 1;
 800061e:	4b45      	ldr	r3, [pc, #276]	; (8000734 <update_ball_position+0x168>)
 8000620:	f993 3000 	ldrsb.w	r3, [r3]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d151      	bne.n	80006cc <update_ball_position+0x100>
 8000628:	4b42      	ldr	r3, [pc, #264]	; (8000734 <update_ball_position+0x168>)
 800062a:	2201      	movs	r2, #1
 800062c:	701a      	strb	r2, [r3, #0]
 800062e:	e04d      	b.n	80006cc <update_ball_position+0x100>
		}
		else
		{
			//paddle 1 miss
			if (player2_score < 99) player2_score++;
 8000630:	4b41      	ldr	r3, [pc, #260]	; (8000738 <update_ball_position+0x16c>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	2b62      	cmp	r3, #98	; 0x62
 8000636:	d805      	bhi.n	8000644 <update_ball_position+0x78>
 8000638:	4b3f      	ldr	r3, [pc, #252]	; (8000738 <update_ball_position+0x16c>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	3301      	adds	r3, #1
 800063e:	b2da      	uxtb	r2, r3
 8000640:	4b3d      	ldr	r3, [pc, #244]	; (8000738 <update_ball_position+0x16c>)
 8000642:	701a      	strb	r2, [r3, #0]
			game_init();
 8000644:	f000 f974 	bl	8000930 <game_init>
 8000648:	e040      	b.n	80006cc <update_ball_position+0x100>
		}
	}
	else if(ball_x >= LCD_COLUMNS - PADDLE_WIDTH - BALL_SIZE - 1)
 800064a:	4b36      	ldr	r3, [pc, #216]	; (8000724 <update_ball_position+0x158>)
 800064c:	f993 3000 	ldrsb.w	r3, [r3]
 8000650:	2b75      	cmp	r3, #117	; 0x75
 8000652:	dd28      	ble.n	80006a6 <update_ball_position+0xda>
	{
		if((ball_y + BALL_SIZE > enc2_count) && (ball_y < enc2_count + PADDLE_LENGTH))
 8000654:	4b34      	ldr	r3, [pc, #208]	; (8000728 <update_ball_position+0x15c>)
 8000656:	f993 3000 	ldrsb.w	r3, [r3]
 800065a:	1cda      	adds	r2, r3, #3
 800065c:	4b37      	ldr	r3, [pc, #220]	; (800073c <update_ball_position+0x170>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	429a      	cmp	r2, r3
 8000662:	db13      	blt.n	800068c <update_ball_position+0xc0>
 8000664:	4b35      	ldr	r3, [pc, #212]	; (800073c <update_ball_position+0x170>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	3313      	adds	r3, #19
 800066a:	4a2f      	ldr	r2, [pc, #188]	; (8000728 <update_ball_position+0x15c>)
 800066c:	f992 2000 	ldrsb.w	r2, [r2]
 8000670:	4293      	cmp	r3, r2
 8000672:	db0b      	blt.n	800068c <update_ball_position+0xc0>
		{
			// The ball hits the paddle 2
			ball_dx = -1;
 8000674:	4b2e      	ldr	r3, [pc, #184]	; (8000730 <update_ball_position+0x164>)
 8000676:	22ff      	movs	r2, #255	; 0xff
 8000678:	701a      	strb	r2, [r3, #0]
			if(ball_dy == 0) ball_dy = 1;
 800067a:	4b2e      	ldr	r3, [pc, #184]	; (8000734 <update_ball_position+0x168>)
 800067c:	f993 3000 	ldrsb.w	r3, [r3]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d123      	bne.n	80006cc <update_ball_position+0x100>
 8000684:	4b2b      	ldr	r3, [pc, #172]	; (8000734 <update_ball_position+0x168>)
 8000686:	2201      	movs	r2, #1
 8000688:	701a      	strb	r2, [r3, #0]
 800068a:	e01f      	b.n	80006cc <update_ball_position+0x100>
		}
		else
		{
			//paddle 2 miss
			if (player1_score < 99) player1_score++;
 800068c:	4b2c      	ldr	r3, [pc, #176]	; (8000740 <update_ball_position+0x174>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	2b62      	cmp	r3, #98	; 0x62
 8000692:	d805      	bhi.n	80006a0 <update_ball_position+0xd4>
 8000694:	4b2a      	ldr	r3, [pc, #168]	; (8000740 <update_ball_position+0x174>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	3301      	adds	r3, #1
 800069a:	b2da      	uxtb	r2, r3
 800069c:	4b28      	ldr	r3, [pc, #160]	; (8000740 <update_ball_position+0x174>)
 800069e:	701a      	strb	r2, [r3, #0]
			game_init();
 80006a0:	f000 f946 	bl	8000930 <game_init>
 80006a4:	e012      	b.n	80006cc <update_ball_position+0x100>
		}
	}
	else if((ball_y <= INFO_AREA_SIZE + 2) || (ball_y+BALL_SIZE >= LCD_ROWS - 1))
 80006a6:	4b20      	ldr	r3, [pc, #128]	; (8000728 <update_ball_position+0x15c>)
 80006a8:	f993 3000 	ldrsb.w	r3, [r3]
 80006ac:	2b09      	cmp	r3, #9
 80006ae:	dd04      	ble.n	80006ba <update_ball_position+0xee>
 80006b0:	4b1d      	ldr	r3, [pc, #116]	; (8000728 <update_ball_position+0x15c>)
 80006b2:	f993 3000 	ldrsb.w	r3, [r3]
 80006b6:	2b3a      	cmp	r3, #58	; 0x3a
 80006b8:	dd08      	ble.n	80006cc <update_ball_position+0x100>
	{
		// the ball hit the top or bottom wall
		ball_dy *= -1;
 80006ba:	4b1e      	ldr	r3, [pc, #120]	; (8000734 <update_ball_position+0x168>)
 80006bc:	f993 3000 	ldrsb.w	r3, [r3]
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	425b      	negs	r3, r3
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	b25a      	sxtb	r2, r3
 80006c8:	4b1a      	ldr	r3, [pc, #104]	; (8000734 <update_ball_position+0x168>)
 80006ca:	701a      	strb	r2, [r3, #0]
	}

	// Update the ball's position
	ball_x += ball_dx;
 80006cc:	4b15      	ldr	r3, [pc, #84]	; (8000724 <update_ball_position+0x158>)
 80006ce:	f993 3000 	ldrsb.w	r3, [r3]
 80006d2:	b2da      	uxtb	r2, r3
 80006d4:	4b16      	ldr	r3, [pc, #88]	; (8000730 <update_ball_position+0x164>)
 80006d6:	f993 3000 	ldrsb.w	r3, [r3]
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	4413      	add	r3, r2
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	b25a      	sxtb	r2, r3
 80006e2:	4b10      	ldr	r3, [pc, #64]	; (8000724 <update_ball_position+0x158>)
 80006e4:	701a      	strb	r2, [r3, #0]
	ball_y += ball_dy;
 80006e6:	4b10      	ldr	r3, [pc, #64]	; (8000728 <update_ball_position+0x15c>)
 80006e8:	f993 3000 	ldrsb.w	r3, [r3]
 80006ec:	b2da      	uxtb	r2, r3
 80006ee:	4b11      	ldr	r3, [pc, #68]	; (8000734 <update_ball_position+0x168>)
 80006f0:	f993 3000 	ldrsb.w	r3, [r3]
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	4413      	add	r3, r2
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	b25a      	sxtb	r2, r3
 80006fc:	4b0a      	ldr	r3, [pc, #40]	; (8000728 <update_ball_position+0x15c>)
 80006fe:	701a      	strb	r2, [r3, #0]
	lcd_draw_clear_rect(ball_x, ball_y, BALL_SIZE, BALL_SIZE, 1);
 8000700:	4b08      	ldr	r3, [pc, #32]	; (8000724 <update_ball_position+0x158>)
 8000702:	f993 3000 	ldrsb.w	r3, [r3]
 8000706:	b2d8      	uxtb	r0, r3
 8000708:	4b07      	ldr	r3, [pc, #28]	; (8000728 <update_ball_position+0x15c>)
 800070a:	f993 3000 	ldrsb.w	r3, [r3]
 800070e:	b2d9      	uxtb	r1, r3
 8000710:	2301      	movs	r3, #1
 8000712:	9300      	str	r3, [sp, #0]
 8000714:	2304      	movs	r3, #4
 8000716:	2204      	movs	r2, #4
 8000718:	f000 fb2e 	bl	8000d78 <lcd_draw_clear_rect>
}
 800071c:	bf00      	nop
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	20000035 	.word	0x20000035
 8000728:	20000036 	.word	0x20000036
 800072c:	2000208c 	.word	0x2000208c
 8000730:	20000037 	.word	0x20000037
 8000734:	20000038 	.word	0x20000038
 8000738:	2000003a 	.word	0x2000003a
 800073c:	20002098 	.word	0x20002098
 8000740:	20000039 	.word	0x20000039

08000744 <update_paddle_position>:

static void update_paddle_position()
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af02      	add	r7, sp, #8
	if((enc1_old != enc1_count))
 800074a:	4b1f      	ldr	r3, [pc, #124]	; (80007c8 <update_paddle_position+0x84>)
 800074c:	681a      	ldr	r2, [r3, #0]
 800074e:	4b1f      	ldr	r3, [pc, #124]	; (80007cc <update_paddle_position+0x88>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	429a      	cmp	r2, r3
 8000754:	d017      	beq.n	8000786 <update_paddle_position+0x42>
	{
		//update the paddle1's position
		lcd_draw_clear_rect(1,(uint8_t)enc1_old,PADDLE_LENGTH,PADDLE_WIDTH,0);
 8000756:	4b1c      	ldr	r3, [pc, #112]	; (80007c8 <update_paddle_position+0x84>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	b2d9      	uxtb	r1, r3
 800075c:	2300      	movs	r3, #0
 800075e:	9300      	str	r3, [sp, #0]
 8000760:	2305      	movs	r3, #5
 8000762:	2214      	movs	r2, #20
 8000764:	2001      	movs	r0, #1
 8000766:	f000 fb07 	bl	8000d78 <lcd_draw_clear_rect>
		lcd_draw_clear_rect(1,(uint8_t)enc1_count,PADDLE_LENGTH,PADDLE_WIDTH,1);
 800076a:	4b18      	ldr	r3, [pc, #96]	; (80007cc <update_paddle_position+0x88>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	b2d9      	uxtb	r1, r3
 8000770:	2301      	movs	r3, #1
 8000772:	9300      	str	r3, [sp, #0]
 8000774:	2305      	movs	r3, #5
 8000776:	2214      	movs	r2, #20
 8000778:	2001      	movs	r0, #1
 800077a:	f000 fafd 	bl	8000d78 <lcd_draw_clear_rect>

		enc1_old = enc1_count;
 800077e:	4b13      	ldr	r3, [pc, #76]	; (80007cc <update_paddle_position+0x88>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	4a11      	ldr	r2, [pc, #68]	; (80007c8 <update_paddle_position+0x84>)
 8000784:	6013      	str	r3, [r2, #0]
	}

	if((enc2_old != enc2_count))
 8000786:	4b12      	ldr	r3, [pc, #72]	; (80007d0 <update_paddle_position+0x8c>)
 8000788:	681a      	ldr	r2, [r3, #0]
 800078a:	4b12      	ldr	r3, [pc, #72]	; (80007d4 <update_paddle_position+0x90>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	429a      	cmp	r2, r3
 8000790:	d017      	beq.n	80007c2 <update_paddle_position+0x7e>
	{
		//update the paddle2's position
		lcd_draw_clear_rect(LCD_COLUMNS-PADDLE_WIDTH-1,(uint8_t)enc2_old,PADDLE_LENGTH,PADDLE_WIDTH,0);
 8000792:	4b0f      	ldr	r3, [pc, #60]	; (80007d0 <update_paddle_position+0x8c>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	b2d9      	uxtb	r1, r3
 8000798:	2300      	movs	r3, #0
 800079a:	9300      	str	r3, [sp, #0]
 800079c:	2305      	movs	r3, #5
 800079e:	2214      	movs	r2, #20
 80007a0:	207a      	movs	r0, #122	; 0x7a
 80007a2:	f000 fae9 	bl	8000d78 <lcd_draw_clear_rect>
		lcd_draw_clear_rect(LCD_COLUMNS-PADDLE_WIDTH-1,(uint8_t)enc2_count,PADDLE_LENGTH,PADDLE_WIDTH,1);
 80007a6:	4b0b      	ldr	r3, [pc, #44]	; (80007d4 <update_paddle_position+0x90>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	b2d9      	uxtb	r1, r3
 80007ac:	2301      	movs	r3, #1
 80007ae:	9300      	str	r3, [sp, #0]
 80007b0:	2305      	movs	r3, #5
 80007b2:	2214      	movs	r2, #20
 80007b4:	207a      	movs	r0, #122	; 0x7a
 80007b6:	f000 fadf 	bl	8000d78 <lcd_draw_clear_rect>

		enc2_old = enc2_count;
 80007ba:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <update_paddle_position+0x90>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	4a04      	ldr	r2, [pc, #16]	; (80007d0 <update_paddle_position+0x8c>)
 80007c0:	6013      	str	r3, [r2, #0]
	}
}
 80007c2:	bf00      	nop
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	20000028 	.word	0x20000028
 80007cc:	2000208c 	.word	0x2000208c
 80007d0:	20000030 	.word	0x20000030
 80007d4:	20002098 	.word	0x20002098

080007d8 <get_enc_btn_state>:

static void get_enc_btn_state()
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
	if(btn1_old != btn1)
 80007dc:	4b1f      	ldr	r3, [pc, #124]	; (800085c <get_enc_btn_state+0x84>)
 80007de:	781a      	ldrb	r2, [r3, #0]
 80007e0:	4b1f      	ldr	r3, [pc, #124]	; (8000860 <get_enc_btn_state+0x88>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	429a      	cmp	r2, r3
 80007e6:	d016      	beq.n	8000816 <get_enc_btn_state+0x3e>
	{
		//read the btn1's state
		if(btn1 == PRESSED)
 80007e8:	4b1d      	ldr	r3, [pc, #116]	; (8000860 <get_enc_btn_state+0x88>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d10e      	bne.n	800080e <get_enc_btn_state+0x36>
			player1_AI_mode = !player1_AI_mode;
 80007f0:	4b1c      	ldr	r3, [pc, #112]	; (8000864 <get_enc_btn_state+0x8c>)
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	bf14      	ite	ne
 80007f8:	2301      	movne	r3, #1
 80007fa:	2300      	moveq	r3, #0
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	f083 0301 	eor.w	r3, r3, #1
 8000802:	b2db      	uxtb	r3, r3
 8000804:	f003 0301 	and.w	r3, r3, #1
 8000808:	b2da      	uxtb	r2, r3
 800080a:	4b16      	ldr	r3, [pc, #88]	; (8000864 <get_enc_btn_state+0x8c>)
 800080c:	701a      	strb	r2, [r3, #0]

		btn1_old = btn1;
 800080e:	4b14      	ldr	r3, [pc, #80]	; (8000860 <get_enc_btn_state+0x88>)
 8000810:	781a      	ldrb	r2, [r3, #0]
 8000812:	4b12      	ldr	r3, [pc, #72]	; (800085c <get_enc_btn_state+0x84>)
 8000814:	701a      	strb	r2, [r3, #0]
	}

	if(btn2_old != btn2)
 8000816:	4b14      	ldr	r3, [pc, #80]	; (8000868 <get_enc_btn_state+0x90>)
 8000818:	781a      	ldrb	r2, [r3, #0]
 800081a:	4b14      	ldr	r3, [pc, #80]	; (800086c <get_enc_btn_state+0x94>)
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	429a      	cmp	r2, r3
 8000820:	d016      	beq.n	8000850 <get_enc_btn_state+0x78>
	{
		//read the btn2's state
		if(btn2 == PRESSED)
 8000822:	4b12      	ldr	r3, [pc, #72]	; (800086c <get_enc_btn_state+0x94>)
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d10e      	bne.n	8000848 <get_enc_btn_state+0x70>
			player2_AI_mode = !player2_AI_mode;
 800082a:	4b11      	ldr	r3, [pc, #68]	; (8000870 <get_enc_btn_state+0x98>)
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	2b00      	cmp	r3, #0
 8000830:	bf14      	ite	ne
 8000832:	2301      	movne	r3, #1
 8000834:	2300      	moveq	r3, #0
 8000836:	b2db      	uxtb	r3, r3
 8000838:	f083 0301 	eor.w	r3, r3, #1
 800083c:	b2db      	uxtb	r3, r3
 800083e:	f003 0301 	and.w	r3, r3, #1
 8000842:	b2da      	uxtb	r2, r3
 8000844:	4b0a      	ldr	r3, [pc, #40]	; (8000870 <get_enc_btn_state+0x98>)
 8000846:	701a      	strb	r2, [r3, #0]

		btn2_old = btn2;
 8000848:	4b08      	ldr	r3, [pc, #32]	; (800086c <get_enc_btn_state+0x94>)
 800084a:	781a      	ldrb	r2, [r3, #0]
 800084c:	4b06      	ldr	r3, [pc, #24]	; (8000868 <get_enc_btn_state+0x90>)
 800084e:	701a      	strb	r2, [r3, #0]
	}
}
 8000850:	bf00      	nop
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	2000002c 	.word	0x2000002c
 8000860:	20002088 	.word	0x20002088
 8000864:	2000003b 	.word	0x2000003b
 8000868:	20000034 	.word	0x20000034
 800086c:	20002089 	.word	0x20002089
 8000870:	2000003c 	.word	0x2000003c

08000874 <ai_mode>:

static void ai_mode()
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
	get_enc_btn_state();
 8000878:	f7ff ffae 	bl	80007d8 <get_enc_btn_state>

	if((player1_AI_mode) && (btn1 != PRESSED))
 800087c:	4b25      	ldr	r3, [pc, #148]	; (8000914 <ai_mode+0xa0>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d020      	beq.n	80008c6 <ai_mode+0x52>
 8000884:	4b24      	ldr	r3, [pc, #144]	; (8000918 <ai_mode+0xa4>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d01c      	beq.n	80008c6 <ai_mode+0x52>
	{
		if((enc1_count + (PADDLE_LENGTH/2)) > (ball_y+(BALL_SIZE/2)))
 800088c:	4b23      	ldr	r3, [pc, #140]	; (800091c <ai_mode+0xa8>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	3307      	adds	r3, #7
 8000892:	4a23      	ldr	r2, [pc, #140]	; (8000920 <ai_mode+0xac>)
 8000894:	f992 2000 	ldrsb.w	r2, [r2]
 8000898:	4293      	cmp	r3, r2
 800089a:	db06      	blt.n	80008aa <ai_mode+0x36>
		{
			set_enc1_val(enc1_count - 1); // Move the paddle 1 up
 800089c:	4b1f      	ldr	r3, [pc, #124]	; (800091c <ai_mode+0xa8>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	3b01      	subs	r3, #1
 80008a2:	4618      	mov	r0, r3
 80008a4:	f000 ff7e 	bl	80017a4 <set_enc1_val>
 80008a8:	e00d      	b.n	80008c6 <ai_mode+0x52>
		}
		else if((enc1_count + (PADDLE_LENGTH/2)) < (ball_y+(BALL_SIZE/2)))
 80008aa:	4b1c      	ldr	r3, [pc, #112]	; (800091c <ai_mode+0xa8>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	3308      	adds	r3, #8
 80008b0:	4a1b      	ldr	r2, [pc, #108]	; (8000920 <ai_mode+0xac>)
 80008b2:	f992 2000 	ldrsb.w	r2, [r2]
 80008b6:	4293      	cmp	r3, r2
 80008b8:	da05      	bge.n	80008c6 <ai_mode+0x52>
		{
			set_enc1_val(enc1_count + 1); // Move the paddle 1 down
 80008ba:	4b18      	ldr	r3, [pc, #96]	; (800091c <ai_mode+0xa8>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	3301      	adds	r3, #1
 80008c0:	4618      	mov	r0, r3
 80008c2:	f000 ff6f 	bl	80017a4 <set_enc1_val>
		}
	}
	if((player2_AI_mode) && (btn2 != PRESSED))
 80008c6:	4b17      	ldr	r3, [pc, #92]	; (8000924 <ai_mode+0xb0>)
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d020      	beq.n	8000910 <ai_mode+0x9c>
 80008ce:	4b16      	ldr	r3, [pc, #88]	; (8000928 <ai_mode+0xb4>)
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d01c      	beq.n	8000910 <ai_mode+0x9c>
	{
		if((enc2_count + (PADDLE_LENGTH/2)) > (ball_y+(BALL_SIZE/2)))
 80008d6:	4b15      	ldr	r3, [pc, #84]	; (800092c <ai_mode+0xb8>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	3307      	adds	r3, #7
 80008dc:	4a10      	ldr	r2, [pc, #64]	; (8000920 <ai_mode+0xac>)
 80008de:	f992 2000 	ldrsb.w	r2, [r2]
 80008e2:	4293      	cmp	r3, r2
 80008e4:	db06      	blt.n	80008f4 <ai_mode+0x80>
		{
			set_enc2_val(enc2_count - 1); // Move the paddle 2 up
 80008e6:	4b11      	ldr	r3, [pc, #68]	; (800092c <ai_mode+0xb8>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	3b01      	subs	r3, #1
 80008ec:	4618      	mov	r0, r3
 80008ee:	f000 ff7f 	bl	80017f0 <set_enc2_val>
		else if((enc2_count + (PADDLE_LENGTH/2)) < (ball_y+(BALL_SIZE/2)))
		{
			set_enc2_val(enc2_count + 1); // Move the paddle 2 down
		}
	}
}
 80008f2:	e00d      	b.n	8000910 <ai_mode+0x9c>
		else if((enc2_count + (PADDLE_LENGTH/2)) < (ball_y+(BALL_SIZE/2)))
 80008f4:	4b0d      	ldr	r3, [pc, #52]	; (800092c <ai_mode+0xb8>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	3308      	adds	r3, #8
 80008fa:	4a09      	ldr	r2, [pc, #36]	; (8000920 <ai_mode+0xac>)
 80008fc:	f992 2000 	ldrsb.w	r2, [r2]
 8000900:	4293      	cmp	r3, r2
 8000902:	da05      	bge.n	8000910 <ai_mode+0x9c>
			set_enc2_val(enc2_count + 1); // Move the paddle 2 down
 8000904:	4b09      	ldr	r3, [pc, #36]	; (800092c <ai_mode+0xb8>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	3301      	adds	r3, #1
 800090a:	4618      	mov	r0, r3
 800090c:	f000 ff70 	bl	80017f0 <set_enc2_val>
}
 8000910:	bf00      	nop
 8000912:	bd80      	pop	{r7, pc}
 8000914:	2000003b 	.word	0x2000003b
 8000918:	20002088 	.word	0x20002088
 800091c:	2000208c 	.word	0x2000208c
 8000920:	20000036 	.word	0x20000036
 8000924:	2000003c 	.word	0x2000003c
 8000928:	20002089 	.word	0x20002089
 800092c:	20002098 	.word	0x20002098

08000930 <game_init>:

static void game_init()
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af02      	add	r7, sp, #8
	//clear the display
	lcd_clear();
 8000936:	f000 f9f7 	bl	8000d28 <lcd_clear>

	//draw the border line and update the score
	draw_border_line_on_lcd();
 800093a:	f7ff fdd5 	bl	80004e8 <draw_border_line_on_lcd>
	update_score_on_lcd();
 800093e:	f7ff fe01 	bl	8000544 <update_score_on_lcd>

	//init the paddles' position
	set_enc_max_min(LCD_ROWS - PADDLE_LENGTH - 1, INFO_AREA_SIZE + 2);
 8000942:	2109      	movs	r1, #9
 8000944:	202b      	movs	r0, #43	; 0x2b
 8000946:	f000 ff17 	bl	8001778 <set_enc_max_min>
	set_enc1_val(PADDLE_INITIAL_POS);
 800094a:	2019      	movs	r0, #25
 800094c:	f000 ff2a 	bl	80017a4 <set_enc1_val>
	set_enc2_val(PADDLE_INITIAL_POS);
 8000950:	2019      	movs	r0, #25
 8000952:	f000 ff4d 	bl	80017f0 <set_enc2_val>
	enc1_old = enc1_count;
 8000956:	4b2e      	ldr	r3, [pc, #184]	; (8000a10 <game_init+0xe0>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4a2e      	ldr	r2, [pc, #184]	; (8000a14 <game_init+0xe4>)
 800095c:	6013      	str	r3, [r2, #0]
	enc2_old = enc2_count;
 800095e:	4b2e      	ldr	r3, [pc, #184]	; (8000a18 <game_init+0xe8>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	4a2e      	ldr	r2, [pc, #184]	; (8000a1c <game_init+0xec>)
 8000964:	6013      	str	r3, [r2, #0]

	//draw the paddles on lcd
	lcd_draw_clear_rect(1,(uint8_t)enc1_count,PADDLE_LENGTH,PADDLE_WIDTH,1);
 8000966:	4b2a      	ldr	r3, [pc, #168]	; (8000a10 <game_init+0xe0>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	b2d9      	uxtb	r1, r3
 800096c:	2301      	movs	r3, #1
 800096e:	9300      	str	r3, [sp, #0]
 8000970:	2305      	movs	r3, #5
 8000972:	2214      	movs	r2, #20
 8000974:	2001      	movs	r0, #1
 8000976:	f000 f9ff 	bl	8000d78 <lcd_draw_clear_rect>
	lcd_draw_clear_rect(LCD_COLUMNS-PADDLE_WIDTH-1,(uint8_t)enc2_count,PADDLE_LENGTH,PADDLE_WIDTH,1);
 800097a:	4b27      	ldr	r3, [pc, #156]	; (8000a18 <game_init+0xe8>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	b2d9      	uxtb	r1, r3
 8000980:	2301      	movs	r3, #1
 8000982:	9300      	str	r3, [sp, #0]
 8000984:	2305      	movs	r3, #5
 8000986:	2214      	movs	r2, #20
 8000988:	207a      	movs	r0, #122	; 0x7a
 800098a:	f000 f9f5 	bl	8000d78 <lcd_draw_clear_rect>

	//init the ball's position
	ball_x = BALL_INITIAL_POS_X;
 800098e:	4b24      	ldr	r3, [pc, #144]	; (8000a20 <game_init+0xf0>)
 8000990:	2240      	movs	r2, #64	; 0x40
 8000992:	701a      	strb	r2, [r3, #0]
	ball_y = BALL_INITIAL_POS_Y;
 8000994:	4b23      	ldr	r3, [pc, #140]	; (8000a24 <game_init+0xf4>)
 8000996:	2221      	movs	r2, #33	; 0x21
 8000998:	701a      	strb	r2, [r3, #0]

	//init the ball's moving direction
	if((player1_score+player2_score)%2 == 0)
 800099a:	4b23      	ldr	r3, [pc, #140]	; (8000a28 <game_init+0xf8>)
 800099c:	781a      	ldrb	r2, [r3, #0]
 800099e:	4b23      	ldr	r3, [pc, #140]	; (8000a2c <game_init+0xfc>)
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	4413      	add	r3, r2
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	f003 0301 	and.w	r3, r3, #1
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d103      	bne.n	80009b6 <game_init+0x86>
		ball_dx = -1;
 80009ae:	4b20      	ldr	r3, [pc, #128]	; (8000a30 <game_init+0x100>)
 80009b0:	22ff      	movs	r2, #255	; 0xff
 80009b2:	701a      	strb	r2, [r3, #0]
 80009b4:	e002      	b.n	80009bc <game_init+0x8c>
	else
		ball_dx = 1;
 80009b6:	4b1e      	ldr	r3, [pc, #120]	; (8000a30 <game_init+0x100>)
 80009b8:	2201      	movs	r2, #1
 80009ba:	701a      	strb	r2, [r3, #0]
	
	ball_dy = 0;
 80009bc:	4b1d      	ldr	r3, [pc, #116]	; (8000a34 <game_init+0x104>)
 80009be:	2200      	movs	r2, #0
 80009c0:	701a      	strb	r2, [r3, #0]

	//set the ball moving speed and update the AI speed
	if((player1_score+player2_score) < 10)
 80009c2:	4b19      	ldr	r3, [pc, #100]	; (8000a28 <game_init+0xf8>)
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	461a      	mov	r2, r3
 80009c8:	4b18      	ldr	r3, [pc, #96]	; (8000a2c <game_init+0xfc>)
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	4413      	add	r3, r2
 80009ce:	2b09      	cmp	r3, #9
 80009d0:	dc1a      	bgt.n	8000a08 <game_init+0xd8>
	{
		timer_func_divider_update(update_ball_position, UPDATE_BALL_DLY-(player1_score+player2_score)*3);
 80009d2:	4b15      	ldr	r3, [pc, #84]	; (8000a28 <game_init+0xf8>)
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	461a      	mov	r2, r3
 80009d8:	4b14      	ldr	r3, [pc, #80]	; (8000a2c <game_init+0xfc>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	4413      	add	r3, r2
 80009de:	461a      	mov	r2, r3
 80009e0:	009b      	lsls	r3, r3, #2
 80009e2:	1ad3      	subs	r3, r2, r3
 80009e4:	3332      	adds	r3, #50	; 0x32
 80009e6:	4619      	mov	r1, r3
 80009e8:	4813      	ldr	r0, [pc, #76]	; (8000a38 <game_init+0x108>)
 80009ea:	f001 f85f 	bl	8001aac <timer_func_divider_update>
		timer_func_divider_update(ai_mode, AI_DLY-(player1_score+player2_score)*4);
 80009ee:	4b0e      	ldr	r3, [pc, #56]	; (8000a28 <game_init+0xf8>)
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	461a      	mov	r2, r3
 80009f4:	4b0d      	ldr	r3, [pc, #52]	; (8000a2c <game_init+0xfc>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	4413      	add	r3, r2
 80009fa:	009b      	lsls	r3, r3, #2
 80009fc:	f1c3 0346 	rsb	r3, r3, #70	; 0x46
 8000a00:	4619      	mov	r1, r3
 8000a02:	480e      	ldr	r0, [pc, #56]	; (8000a3c <game_init+0x10c>)
 8000a04:	f001 f852 	bl	8001aac <timer_func_divider_update>
	}
}
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	2000208c 	.word	0x2000208c
 8000a14:	20000028 	.word	0x20000028
 8000a18:	20002098 	.word	0x20002098
 8000a1c:	20000030 	.word	0x20000030
 8000a20:	20000035 	.word	0x20000035
 8000a24:	20000036 	.word	0x20000036
 8000a28:	20000039 	.word	0x20000039
 8000a2c:	2000003a 	.word	0x2000003a
 8000a30:	20000037 	.word	0x20000037
 8000a34:	20000038 	.word	0x20000038
 8000a38:	080005cd 	.word	0x080005cd
 8000a3c:	08000875 	.word	0x08000875

08000a40 <app_init>:

void app_init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
	player1_score = 0;
 8000a44:	4b0d      	ldr	r3, [pc, #52]	; (8000a7c <app_init+0x3c>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	701a      	strb	r2, [r3, #0]
	player2_score = 0;
 8000a4a:	4b0d      	ldr	r3, [pc, #52]	; (8000a80 <app_init+0x40>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	701a      	strb	r2, [r3, #0]

	timer_init();
 8000a50:	f000 ffda 	bl	8001a08 <timer_init>
	rotary_enc_init();
 8000a54:	f000 fef2 	bl	800183c <rotary_enc_init>
	lcd_init();
 8000a58:	f000 fa14 	bl	8000e84 <lcd_init>

	game_init();
 8000a5c:	f7ff ff68 	bl	8000930 <game_init>

	timer_register(update_paddle_position, UPDATE_PADDLE_DLY);
 8000a60:	2132      	movs	r1, #50	; 0x32
 8000a62:	4808      	ldr	r0, [pc, #32]	; (8000a84 <app_init+0x44>)
 8000a64:	f000 fff6 	bl	8001a54 <timer_register>
	timer_register(update_ball_position, UPDATE_BALL_DLY);
 8000a68:	2132      	movs	r1, #50	; 0x32
 8000a6a:	4807      	ldr	r0, [pc, #28]	; (8000a88 <app_init+0x48>)
 8000a6c:	f000 fff2 	bl	8001a54 <timer_register>
	timer_register(ai_mode, AI_DLY);
 8000a70:	2146      	movs	r1, #70	; 0x46
 8000a72:	4806      	ldr	r0, [pc, #24]	; (8000a8c <app_init+0x4c>)
 8000a74:	f000 ffee 	bl	8001a54 <timer_register>
}
 8000a78:	bf00      	nop
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	20000039 	.word	0x20000039
 8000a80:	2000003a 	.word	0x2000003a
 8000a84:	08000745 	.word	0x08000745
 8000a88:	080005cd 	.word	0x080005cd
 8000a8c:	08000875 	.word	0x08000875

08000a90 <app_loop>:

void app_loop(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
	lcd_loop();
 8000a94:	f000 fa0a 	bl	8000eac <lcd_loop>
}
 8000a98:	bf00      	nop
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <delay_12_nanosec>:
/**
 * refer to Microsecond/Nanoseconds delay in STM32 » ControllersTech
 * Link: https://controllerstech.com/create-1-microsecond-delay-stm32/
 */
static void delay_12_nanosec(int dlytime)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SetCounter(&htim1, 0);
 8000aa4:	4b08      	ldr	r3, [pc, #32]	; (8000ac8 <delay_12_nanosec+0x2c>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GetCounter(&htim1) < dlytime);
 8000aac:	bf00      	nop
 8000aae:	4b06      	ldr	r3, [pc, #24]	; (8000ac8 <delay_12_nanosec+0x2c>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	429a      	cmp	r2, r3
 8000ab8:	d3f9      	bcc.n	8000aae <delay_12_nanosec+0x12>
}
 8000aba:	bf00      	nop
 8000abc:	bf00      	nop
 8000abe:	370c      	adds	r7, #12
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr
 8000ac8:	20002040 	.word	0x20002040

08000acc <lcd_reset>:

static void lcd_reset(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ad6:	4808      	ldr	r0, [pc, #32]	; (8000af8 <lcd_reset+0x2c>)
 8000ad8:	f001 fd28 	bl	800252c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000adc:	2001      	movs	r0, #1
 8000ade:	f001 fa53 	bl	8001f88 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ae8:	4803      	ldr	r0, [pc, #12]	; (8000af8 <lcd_reset+0x2c>)
 8000aea:	f001 fd1f 	bl	800252c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000aee:	2001      	movs	r0, #1
 8000af0:	f001 fa4a 	bl	8001f88 <HAL_Delay>
}
 8000af4:	bf00      	nop
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	40020800 	.word	0x40020800

08000afc <lcd_write>:

static void lcd_write(bool cs1, bool cs2, bool di, uint8_t data)
{
 8000afc:	b590      	push	{r4, r7, lr}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	4604      	mov	r4, r0
 8000b04:	4608      	mov	r0, r1
 8000b06:	4611      	mov	r1, r2
 8000b08:	461a      	mov	r2, r3
 8000b0a:	4623      	mov	r3, r4
 8000b0c:	71fb      	strb	r3, [r7, #7]
 8000b0e:	4603      	mov	r3, r0
 8000b10:	71bb      	strb	r3, [r7, #6]
 8000b12:	460b      	mov	r3, r1
 8000b14:	717b      	strb	r3, [r7, #5]
 8000b16:	4613      	mov	r3, r2
 8000b18:	713b      	strb	r3, [r7, #4]
	HAL_GPIO_WritePin(LCD_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b20:	484d      	ldr	r0, [pc, #308]	; (8000c58 <lcd_write+0x15c>)
 8000b22:	f001 fd03 	bl	800252c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_GPIO_Port, RW_Pin, GPIO_PIN_SET);
 8000b26:	2201      	movs	r2, #1
 8000b28:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b2c:	484a      	ldr	r0, [pc, #296]	; (8000c58 <lcd_write+0x15c>)
 8000b2e:	f001 fcfd 	bl	800252c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_GPIO_Port, CS1_Pin, cs1);
 8000b32:	79fb      	ldrb	r3, [r7, #7]
 8000b34:	461a      	mov	r2, r3
 8000b36:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b3a:	4847      	ldr	r0, [pc, #284]	; (8000c58 <lcd_write+0x15c>)
 8000b3c:	f001 fcf6 	bl	800252c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_GPIO_Port, CS2_Pin, cs2);
 8000b40:	79bb      	ldrb	r3, [r7, #6]
 8000b42:	461a      	mov	r2, r3
 8000b44:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b48:	4843      	ldr	r0, [pc, #268]	; (8000c58 <lcd_write+0x15c>)
 8000b4a:	f001 fcef 	bl	800252c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_GPIO_Port, DI_Pin, di);
 8000b4e:	797b      	ldrb	r3, [r7, #5]
 8000b50:	461a      	mov	r2, r3
 8000b52:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b56:	4840      	ldr	r0, [pc, #256]	; (8000c58 <lcd_write+0x15c>)
 8000b58:	f001 fce8 	bl	800252c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_GPIO_Port, DB7_Pin, (data & 0b10000000) >> 7);
 8000b5c:	793b      	ldrb	r3, [r7, #4]
 8000b5e:	09db      	lsrs	r3, r3, #7
 8000b60:	b2db      	uxtb	r3, r3
 8000b62:	461a      	mov	r2, r3
 8000b64:	2180      	movs	r1, #128	; 0x80
 8000b66:	483c      	ldr	r0, [pc, #240]	; (8000c58 <lcd_write+0x15c>)
 8000b68:	f001 fce0 	bl	800252c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_GPIO_Port, DB6_Pin, (data & 0b01000000) >> 6);
 8000b6c:	793b      	ldrb	r3, [r7, #4]
 8000b6e:	119b      	asrs	r3, r3, #6
 8000b70:	b2db      	uxtb	r3, r3
 8000b72:	f003 0301 	and.w	r3, r3, #1
 8000b76:	b2db      	uxtb	r3, r3
 8000b78:	461a      	mov	r2, r3
 8000b7a:	2140      	movs	r1, #64	; 0x40
 8000b7c:	4836      	ldr	r0, [pc, #216]	; (8000c58 <lcd_write+0x15c>)
 8000b7e:	f001 fcd5 	bl	800252c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_GPIO_Port, DB5_Pin, (data & 0b00100000) >> 5);
 8000b82:	793b      	ldrb	r3, [r7, #4]
 8000b84:	115b      	asrs	r3, r3, #5
 8000b86:	b2db      	uxtb	r3, r3
 8000b88:	f003 0301 	and.w	r3, r3, #1
 8000b8c:	b2db      	uxtb	r3, r3
 8000b8e:	461a      	mov	r2, r3
 8000b90:	2120      	movs	r1, #32
 8000b92:	4831      	ldr	r0, [pc, #196]	; (8000c58 <lcd_write+0x15c>)
 8000b94:	f001 fcca 	bl	800252c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_GPIO_Port, DB4_Pin, (data & 0b00010000) >> 4);
 8000b98:	793b      	ldrb	r3, [r7, #4]
 8000b9a:	111b      	asrs	r3, r3, #4
 8000b9c:	b2db      	uxtb	r3, r3
 8000b9e:	f003 0301 	and.w	r3, r3, #1
 8000ba2:	b2db      	uxtb	r3, r3
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	2110      	movs	r1, #16
 8000ba8:	482b      	ldr	r0, [pc, #172]	; (8000c58 <lcd_write+0x15c>)
 8000baa:	f001 fcbf 	bl	800252c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_GPIO_Port, DB3_Pin, (data & 0b00001000) >> 3);
 8000bae:	793b      	ldrb	r3, [r7, #4]
 8000bb0:	10db      	asrs	r3, r3, #3
 8000bb2:	b2db      	uxtb	r3, r3
 8000bb4:	f003 0301 	and.w	r3, r3, #1
 8000bb8:	b2db      	uxtb	r3, r3
 8000bba:	461a      	mov	r2, r3
 8000bbc:	2108      	movs	r1, #8
 8000bbe:	4826      	ldr	r0, [pc, #152]	; (8000c58 <lcd_write+0x15c>)
 8000bc0:	f001 fcb4 	bl	800252c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_GPIO_Port, DB2_Pin, (data & 0b00000100) >> 2);
 8000bc4:	793b      	ldrb	r3, [r7, #4]
 8000bc6:	109b      	asrs	r3, r3, #2
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	f003 0301 	and.w	r3, r3, #1
 8000bce:	b2db      	uxtb	r3, r3
 8000bd0:	461a      	mov	r2, r3
 8000bd2:	2104      	movs	r1, #4
 8000bd4:	4820      	ldr	r0, [pc, #128]	; (8000c58 <lcd_write+0x15c>)
 8000bd6:	f001 fca9 	bl	800252c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_GPIO_Port, DB1_Pin, (data & 0b00000010) >> 1);
 8000bda:	793b      	ldrb	r3, [r7, #4]
 8000bdc:	105b      	asrs	r3, r3, #1
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	f003 0301 	and.w	r3, r3, #1
 8000be4:	b2db      	uxtb	r3, r3
 8000be6:	461a      	mov	r2, r3
 8000be8:	2102      	movs	r1, #2
 8000bea:	481b      	ldr	r0, [pc, #108]	; (8000c58 <lcd_write+0x15c>)
 8000bec:	f001 fc9e 	bl	800252c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_GPIO_Port, DB0_Pin, (data & 0b00000001));
 8000bf0:	793b      	ldrb	r3, [r7, #4]
 8000bf2:	f003 0301 	and.w	r3, r3, #1
 8000bf6:	b2db      	uxtb	r3, r3
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	2101      	movs	r1, #1
 8000bfc:	4816      	ldr	r0, [pc, #88]	; (8000c58 <lcd_write+0x15c>)
 8000bfe:	f001 fc95 	bl	800252c <HAL_GPIO_WritePin>

	delay_12_nanosec(26);//t_EWL - T_AS1 min 450 - 140 = 310ns
 8000c02:	201a      	movs	r0, #26
 8000c04:	f7ff ff4a 	bl	8000a9c <delay_12_nanosec>

	HAL_GPIO_WritePin(LCD_GPIO_Port, RW_Pin, GPIO_PIN_RESET);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c0e:	4812      	ldr	r0, [pc, #72]	; (8000c58 <lcd_write+0x15c>)
 8000c10:	f001 fc8c 	bl	800252c <HAL_GPIO_WritePin>

	delay_12_nanosec(12);//t_AS1 min 140ns
 8000c14:	200c      	movs	r0, #12
 8000c16:	f7ff ff41 	bl	8000a9c <delay_12_nanosec>

	HAL_GPIO_WritePin(LCD_GPIO_Port, EN_Pin, GPIO_PIN_SET);
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c20:	480d      	ldr	r0, [pc, #52]	; (8000c58 <lcd_write+0x15c>)
 8000c22:	f001 fc83 	bl	800252c <HAL_GPIO_WritePin>

	delay_12_nanosec(38);//t_EWH min 450ns
 8000c26:	2026      	movs	r0, #38	; 0x26
 8000c28:	f7ff ff38 	bl	8000a9c <delay_12_nanosec>

	HAL_GPIO_WritePin(LCD_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c32:	4809      	ldr	r0, [pc, #36]	; (8000c58 <lcd_write+0x15c>)
 8000c34:	f001 fc7a 	bl	800252c <HAL_GPIO_WritePin>

	delay_12_nanosec(1);//t_AH1 min 10ns
 8000c38:	2001      	movs	r0, #1
 8000c3a:	f7ff ff2f 	bl	8000a9c <delay_12_nanosec>

	HAL_GPIO_WritePin(LCD_GPIO_Port, RW_Pin, GPIO_PIN_SET);
 8000c3e:	2201      	movs	r2, #1
 8000c40:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c44:	4804      	ldr	r0, [pc, #16]	; (8000c58 <lcd_write+0x15c>)
 8000c46:	f001 fc71 	bl	800252c <HAL_GPIO_WritePin>

	delay_12_nanosec(1);
 8000c4a:	2001      	movs	r0, #1
 8000c4c:	f7ff ff26 	bl	8000a9c <delay_12_nanosec>
}
 8000c50:	bf00      	nop
 8000c52:	370c      	adds	r7, #12
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd90      	pop	{r4, r7, pc}
 8000c58:	40020800 	.word	0x40020800

08000c5c <lcd_dsp_on_off>:

static void lcd_dsp_on_off(bool cs1, bool cs2, bool on_off)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	71fb      	strb	r3, [r7, #7]
 8000c66:	460b      	mov	r3, r1
 8000c68:	71bb      	strb	r3, [r7, #6]
 8000c6a:	4613      	mov	r3, r2
 8000c6c:	717b      	strb	r3, [r7, #5]
	lcd_write(cs1, cs2, 0, (0b00111110 | on_off));
 8000c6e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000c72:	f043 033e 	orr.w	r3, r3, #62	; 0x3e
 8000c76:	b25b      	sxtb	r3, r3
 8000c78:	b2db      	uxtb	r3, r3
 8000c7a:	79b9      	ldrb	r1, [r7, #6]
 8000c7c:	79f8      	ldrb	r0, [r7, #7]
 8000c7e:	2200      	movs	r2, #0
 8000c80:	f7ff ff3c 	bl	8000afc <lcd_write>
}
 8000c84:	bf00      	nop
 8000c86:	3708      	adds	r7, #8
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <lcd_write_addr>:

static void lcd_write_addr(uint8_t page, uint8_t column, uint8_t data)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	71fb      	strb	r3, [r7, #7]
 8000c96:	460b      	mov	r3, r1
 8000c98:	71bb      	strb	r3, [r7, #6]
 8000c9a:	4613      	mov	r3, r2
 8000c9c:	717b      	strb	r3, [r7, #5]
	bool cs;

	// Determine which chip select line to use based on the column number
	if (column < 64) cs = false;
 8000c9e:	79bb      	ldrb	r3, [r7, #6]
 8000ca0:	2b3f      	cmp	r3, #63	; 0x3f
 8000ca2:	d802      	bhi.n	8000caa <lcd_write_addr+0x1e>
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	73fb      	strb	r3, [r7, #15]
 8000ca8:	e001      	b.n	8000cae <lcd_write_addr+0x22>
	else cs = true;
 8000caa:	2301      	movs	r3, #1
 8000cac:	73fb      	strb	r3, [r7, #15]

	// Send commands and data to the LCD screen
	lcd_write(!cs, cs, 0, 0b10111000 | page);
 8000cae:	7bfb      	ldrb	r3, [r7, #15]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	bf14      	ite	ne
 8000cb4:	2301      	movne	r3, #1
 8000cb6:	2300      	moveq	r3, #0
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	f083 0301 	eor.w	r3, r3, #1
 8000cbe:	b2db      	uxtb	r3, r3
 8000cc0:	f003 0301 	and.w	r3, r3, #1
 8000cc4:	b2d8      	uxtb	r0, r3
 8000cc6:	79fb      	ldrb	r3, [r7, #7]
 8000cc8:	f063 0347 	orn	r3, r3, #71	; 0x47
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	7bf9      	ldrb	r1, [r7, #15]
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	f7ff ff13 	bl	8000afc <lcd_write>
	lcd_write(!cs, cs, 0, 0b01000000 | column);
 8000cd6:	7bfb      	ldrb	r3, [r7, #15]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	bf14      	ite	ne
 8000cdc:	2301      	movne	r3, #1
 8000cde:	2300      	moveq	r3, #0
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	f083 0301 	eor.w	r3, r3, #1
 8000ce6:	b2db      	uxtb	r3, r3
 8000ce8:	f003 0301 	and.w	r3, r3, #1
 8000cec:	b2d8      	uxtb	r0, r3
 8000cee:	79bb      	ldrb	r3, [r7, #6]
 8000cf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	7bf9      	ldrb	r1, [r7, #15]
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	f7ff feff 	bl	8000afc <lcd_write>
	lcd_write(!cs, cs, 1, data);
 8000cfe:	7bfb      	ldrb	r3, [r7, #15]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	bf14      	ite	ne
 8000d04:	2301      	movne	r3, #1
 8000d06:	2300      	moveq	r3, #0
 8000d08:	b2db      	uxtb	r3, r3
 8000d0a:	f083 0301 	eor.w	r3, r3, #1
 8000d0e:	b2db      	uxtb	r3, r3
 8000d10:	f003 0301 	and.w	r3, r3, #1
 8000d14:	b2d8      	uxtb	r0, r3
 8000d16:	797b      	ldrb	r3, [r7, #5]
 8000d18:	7bf9      	ldrb	r1, [r7, #15]
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	f7ff feee 	bl	8000afc <lcd_write>
}
 8000d20:	bf00      	nop
 8000d22:	3710      	adds	r7, #16
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <lcd_clear>:

void lcd_clear()
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
	for(uint8_t col = 0;col < LCD_COLUMNS;col++)
 8000d2e:	2300      	movs	r3, #0
 8000d30:	71fb      	strb	r3, [r7, #7]
 8000d32:	e013      	b.n	8000d5c <lcd_clear+0x34>
	{
		for(uint8_t row = 0;row < LCD_ROWS;row++)
 8000d34:	2300      	movs	r3, #0
 8000d36:	71bb      	strb	r3, [r7, #6]
 8000d38:	e00a      	b.n	8000d50 <lcd_clear+0x28>
		{
			lcd_dsp_buffer[col][row] = 0;
 8000d3a:	79fa      	ldrb	r2, [r7, #7]
 8000d3c:	79bb      	ldrb	r3, [r7, #6]
 8000d3e:	490d      	ldr	r1, [pc, #52]	; (8000d74 <lcd_clear+0x4c>)
 8000d40:	0192      	lsls	r2, r2, #6
 8000d42:	440a      	add	r2, r1
 8000d44:	4413      	add	r3, r2
 8000d46:	2200      	movs	r2, #0
 8000d48:	701a      	strb	r2, [r3, #0]
		for(uint8_t row = 0;row < LCD_ROWS;row++)
 8000d4a:	79bb      	ldrb	r3, [r7, #6]
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	71bb      	strb	r3, [r7, #6]
 8000d50:	79bb      	ldrb	r3, [r7, #6]
 8000d52:	2b3f      	cmp	r3, #63	; 0x3f
 8000d54:	d9f1      	bls.n	8000d3a <lcd_clear+0x12>
	for(uint8_t col = 0;col < LCD_COLUMNS;col++)
 8000d56:	79fb      	ldrb	r3, [r7, #7]
 8000d58:	3301      	adds	r3, #1
 8000d5a:	71fb      	strb	r3, [r7, #7]
 8000d5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	dae7      	bge.n	8000d34 <lcd_clear+0xc>
		}
	}
}
 8000d64:	bf00      	nop
 8000d66:	bf00      	nop
 8000d68:	370c      	adds	r7, #12
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	20000040 	.word	0x20000040

08000d78 <lcd_draw_clear_rect>:

void lcd_draw_clear_rect(uint8_t posX, uint8_t posY, uint8_t length, uint8_t width, bool data)
{
 8000d78:	b490      	push	{r4, r7}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	4604      	mov	r4, r0
 8000d80:	4608      	mov	r0, r1
 8000d82:	4611      	mov	r1, r2
 8000d84:	461a      	mov	r2, r3
 8000d86:	4623      	mov	r3, r4
 8000d88:	71fb      	strb	r3, [r7, #7]
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	71bb      	strb	r3, [r7, #6]
 8000d8e:	460b      	mov	r3, r1
 8000d90:	717b      	strb	r3, [r7, #5]
 8000d92:	4613      	mov	r3, r2
 8000d94:	713b      	strb	r3, [r7, #4]
	for(uint8_t col = posX;col < (width+posX);col++)
 8000d96:	79fb      	ldrb	r3, [r7, #7]
 8000d98:	73fb      	strb	r3, [r7, #15]
 8000d9a:	e016      	b.n	8000dca <lcd_draw_clear_rect+0x52>
	{
		for(uint8_t row = posY;row < (length+posY);row++)
 8000d9c:	79bb      	ldrb	r3, [r7, #6]
 8000d9e:	73bb      	strb	r3, [r7, #14]
 8000da0:	e00a      	b.n	8000db8 <lcd_draw_clear_rect+0x40>
		{
			lcd_dsp_buffer[col][row] = data;
 8000da2:	7bfa      	ldrb	r2, [r7, #15]
 8000da4:	7bbb      	ldrb	r3, [r7, #14]
 8000da6:	490f      	ldr	r1, [pc, #60]	; (8000de4 <lcd_draw_clear_rect+0x6c>)
 8000da8:	0192      	lsls	r2, r2, #6
 8000daa:	440a      	add	r2, r1
 8000dac:	4413      	add	r3, r2
 8000dae:	7e3a      	ldrb	r2, [r7, #24]
 8000db0:	701a      	strb	r2, [r3, #0]
		for(uint8_t row = posY;row < (length+posY);row++)
 8000db2:	7bbb      	ldrb	r3, [r7, #14]
 8000db4:	3301      	adds	r3, #1
 8000db6:	73bb      	strb	r3, [r7, #14]
 8000db8:	7bba      	ldrb	r2, [r7, #14]
 8000dba:	7979      	ldrb	r1, [r7, #5]
 8000dbc:	79bb      	ldrb	r3, [r7, #6]
 8000dbe:	440b      	add	r3, r1
 8000dc0:	429a      	cmp	r2, r3
 8000dc2:	dbee      	blt.n	8000da2 <lcd_draw_clear_rect+0x2a>
	for(uint8_t col = posX;col < (width+posX);col++)
 8000dc4:	7bfb      	ldrb	r3, [r7, #15]
 8000dc6:	3301      	adds	r3, #1
 8000dc8:	73fb      	strb	r3, [r7, #15]
 8000dca:	7bfa      	ldrb	r2, [r7, #15]
 8000dcc:	7939      	ldrb	r1, [r7, #4]
 8000dce:	79fb      	ldrb	r3, [r7, #7]
 8000dd0:	440b      	add	r3, r1
 8000dd2:	429a      	cmp	r2, r3
 8000dd4:	dbe2      	blt.n	8000d9c <lcd_draw_clear_rect+0x24>
		}
	}
}
 8000dd6:	bf00      	nop
 8000dd8:	bf00      	nop
 8000dda:	3710      	adds	r7, #16
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bc90      	pop	{r4, r7}
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	20000040 	.word	0x20000040

08000de8 <lcd_write_number>:

void lcd_write_number(uint8_t posX, uint8_t posY, uint8_t number)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b085      	sub	sp, #20
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	71fb      	strb	r3, [r7, #7]
 8000df2:	460b      	mov	r3, r1
 8000df4:	71bb      	strb	r3, [r7, #6]
 8000df6:	4613      	mov	r3, r2
 8000df8:	717b      	strb	r3, [r7, #5]
	for(uint8_t x = 0;x < FONT_COLUMNS;x++)
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	73fb      	strb	r3, [r7, #15]
 8000dfe:	e032      	b.n	8000e66 <lcd_write_number+0x7e>
	{
		for(uint8_t y = 0;y < FONT_ROWS;y++)
 8000e00:	2300      	movs	r3, #0
 8000e02:	73bb      	strb	r3, [r7, #14]
 8000e04:	e029      	b.n	8000e5a <lcd_write_number+0x72>
		{
			lcd_dsp_buffer[posX + x][posY + y] = (font[number+'0'][y]&(1 << x)) >> x;
 8000e06:	797b      	ldrb	r3, [r7, #5]
 8000e08:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8000e0c:	7bb9      	ldrb	r1, [r7, #14]
 8000e0e:	481b      	ldr	r0, [pc, #108]	; (8000e7c <lcd_write_number+0x94>)
 8000e10:	4613      	mov	r3, r2
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	4413      	add	r3, r2
 8000e16:	005b      	lsls	r3, r3, #1
 8000e18:	4403      	add	r3, r0
 8000e1a:	440b      	add	r3, r1
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	4619      	mov	r1, r3
 8000e20:	7bfb      	ldrb	r3, [r7, #15]
 8000e22:	2201      	movs	r2, #1
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	ea01 0203 	and.w	r2, r1, r3
 8000e2c:	7bfb      	ldrb	r3, [r7, #15]
 8000e2e:	fa42 f103 	asr.w	r1, r2, r3
 8000e32:	79fa      	ldrb	r2, [r7, #7]
 8000e34:	7bfb      	ldrb	r3, [r7, #15]
 8000e36:	441a      	add	r2, r3
 8000e38:	79b8      	ldrb	r0, [r7, #6]
 8000e3a:	7bbb      	ldrb	r3, [r7, #14]
 8000e3c:	4403      	add	r3, r0
 8000e3e:	2900      	cmp	r1, #0
 8000e40:	bf14      	ite	ne
 8000e42:	2101      	movne	r1, #1
 8000e44:	2100      	moveq	r1, #0
 8000e46:	b2c8      	uxtb	r0, r1
 8000e48:	490d      	ldr	r1, [pc, #52]	; (8000e80 <lcd_write_number+0x98>)
 8000e4a:	0192      	lsls	r2, r2, #6
 8000e4c:	440a      	add	r2, r1
 8000e4e:	4413      	add	r3, r2
 8000e50:	4602      	mov	r2, r0
 8000e52:	701a      	strb	r2, [r3, #0]
		for(uint8_t y = 0;y < FONT_ROWS;y++)
 8000e54:	7bbb      	ldrb	r3, [r7, #14]
 8000e56:	3301      	adds	r3, #1
 8000e58:	73bb      	strb	r3, [r7, #14]
 8000e5a:	7bbb      	ldrb	r3, [r7, #14]
 8000e5c:	2b05      	cmp	r3, #5
 8000e5e:	d9d2      	bls.n	8000e06 <lcd_write_number+0x1e>
	for(uint8_t x = 0;x < FONT_COLUMNS;x++)
 8000e60:	7bfb      	ldrb	r3, [r7, #15]
 8000e62:	3301      	adds	r3, #1
 8000e64:	73fb      	strb	r3, [r7, #15]
 8000e66:	7bfb      	ldrb	r3, [r7, #15]
 8000e68:	2b03      	cmp	r3, #3
 8000e6a:	d9c9      	bls.n	8000e00 <lcd_write_number+0x18>
		}
	}
}
 8000e6c:	bf00      	nop
 8000e6e:	bf00      	nop
 8000e70:	3714      	adds	r7, #20
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	08003fc8 	.word	0x08003fc8
 8000e80:	20000040 	.word	0x20000040

08000e84 <lcd_init>:

uint8_t lcd_init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim1);
 8000e88:	4807      	ldr	r0, [pc, #28]	; (8000ea8 <lcd_init+0x24>)
 8000e8a:	f002 f835 	bl	8002ef8 <HAL_TIM_Base_Start>

	lcd_reset();
 8000e8e:	f7ff fe1d 	bl	8000acc <lcd_reset>
	lcd_dsp_on_off(1,1,1);
 8000e92:	2201      	movs	r2, #1
 8000e94:	2101      	movs	r1, #1
 8000e96:	2001      	movs	r0, #1
 8000e98:	f7ff fee0 	bl	8000c5c <lcd_dsp_on_off>
	lcd_clear();
 8000e9c:	f7ff ff44 	bl	8000d28 <lcd_clear>

	return 0;
 8000ea0:	2300      	movs	r3, #0
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	20002040 	.word	0x20002040

08000eac <lcd_loop>:


void lcd_loop(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
	uint8_t data;

	for(uint8_t col = 0;col < LCD_COLUMNS;col++)
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	71bb      	strb	r3, [r7, #6]
 8000eb6:	e031      	b.n	8000f1c <lcd_loop+0x70>
	{
		for(uint8_t page = 0;page < LCD_PAGES;page++)
 8000eb8:	2300      	movs	r3, #0
 8000eba:	717b      	strb	r3, [r7, #5]
 8000ebc:	e028      	b.n	8000f10 <lcd_loop+0x64>
		{
			data = 0;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	71fb      	strb	r3, [r7, #7]
			for(uint8_t i = 0;i < 8;i++)
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	713b      	strb	r3, [r7, #4]
 8000ec6:	e017      	b.n	8000ef8 <lcd_loop+0x4c>
			{
				uint8_t row = page * 8 + i;
 8000ec8:	797b      	ldrb	r3, [r7, #5]
 8000eca:	00db      	lsls	r3, r3, #3
 8000ecc:	b2da      	uxtb	r2, r3
 8000ece:	793b      	ldrb	r3, [r7, #4]
 8000ed0:	4413      	add	r3, r2
 8000ed2:	70fb      	strb	r3, [r7, #3]
				data += lcd_dsp_buffer[col][row] << i;
 8000ed4:	79ba      	ldrb	r2, [r7, #6]
 8000ed6:	78fb      	ldrb	r3, [r7, #3]
 8000ed8:	4915      	ldr	r1, [pc, #84]	; (8000f30 <lcd_loop+0x84>)
 8000eda:	0192      	lsls	r2, r2, #6
 8000edc:	440a      	add	r2, r1
 8000ede:	4413      	add	r3, r2
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	793b      	ldrb	r3, [r7, #4]
 8000ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eea:	b2da      	uxtb	r2, r3
 8000eec:	79fb      	ldrb	r3, [r7, #7]
 8000eee:	4413      	add	r3, r2
 8000ef0:	71fb      	strb	r3, [r7, #7]
			for(uint8_t i = 0;i < 8;i++)
 8000ef2:	793b      	ldrb	r3, [r7, #4]
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	713b      	strb	r3, [r7, #4]
 8000ef8:	793b      	ldrb	r3, [r7, #4]
 8000efa:	2b07      	cmp	r3, #7
 8000efc:	d9e4      	bls.n	8000ec8 <lcd_loop+0x1c>
			}

			lcd_write_addr(page,col,data);
 8000efe:	79fa      	ldrb	r2, [r7, #7]
 8000f00:	79b9      	ldrb	r1, [r7, #6]
 8000f02:	797b      	ldrb	r3, [r7, #5]
 8000f04:	4618      	mov	r0, r3
 8000f06:	f7ff fec1 	bl	8000c8c <lcd_write_addr>
		for(uint8_t page = 0;page < LCD_PAGES;page++)
 8000f0a:	797b      	ldrb	r3, [r7, #5]
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	717b      	strb	r3, [r7, #5]
 8000f10:	797b      	ldrb	r3, [r7, #5]
 8000f12:	2b07      	cmp	r3, #7
 8000f14:	d9d3      	bls.n	8000ebe <lcd_loop+0x12>
	for(uint8_t col = 0;col < LCD_COLUMNS;col++)
 8000f16:	79bb      	ldrb	r3, [r7, #6]
 8000f18:	3301      	adds	r3, #1
 8000f1a:	71bb      	strb	r3, [r7, #6]
 8000f1c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	dac9      	bge.n	8000eb8 <lcd_loop+0xc>
		}
	}
}
 8000f24:	bf00      	nop
 8000f26:	bf00      	nop
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	20000040 	.word	0x20000040

08000f34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f38:	4b04      	ldr	r3, [pc, #16]	; (8000f4c <__NVIC_GetPriorityGrouping+0x18>)
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	0a1b      	lsrs	r3, r3, #8
 8000f3e:	f003 0307 	and.w	r3, r3, #7
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	e000ed00 	.word	0xe000ed00

08000f50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	db0b      	blt.n	8000f7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f62:	79fb      	ldrb	r3, [r7, #7]
 8000f64:	f003 021f 	and.w	r2, r3, #31
 8000f68:	4907      	ldr	r1, [pc, #28]	; (8000f88 <__NVIC_EnableIRQ+0x38>)
 8000f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6e:	095b      	lsrs	r3, r3, #5
 8000f70:	2001      	movs	r0, #1
 8000f72:	fa00 f202 	lsl.w	r2, r0, r2
 8000f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f7a:	bf00      	nop
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	e000e100 	.word	0xe000e100

08000f8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	6039      	str	r1, [r7, #0]
 8000f96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	db0a      	blt.n	8000fb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	b2da      	uxtb	r2, r3
 8000fa4:	490c      	ldr	r1, [pc, #48]	; (8000fd8 <__NVIC_SetPriority+0x4c>)
 8000fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000faa:	0112      	lsls	r2, r2, #4
 8000fac:	b2d2      	uxtb	r2, r2
 8000fae:	440b      	add	r3, r1
 8000fb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fb4:	e00a      	b.n	8000fcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	b2da      	uxtb	r2, r3
 8000fba:	4908      	ldr	r1, [pc, #32]	; (8000fdc <__NVIC_SetPriority+0x50>)
 8000fbc:	79fb      	ldrb	r3, [r7, #7]
 8000fbe:	f003 030f 	and.w	r3, r3, #15
 8000fc2:	3b04      	subs	r3, #4
 8000fc4:	0112      	lsls	r2, r2, #4
 8000fc6:	b2d2      	uxtb	r2, r2
 8000fc8:	440b      	add	r3, r1
 8000fca:	761a      	strb	r2, [r3, #24]
}
 8000fcc:	bf00      	nop
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr
 8000fd8:	e000e100 	.word	0xe000e100
 8000fdc:	e000ed00 	.word	0xe000ed00

08000fe0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b089      	sub	sp, #36	; 0x24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	60f8      	str	r0, [r7, #12]
 8000fe8:	60b9      	str	r1, [r7, #8]
 8000fea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	f003 0307 	and.w	r3, r3, #7
 8000ff2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	f1c3 0307 	rsb	r3, r3, #7
 8000ffa:	2b04      	cmp	r3, #4
 8000ffc:	bf28      	it	cs
 8000ffe:	2304      	movcs	r3, #4
 8001000:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	3304      	adds	r3, #4
 8001006:	2b06      	cmp	r3, #6
 8001008:	d902      	bls.n	8001010 <NVIC_EncodePriority+0x30>
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	3b03      	subs	r3, #3
 800100e:	e000      	b.n	8001012 <NVIC_EncodePriority+0x32>
 8001010:	2300      	movs	r3, #0
 8001012:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001014:	f04f 32ff 	mov.w	r2, #4294967295
 8001018:	69bb      	ldr	r3, [r7, #24]
 800101a:	fa02 f303 	lsl.w	r3, r2, r3
 800101e:	43da      	mvns	r2, r3
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	401a      	ands	r2, r3
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001028:	f04f 31ff 	mov.w	r1, #4294967295
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	fa01 f303 	lsl.w	r3, r1, r3
 8001032:	43d9      	mvns	r1, r3
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001038:	4313      	orrs	r3, r2
         );
}
 800103a:	4618      	mov	r0, r3
 800103c:	3724      	adds	r7, #36	; 0x24
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr

08001046 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8001046:	b480      	push	{r7}
 8001048:	b083      	sub	sp, #12
 800104a:	af00      	add	r7, sp, #0
 800104c:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	68db      	ldr	r3, [r3, #12]
 8001052:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	60da      	str	r2, [r3, #12]
}
 800105a:	bf00      	nop
 800105c:	370c      	adds	r7, #12
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr

08001066 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8001066:	b480      	push	{r7}
 8001068:	b083      	sub	sp, #12
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	691b      	ldr	r3, [r3, #16]
 8001072:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	695b      	ldr	r3, [r3, #20]
 800107e:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	615a      	str	r2, [r3, #20]
}
 8001086:	bf00      	nop
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
	...

08001094 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001094:	b480      	push	{r7}
 8001096:	b085      	sub	sp, #20
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800109c:	4b08      	ldr	r3, [pc, #32]	; (80010c0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800109e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010a0:	4907      	ldr	r1, [pc, #28]	; (80010c0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80010a8:	4b05      	ldr	r3, [pc, #20]	; (80010c0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80010aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	4013      	ands	r3, r2
 80010b0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010b2:	68fb      	ldr	r3, [r7, #12]
}
 80010b4:	bf00      	nop
 80010b6:	3714      	adds	r7, #20
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	40023800 	.word	0x40023800

080010c4 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b085      	sub	sp, #20
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80010cc:	4b08      	ldr	r3, [pc, #32]	; (80010f0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80010ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010d0:	4907      	ldr	r1, [pc, #28]	; (80010f0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80010d8:	4b05      	ldr	r3, [pc, #20]	; (80010f0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80010da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	4013      	ands	r3, r2
 80010e0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010e2:	68fb      	ldr	r3, [r7, #12]
}
 80010e4:	bf00      	nop
 80010e6:	3714      	adds	r7, #20
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr
 80010f0:	40023800 	.word	0x40023800

080010f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010f8:	f000 fed4 	bl	8001ea4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010fc:	f000 f80c 	bl	8001118 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001100:	f000 f926 	bl	8001350 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001104:	f000 f874 	bl	80011f0 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8001108:	f000 f8c2 	bl	8001290 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  app_init();
 800110c:	f7ff fc98 	bl	8000a40 <app_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	app_loop();
 8001110:	f7ff fcbe 	bl	8000a90 <app_loop>
 8001114:	e7fc      	b.n	8001110 <main+0x1c>
	...

08001118 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b094      	sub	sp, #80	; 0x50
 800111c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800111e:	f107 0320 	add.w	r3, r7, #32
 8001122:	2230      	movs	r2, #48	; 0x30
 8001124:	2100      	movs	r1, #0
 8001126:	4618      	mov	r0, r3
 8001128:	f002 ff30 	bl	8003f8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800112c:	f107 030c 	add.w	r3, r7, #12
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800113c:	2300      	movs	r3, #0
 800113e:	60bb      	str	r3, [r7, #8]
 8001140:	4b29      	ldr	r3, [pc, #164]	; (80011e8 <SystemClock_Config+0xd0>)
 8001142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001144:	4a28      	ldr	r2, [pc, #160]	; (80011e8 <SystemClock_Config+0xd0>)
 8001146:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800114a:	6413      	str	r3, [r2, #64]	; 0x40
 800114c:	4b26      	ldr	r3, [pc, #152]	; (80011e8 <SystemClock_Config+0xd0>)
 800114e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001150:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001154:	60bb      	str	r3, [r7, #8]
 8001156:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001158:	2300      	movs	r3, #0
 800115a:	607b      	str	r3, [r7, #4]
 800115c:	4b23      	ldr	r3, [pc, #140]	; (80011ec <SystemClock_Config+0xd4>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001164:	4a21      	ldr	r2, [pc, #132]	; (80011ec <SystemClock_Config+0xd4>)
 8001166:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800116a:	6013      	str	r3, [r2, #0]
 800116c:	4b1f      	ldr	r3, [pc, #124]	; (80011ec <SystemClock_Config+0xd4>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001174:	607b      	str	r3, [r7, #4]
 8001176:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001178:	2302      	movs	r3, #2
 800117a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800117c:	2301      	movs	r3, #1
 800117e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001180:	2310      	movs	r3, #16
 8001182:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001184:	2302      	movs	r3, #2
 8001186:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001188:	2300      	movs	r3, #0
 800118a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800118c:	2310      	movs	r3, #16
 800118e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001190:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001194:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001196:	2304      	movs	r3, #4
 8001198:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800119a:	2307      	movs	r3, #7
 800119c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800119e:	f107 0320 	add.w	r3, r7, #32
 80011a2:	4618      	mov	r0, r3
 80011a4:	f001 f9f4 	bl	8002590 <HAL_RCC_OscConfig>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80011ae:	f000 f98d 	bl	80014cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011b2:	230f      	movs	r3, #15
 80011b4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011b6:	2302      	movs	r3, #2
 80011b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011ba:	2300      	movs	r3, #0
 80011bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011c4:	2300      	movs	r3, #0
 80011c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011c8:	f107 030c 	add.w	r3, r7, #12
 80011cc:	2102      	movs	r1, #2
 80011ce:	4618      	mov	r0, r3
 80011d0:	f001 fc56 	bl	8002a80 <HAL_RCC_ClockConfig>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80011da:	f000 f977 	bl	80014cc <Error_Handler>
  }
}
 80011de:	bf00      	nop
 80011e0:	3750      	adds	r7, #80	; 0x50
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	40023800 	.word	0x40023800
 80011ec:	40007000 	.word	0x40007000

080011f0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b086      	sub	sp, #24
 80011f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011f6:	f107 0308 	add.w	r3, r7, #8
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	605a      	str	r2, [r3, #4]
 8001200:	609a      	str	r2, [r3, #8]
 8001202:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001204:	463b      	mov	r3, r7
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800120c:	4b1e      	ldr	r3, [pc, #120]	; (8001288 <MX_TIM1_Init+0x98>)
 800120e:	4a1f      	ldr	r2, [pc, #124]	; (800128c <MX_TIM1_Init+0x9c>)
 8001210:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001212:	4b1d      	ldr	r3, [pc, #116]	; (8001288 <MX_TIM1_Init+0x98>)
 8001214:	2200      	movs	r2, #0
 8001216:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001218:	4b1b      	ldr	r3, [pc, #108]	; (8001288 <MX_TIM1_Init+0x98>)
 800121a:	2200      	movs	r2, #0
 800121c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800121e:	4b1a      	ldr	r3, [pc, #104]	; (8001288 <MX_TIM1_Init+0x98>)
 8001220:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001224:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001226:	4b18      	ldr	r3, [pc, #96]	; (8001288 <MX_TIM1_Init+0x98>)
 8001228:	2200      	movs	r2, #0
 800122a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800122c:	4b16      	ldr	r3, [pc, #88]	; (8001288 <MX_TIM1_Init+0x98>)
 800122e:	2200      	movs	r2, #0
 8001230:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001232:	4b15      	ldr	r3, [pc, #84]	; (8001288 <MX_TIM1_Init+0x98>)
 8001234:	2200      	movs	r2, #0
 8001236:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001238:	4813      	ldr	r0, [pc, #76]	; (8001288 <MX_TIM1_Init+0x98>)
 800123a:	f001 fe0d 	bl	8002e58 <HAL_TIM_Base_Init>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001244:	f000 f942 	bl	80014cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001248:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800124c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800124e:	f107 0308 	add.w	r3, r7, #8
 8001252:	4619      	mov	r1, r3
 8001254:	480c      	ldr	r0, [pc, #48]	; (8001288 <MX_TIM1_Init+0x98>)
 8001256:	f001 fea9 	bl	8002fac <HAL_TIM_ConfigClockSource>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001260:	f000 f934 	bl	80014cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001264:	2300      	movs	r3, #0
 8001266:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001268:	2300      	movs	r3, #0
 800126a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800126c:	463b      	mov	r3, r7
 800126e:	4619      	mov	r1, r3
 8001270:	4805      	ldr	r0, [pc, #20]	; (8001288 <MX_TIM1_Init+0x98>)
 8001272:	f002 f87d 	bl	8003370 <HAL_TIMEx_MasterConfigSynchronization>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800127c:	f000 f926 	bl	80014cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001280:	bf00      	nop
 8001282:	3718      	adds	r7, #24
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	20002040 	.word	0x20002040
 800128c:	40010000 	.word	0x40010000

08001290 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b08e      	sub	sp, #56	; 0x38
 8001294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001296:	f107 031c 	add.w	r3, r7, #28
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	605a      	str	r2, [r3, #4]
 80012a0:	609a      	str	r2, [r3, #8]
 80012a2:	60da      	str	r2, [r3, #12]
 80012a4:	611a      	str	r2, [r3, #16]
 80012a6:	615a      	str	r2, [r3, #20]
 80012a8:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012aa:	1d3b      	adds	r3, r7, #4
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	605a      	str	r2, [r3, #4]
 80012b2:	609a      	str	r2, [r3, #8]
 80012b4:	60da      	str	r2, [r3, #12]
 80012b6:	611a      	str	r2, [r3, #16]
 80012b8:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 80012ba:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80012be:	f7ff ff01 	bl	80010c4 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80012c2:	2001      	movs	r0, #1
 80012c4:	f7ff fee6 	bl	8001094 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 80012c8:	230c      	movs	r3, #12
 80012ca:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80012cc:	2302      	movs	r3, #2
 80012ce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80012d0:	2300      	movs	r3, #0
 80012d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80012d8:	2300      	movs	r3, #0
 80012da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80012dc:	2307      	movs	r3, #7
 80012de:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e0:	1d3b      	adds	r3, r7, #4
 80012e2:	4619      	mov	r1, r3
 80012e4:	4818      	ldr	r0, [pc, #96]	; (8001348 <MX_USART2_UART_Init+0xb8>)
 80012e6:	f002 f9b6 	bl	8003656 <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80012ea:	f7ff fe23 	bl	8000f34 <__NVIC_GetPriorityGrouping>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2200      	movs	r2, #0
 80012f2:	2100      	movs	r1, #0
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff fe73 	bl	8000fe0 <NVIC_EncodePriority>
 80012fa:	4603      	mov	r3, r0
 80012fc:	4619      	mov	r1, r3
 80012fe:	2026      	movs	r0, #38	; 0x26
 8001300:	f7ff fe44 	bl	8000f8c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8001304:	2026      	movs	r0, #38	; 0x26
 8001306:	f7ff fe23 	bl	8000f50 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800130a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800130e:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001310:	2300      	movs	r3, #0
 8001312:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001314:	2300      	movs	r3, #0
 8001316:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001318:	2300      	movs	r3, #0
 800131a:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800131c:	230c      	movs	r3, #12
 800131e:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001320:	2300      	movs	r3, #0
 8001322:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001324:	2300      	movs	r3, #0
 8001326:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8001328:	f107 031c 	add.w	r3, r7, #28
 800132c:	4619      	mov	r1, r3
 800132e:	4807      	ldr	r0, [pc, #28]	; (800134c <MX_USART2_UART_Init+0xbc>)
 8001330:	f002 fda4 	bl	8003e7c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8001334:	4805      	ldr	r0, [pc, #20]	; (800134c <MX_USART2_UART_Init+0xbc>)
 8001336:	f7ff fe96 	bl	8001066 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 800133a:	4804      	ldr	r0, [pc, #16]	; (800134c <MX_USART2_UART_Init+0xbc>)
 800133c:	f7ff fe83 	bl	8001046 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001340:	bf00      	nop
 8001342:	3738      	adds	r7, #56	; 0x38
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	40020000 	.word	0x40020000
 800134c:	40004400 	.word	0x40004400

08001350 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b08a      	sub	sp, #40	; 0x28
 8001354:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001356:	f107 0314 	add.w	r3, r7, #20
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	605a      	str	r2, [r3, #4]
 8001360:	609a      	str	r2, [r3, #8]
 8001362:	60da      	str	r2, [r3, #12]
 8001364:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	613b      	str	r3, [r7, #16]
 800136a:	4b55      	ldr	r3, [pc, #340]	; (80014c0 <MX_GPIO_Init+0x170>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	4a54      	ldr	r2, [pc, #336]	; (80014c0 <MX_GPIO_Init+0x170>)
 8001370:	f043 0304 	orr.w	r3, r3, #4
 8001374:	6313      	str	r3, [r2, #48]	; 0x30
 8001376:	4b52      	ldr	r3, [pc, #328]	; (80014c0 <MX_GPIO_Init+0x170>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	f003 0304 	and.w	r3, r3, #4
 800137e:	613b      	str	r3, [r7, #16]
 8001380:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	60fb      	str	r3, [r7, #12]
 8001386:	4b4e      	ldr	r3, [pc, #312]	; (80014c0 <MX_GPIO_Init+0x170>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	4a4d      	ldr	r2, [pc, #308]	; (80014c0 <MX_GPIO_Init+0x170>)
 800138c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001390:	6313      	str	r3, [r2, #48]	; 0x30
 8001392:	4b4b      	ldr	r3, [pc, #300]	; (80014c0 <MX_GPIO_Init+0x170>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800139a:	60fb      	str	r3, [r7, #12]
 800139c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	60bb      	str	r3, [r7, #8]
 80013a2:	4b47      	ldr	r3, [pc, #284]	; (80014c0 <MX_GPIO_Init+0x170>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	4a46      	ldr	r2, [pc, #280]	; (80014c0 <MX_GPIO_Init+0x170>)
 80013a8:	f043 0301 	orr.w	r3, r3, #1
 80013ac:	6313      	str	r3, [r2, #48]	; 0x30
 80013ae:	4b44      	ldr	r3, [pc, #272]	; (80014c0 <MX_GPIO_Init+0x170>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	f003 0301 	and.w	r3, r3, #1
 80013b6:	60bb      	str	r3, [r7, #8]
 80013b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	607b      	str	r3, [r7, #4]
 80013be:	4b40      	ldr	r3, [pc, #256]	; (80014c0 <MX_GPIO_Init+0x170>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	4a3f      	ldr	r2, [pc, #252]	; (80014c0 <MX_GPIO_Init+0x170>)
 80013c4:	f043 0302 	orr.w	r3, r3, #2
 80013c8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ca:	4b3d      	ldr	r3, [pc, #244]	; (80014c0 <MX_GPIO_Init+0x170>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	f003 0302 	and.w	r3, r3, #2
 80013d2:	607b      	str	r3, [r7, #4]
 80013d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 80013d6:	2200      	movs	r2, #0
 80013d8:	f643 71ff 	movw	r1, #16383	; 0x3fff
 80013dc:	4839      	ldr	r0, [pc, #228]	; (80014c4 <MX_GPIO_Init+0x174>)
 80013de:	f001 f8a5 	bl	800252c <HAL_GPIO_WritePin>
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80013e2:	2200      	movs	r2, #0
 80013e4:	2120      	movs	r1, #32
 80013e6:	4838      	ldr	r0, [pc, #224]	; (80014c8 <MX_GPIO_Init+0x178>)
 80013e8:	f001 f8a0 	bl	800252c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC0 PC1 PC2
                           PC3 PC4 PC5 PC6
                           PC7 PC8 PC9 PC10
                           PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 80013ec:	f643 73ff 	movw	r3, #16383	; 0x3fff
 80013f0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f2:	2301      	movs	r3, #1
 80013f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f6:	2300      	movs	r3, #0
 80013f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fa:	2300      	movs	r3, #0
 80013fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013fe:	f107 0314 	add.w	r3, r7, #20
 8001402:	4619      	mov	r1, r3
 8001404:	482f      	ldr	r0, [pc, #188]	; (80014c4 <MX_GPIO_Init+0x174>)
 8001406:	f000 fef5 	bl	80021f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800140a:	2303      	movs	r3, #3
 800140c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800140e:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001412:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001414:	2300      	movs	r3, #0
 8001416:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001418:	f107 0314 	add.w	r3, r7, #20
 800141c:	4619      	mov	r1, r3
 800141e:	482a      	ldr	r0, [pc, #168]	; (80014c8 <MX_GPIO_Init+0x178>)
 8001420:	f000 fee8 	bl	80021f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_8;
 8001424:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001428:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800142a:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800142e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001430:	2301      	movs	r3, #1
 8001432:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001434:	f107 0314 	add.w	r3, r7, #20
 8001438:	4619      	mov	r1, r3
 800143a:	4823      	ldr	r0, [pc, #140]	; (80014c8 <MX_GPIO_Init+0x178>)
 800143c:	f000 feda 	bl	80021f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001440:	2320      	movs	r3, #32
 8001442:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001444:	2301      	movs	r3, #1
 8001446:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001448:	2300      	movs	r3, #0
 800144a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144c:	2300      	movs	r3, #0
 800144e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001450:	f107 0314 	add.w	r3, r7, #20
 8001454:	4619      	mov	r1, r3
 8001456:	481c      	ldr	r0, [pc, #112]	; (80014c8 <MX_GPIO_Init+0x178>)
 8001458:	f000 fecc 	bl	80021f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800145c:	23c0      	movs	r3, #192	; 0xc0
 800145e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001460:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001464:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001466:	2300      	movs	r3, #0
 8001468:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800146a:	f107 0314 	add.w	r3, r7, #20
 800146e:	4619      	mov	r1, r3
 8001470:	4815      	ldr	r0, [pc, #84]	; (80014c8 <MX_GPIO_Init+0x178>)
 8001472:	f000 febf 	bl	80021f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001476:	2200      	movs	r2, #0
 8001478:	2100      	movs	r1, #0
 800147a:	2006      	movs	r0, #6
 800147c:	f000 fe83 	bl	8002186 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001480:	2006      	movs	r0, #6
 8001482:	f000 fe9c 	bl	80021be <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001486:	2200      	movs	r2, #0
 8001488:	2100      	movs	r1, #0
 800148a:	2007      	movs	r0, #7
 800148c:	f000 fe7b 	bl	8002186 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001490:	2007      	movs	r0, #7
 8001492:	f000 fe94 	bl	80021be <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001496:	2200      	movs	r2, #0
 8001498:	2100      	movs	r1, #0
 800149a:	200a      	movs	r0, #10
 800149c:	f000 fe73 	bl	8002186 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80014a0:	200a      	movs	r0, #10
 80014a2:	f000 fe8c 	bl	80021be <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80014a6:	2200      	movs	r2, #0
 80014a8:	2100      	movs	r1, #0
 80014aa:	2017      	movs	r0, #23
 80014ac:	f000 fe6b 	bl	8002186 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80014b0:	2017      	movs	r0, #23
 80014b2:	f000 fe84 	bl	80021be <HAL_NVIC_EnableIRQ>

}
 80014b6:	bf00      	nop
 80014b8:	3728      	adds	r7, #40	; 0x28
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	40023800 	.word	0x40023800
 80014c4:	40020800 	.word	0x40020800
 80014c8:	40020000 	.word	0x40020000

080014cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014d0:	b672      	cpsid	i
}
 80014d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014d4:	e7fe      	b.n	80014d4 <Error_Handler+0x8>
	...

080014d8 <HAL_GPIO_EXTI_Callback>:
/**
 * refer to STM32 Rotary Encoder - Stm32World Wiki
 * Link: https://stm32world.com/wiki/STM32_Rotary_Encoder
*/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80014d8:	b590      	push	{r4, r7, lr}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	4603      	mov	r3, r0
 80014e0:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin)
 80014e2:	88fb      	ldrh	r3, [r7, #6]
 80014e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80014e8:	d016      	beq.n	8001518 <HAL_GPIO_EXTI_Callback+0x40>
 80014ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80014ee:	f300 8124 	bgt.w	800173a <HAL_GPIO_EXTI_Callback+0x262>
 80014f2:	2b80      	cmp	r3, #128	; 0x80
 80014f4:	d02f      	beq.n	8001556 <HAL_GPIO_EXTI_Callback+0x7e>
 80014f6:	2b80      	cmp	r3, #128	; 0x80
 80014f8:	f300 811f 	bgt.w	800173a <HAL_GPIO_EXTI_Callback+0x262>
 80014fc:	2b40      	cmp	r3, #64	; 0x40
 80014fe:	d02a      	beq.n	8001556 <HAL_GPIO_EXTI_Callback+0x7e>
 8001500:	2b40      	cmp	r3, #64	; 0x40
 8001502:	f300 811a 	bgt.w	800173a <HAL_GPIO_EXTI_Callback+0x262>
 8001506:	2b02      	cmp	r3, #2
 8001508:	dc03      	bgt.n	8001512 <HAL_GPIO_EXTI_Callback+0x3a>
 800150a:	2b00      	cmp	r3, #0
 800150c:	f300 809c 	bgt.w	8001648 <HAL_GPIO_EXTI_Callback+0x170>
			}
			enc2_count = enc2/4;
			enc2_old_state = enc2_new_state;
			break;
		default:
			break;
 8001510:	e113      	b.n	800173a <HAL_GPIO_EXTI_Callback+0x262>
	switch(GPIO_Pin)
 8001512:	2b10      	cmp	r3, #16
 8001514:	d010      	beq.n	8001538 <HAL_GPIO_EXTI_Callback+0x60>
			break;
 8001516:	e110      	b.n	800173a <HAL_GPIO_EXTI_Callback+0x262>
			if (HAL_GPIO_ReadPin(GPIOA, BTN1_PIN)) btn1 = RELEASED;
 8001518:	f44f 7180 	mov.w	r1, #256	; 0x100
 800151c:	4889      	ldr	r0, [pc, #548]	; (8001744 <HAL_GPIO_EXTI_Callback+0x26c>)
 800151e:	f000 ffed 	bl	80024fc <HAL_GPIO_ReadPin>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d003      	beq.n	8001530 <HAL_GPIO_EXTI_Callback+0x58>
 8001528:	4b87      	ldr	r3, [pc, #540]	; (8001748 <HAL_GPIO_EXTI_Callback+0x270>)
 800152a:	2201      	movs	r2, #1
 800152c:	701a      	strb	r2, [r3, #0]
			break;
 800152e:	e105      	b.n	800173c <HAL_GPIO_EXTI_Callback+0x264>
			else btn1 = PRESSED;
 8001530:	4b85      	ldr	r3, [pc, #532]	; (8001748 <HAL_GPIO_EXTI_Callback+0x270>)
 8001532:	2200      	movs	r2, #0
 8001534:	701a      	strb	r2, [r3, #0]
			break;
 8001536:	e101      	b.n	800173c <HAL_GPIO_EXTI_Callback+0x264>
			if (HAL_GPIO_ReadPin(GPIOA, BTN2_PIN)) btn2 = RELEASED;
 8001538:	2110      	movs	r1, #16
 800153a:	4882      	ldr	r0, [pc, #520]	; (8001744 <HAL_GPIO_EXTI_Callback+0x26c>)
 800153c:	f000 ffde 	bl	80024fc <HAL_GPIO_ReadPin>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d003      	beq.n	800154e <HAL_GPIO_EXTI_Callback+0x76>
 8001546:	4b81      	ldr	r3, [pc, #516]	; (800174c <HAL_GPIO_EXTI_Callback+0x274>)
 8001548:	2201      	movs	r2, #1
 800154a:	701a      	strb	r2, [r3, #0]
			break;
 800154c:	e0f6      	b.n	800173c <HAL_GPIO_EXTI_Callback+0x264>
			else btn2 = PRESSED;
 800154e:	4b7f      	ldr	r3, [pc, #508]	; (800174c <HAL_GPIO_EXTI_Callback+0x274>)
 8001550:	2200      	movs	r2, #0
 8001552:	701a      	strb	r2, [r3, #0]
			break;
 8001554:	e0f2      	b.n	800173c <HAL_GPIO_EXTI_Callback+0x264>
			enc1_new_state = (uint8_t)((HAL_GPIO_ReadPin(GPIOA, ENC1_B_PIN) << 1)
 8001556:	2140      	movs	r1, #64	; 0x40
 8001558:	487a      	ldr	r0, [pc, #488]	; (8001744 <HAL_GPIO_EXTI_Callback+0x26c>)
 800155a:	f000 ffcf 	bl	80024fc <HAL_GPIO_ReadPin>
 800155e:	4603      	mov	r3, r0
 8001560:	005b      	lsls	r3, r3, #1
										| (HAL_GPIO_ReadPin(GPIOA, ENC1_A_PIN)));
 8001562:	b25c      	sxtb	r4, r3
 8001564:	2180      	movs	r1, #128	; 0x80
 8001566:	4877      	ldr	r0, [pc, #476]	; (8001744 <HAL_GPIO_EXTI_Callback+0x26c>)
 8001568:	f000 ffc8 	bl	80024fc <HAL_GPIO_ReadPin>
 800156c:	4603      	mov	r3, r0
 800156e:	b25b      	sxtb	r3, r3
 8001570:	4323      	orrs	r3, r4
 8001572:	b25b      	sxtb	r3, r3
			enc1_new_state = (uint8_t)((HAL_GPIO_ReadPin(GPIOA, ENC1_B_PIN) << 1)
 8001574:	b2da      	uxtb	r2, r3
 8001576:	4b76      	ldr	r3, [pc, #472]	; (8001750 <HAL_GPIO_EXTI_Callback+0x278>)
 8001578:	701a      	strb	r2, [r3, #0]
			if ((enc1_old_state == 3 && enc1_new_state == 2)
 800157a:	4b76      	ldr	r3, [pc, #472]	; (8001754 <HAL_GPIO_EXTI_Callback+0x27c>)
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	2b03      	cmp	r3, #3
 8001580:	d103      	bne.n	800158a <HAL_GPIO_EXTI_Callback+0xb2>
 8001582:	4b73      	ldr	r3, [pc, #460]	; (8001750 <HAL_GPIO_EXTI_Callback+0x278>)
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	2b02      	cmp	r3, #2
 8001588:	d017      	beq.n	80015ba <HAL_GPIO_EXTI_Callback+0xe2>
				|| (enc1_old_state == 2 && enc1_new_state == 0)
 800158a:	4b72      	ldr	r3, [pc, #456]	; (8001754 <HAL_GPIO_EXTI_Callback+0x27c>)
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	2b02      	cmp	r3, #2
 8001590:	d103      	bne.n	800159a <HAL_GPIO_EXTI_Callback+0xc2>
 8001592:	4b6f      	ldr	r3, [pc, #444]	; (8001750 <HAL_GPIO_EXTI_Callback+0x278>)
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d00f      	beq.n	80015ba <HAL_GPIO_EXTI_Callback+0xe2>
				|| (enc1_old_state == 0 && enc1_new_state == 1)
 800159a:	4b6e      	ldr	r3, [pc, #440]	; (8001754 <HAL_GPIO_EXTI_Callback+0x27c>)
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d103      	bne.n	80015aa <HAL_GPIO_EXTI_Callback+0xd2>
 80015a2:	4b6b      	ldr	r3, [pc, #428]	; (8001750 <HAL_GPIO_EXTI_Callback+0x278>)
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d007      	beq.n	80015ba <HAL_GPIO_EXTI_Callback+0xe2>
				|| (enc1_old_state == 1 && enc1_new_state == 3))
 80015aa:	4b6a      	ldr	r3, [pc, #424]	; (8001754 <HAL_GPIO_EXTI_Callback+0x27c>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d110      	bne.n	80015d4 <HAL_GPIO_EXTI_Callback+0xfc>
 80015b2:	4b67      	ldr	r3, [pc, #412]	; (8001750 <HAL_GPIO_EXTI_Callback+0x278>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	2b03      	cmp	r3, #3
 80015b8:	d10c      	bne.n	80015d4 <HAL_GPIO_EXTI_Callback+0xfc>
				if (enc1 < enc_max*4) enc1++;
 80015ba:	4b67      	ldr	r3, [pc, #412]	; (8001758 <HAL_GPIO_EXTI_Callback+0x280>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	009a      	lsls	r2, r3, #2
 80015c0:	4b66      	ldr	r3, [pc, #408]	; (800175c <HAL_GPIO_EXTI_Callback+0x284>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	dd31      	ble.n	800162c <HAL_GPIO_EXTI_Callback+0x154>
 80015c8:	4b64      	ldr	r3, [pc, #400]	; (800175c <HAL_GPIO_EXTI_Callback+0x284>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	3301      	adds	r3, #1
 80015ce:	4a63      	ldr	r2, [pc, #396]	; (800175c <HAL_GPIO_EXTI_Callback+0x284>)
 80015d0:	6013      	str	r3, [r2, #0]
 80015d2:	e02b      	b.n	800162c <HAL_GPIO_EXTI_Callback+0x154>
			else if ((enc1_old_state == 3 && enc1_new_state == 1)
 80015d4:	4b5f      	ldr	r3, [pc, #380]	; (8001754 <HAL_GPIO_EXTI_Callback+0x27c>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	2b03      	cmp	r3, #3
 80015da:	d103      	bne.n	80015e4 <HAL_GPIO_EXTI_Callback+0x10c>
 80015dc:	4b5c      	ldr	r3, [pc, #368]	; (8001750 <HAL_GPIO_EXTI_Callback+0x278>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d017      	beq.n	8001614 <HAL_GPIO_EXTI_Callback+0x13c>
				|| (enc1_old_state == 1 && enc1_new_state == 0)
 80015e4:	4b5b      	ldr	r3, [pc, #364]	; (8001754 <HAL_GPIO_EXTI_Callback+0x27c>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d103      	bne.n	80015f4 <HAL_GPIO_EXTI_Callback+0x11c>
 80015ec:	4b58      	ldr	r3, [pc, #352]	; (8001750 <HAL_GPIO_EXTI_Callback+0x278>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d00f      	beq.n	8001614 <HAL_GPIO_EXTI_Callback+0x13c>
				|| (enc1_old_state == 0 && enc1_new_state == 2)
 80015f4:	4b57      	ldr	r3, [pc, #348]	; (8001754 <HAL_GPIO_EXTI_Callback+0x27c>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d103      	bne.n	8001604 <HAL_GPIO_EXTI_Callback+0x12c>
 80015fc:	4b54      	ldr	r3, [pc, #336]	; (8001750 <HAL_GPIO_EXTI_Callback+0x278>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	2b02      	cmp	r3, #2
 8001602:	d007      	beq.n	8001614 <HAL_GPIO_EXTI_Callback+0x13c>
				|| (enc1_old_state == 2 && enc1_new_state == 3))
 8001604:	4b53      	ldr	r3, [pc, #332]	; (8001754 <HAL_GPIO_EXTI_Callback+0x27c>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	2b02      	cmp	r3, #2
 800160a:	d10f      	bne.n	800162c <HAL_GPIO_EXTI_Callback+0x154>
 800160c:	4b50      	ldr	r3, [pc, #320]	; (8001750 <HAL_GPIO_EXTI_Callback+0x278>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	2b03      	cmp	r3, #3
 8001612:	d10b      	bne.n	800162c <HAL_GPIO_EXTI_Callback+0x154>
				if (enc1 > enc_min*4) enc1--;
 8001614:	4b52      	ldr	r3, [pc, #328]	; (8001760 <HAL_GPIO_EXTI_Callback+0x288>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	009a      	lsls	r2, r3, #2
 800161a:	4b50      	ldr	r3, [pc, #320]	; (800175c <HAL_GPIO_EXTI_Callback+0x284>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	429a      	cmp	r2, r3
 8001620:	da04      	bge.n	800162c <HAL_GPIO_EXTI_Callback+0x154>
 8001622:	4b4e      	ldr	r3, [pc, #312]	; (800175c <HAL_GPIO_EXTI_Callback+0x284>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	3b01      	subs	r3, #1
 8001628:	4a4c      	ldr	r2, [pc, #304]	; (800175c <HAL_GPIO_EXTI_Callback+0x284>)
 800162a:	6013      	str	r3, [r2, #0]
			enc1_count = enc1/4;
 800162c:	4b4b      	ldr	r3, [pc, #300]	; (800175c <HAL_GPIO_EXTI_Callback+0x284>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2b00      	cmp	r3, #0
 8001632:	da00      	bge.n	8001636 <HAL_GPIO_EXTI_Callback+0x15e>
 8001634:	3303      	adds	r3, #3
 8001636:	109b      	asrs	r3, r3, #2
 8001638:	461a      	mov	r2, r3
 800163a:	4b4a      	ldr	r3, [pc, #296]	; (8001764 <HAL_GPIO_EXTI_Callback+0x28c>)
 800163c:	601a      	str	r2, [r3, #0]
			enc1_old_state = enc1_new_state;
 800163e:	4b44      	ldr	r3, [pc, #272]	; (8001750 <HAL_GPIO_EXTI_Callback+0x278>)
 8001640:	781a      	ldrb	r2, [r3, #0]
 8001642:	4b44      	ldr	r3, [pc, #272]	; (8001754 <HAL_GPIO_EXTI_Callback+0x27c>)
 8001644:	701a      	strb	r2, [r3, #0]
			break;
 8001646:	e079      	b.n	800173c <HAL_GPIO_EXTI_Callback+0x264>
			enc2_new_state = (uint8_t)((HAL_GPIO_ReadPin(GPIOA, ENC2_B_PIN) << 1)
 8001648:	2102      	movs	r1, #2
 800164a:	483e      	ldr	r0, [pc, #248]	; (8001744 <HAL_GPIO_EXTI_Callback+0x26c>)
 800164c:	f000 ff56 	bl	80024fc <HAL_GPIO_ReadPin>
 8001650:	4603      	mov	r3, r0
 8001652:	005b      	lsls	r3, r3, #1
										| (HAL_GPIO_ReadPin(GPIOA, ENC2_A_PIN)));
 8001654:	b25c      	sxtb	r4, r3
 8001656:	2101      	movs	r1, #1
 8001658:	483a      	ldr	r0, [pc, #232]	; (8001744 <HAL_GPIO_EXTI_Callback+0x26c>)
 800165a:	f000 ff4f 	bl	80024fc <HAL_GPIO_ReadPin>
 800165e:	4603      	mov	r3, r0
 8001660:	b25b      	sxtb	r3, r3
 8001662:	4323      	orrs	r3, r4
 8001664:	b25b      	sxtb	r3, r3
			enc2_new_state = (uint8_t)((HAL_GPIO_ReadPin(GPIOA, ENC2_B_PIN) << 1)
 8001666:	b2da      	uxtb	r2, r3
 8001668:	4b3f      	ldr	r3, [pc, #252]	; (8001768 <HAL_GPIO_EXTI_Callback+0x290>)
 800166a:	701a      	strb	r2, [r3, #0]
			if ((enc2_old_state == 3 && enc2_new_state == 2)
 800166c:	4b3f      	ldr	r3, [pc, #252]	; (800176c <HAL_GPIO_EXTI_Callback+0x294>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	2b03      	cmp	r3, #3
 8001672:	d103      	bne.n	800167c <HAL_GPIO_EXTI_Callback+0x1a4>
 8001674:	4b3c      	ldr	r3, [pc, #240]	; (8001768 <HAL_GPIO_EXTI_Callback+0x290>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	2b02      	cmp	r3, #2
 800167a:	d017      	beq.n	80016ac <HAL_GPIO_EXTI_Callback+0x1d4>
				|| (enc2_old_state == 2 && enc2_new_state == 0)
 800167c:	4b3b      	ldr	r3, [pc, #236]	; (800176c <HAL_GPIO_EXTI_Callback+0x294>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	2b02      	cmp	r3, #2
 8001682:	d103      	bne.n	800168c <HAL_GPIO_EXTI_Callback+0x1b4>
 8001684:	4b38      	ldr	r3, [pc, #224]	; (8001768 <HAL_GPIO_EXTI_Callback+0x290>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d00f      	beq.n	80016ac <HAL_GPIO_EXTI_Callback+0x1d4>
				|| (enc2_old_state == 0 && enc2_new_state == 1)
 800168c:	4b37      	ldr	r3, [pc, #220]	; (800176c <HAL_GPIO_EXTI_Callback+0x294>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d103      	bne.n	800169c <HAL_GPIO_EXTI_Callback+0x1c4>
 8001694:	4b34      	ldr	r3, [pc, #208]	; (8001768 <HAL_GPIO_EXTI_Callback+0x290>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	2b01      	cmp	r3, #1
 800169a:	d007      	beq.n	80016ac <HAL_GPIO_EXTI_Callback+0x1d4>
				|| (enc2_old_state == 1 && enc2_new_state == 3))
 800169c:	4b33      	ldr	r3, [pc, #204]	; (800176c <HAL_GPIO_EXTI_Callback+0x294>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d110      	bne.n	80016c6 <HAL_GPIO_EXTI_Callback+0x1ee>
 80016a4:	4b30      	ldr	r3, [pc, #192]	; (8001768 <HAL_GPIO_EXTI_Callback+0x290>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	2b03      	cmp	r3, #3
 80016aa:	d10c      	bne.n	80016c6 <HAL_GPIO_EXTI_Callback+0x1ee>
				if (enc2 < enc_max*4) enc2++;
 80016ac:	4b2a      	ldr	r3, [pc, #168]	; (8001758 <HAL_GPIO_EXTI_Callback+0x280>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	009a      	lsls	r2, r3, #2
 80016b2:	4b2f      	ldr	r3, [pc, #188]	; (8001770 <HAL_GPIO_EXTI_Callback+0x298>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	429a      	cmp	r2, r3
 80016b8:	dd31      	ble.n	800171e <HAL_GPIO_EXTI_Callback+0x246>
 80016ba:	4b2d      	ldr	r3, [pc, #180]	; (8001770 <HAL_GPIO_EXTI_Callback+0x298>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	3301      	adds	r3, #1
 80016c0:	4a2b      	ldr	r2, [pc, #172]	; (8001770 <HAL_GPIO_EXTI_Callback+0x298>)
 80016c2:	6013      	str	r3, [r2, #0]
 80016c4:	e02b      	b.n	800171e <HAL_GPIO_EXTI_Callback+0x246>
			else if ((enc2_old_state == 3 && enc2_new_state == 1)
 80016c6:	4b29      	ldr	r3, [pc, #164]	; (800176c <HAL_GPIO_EXTI_Callback+0x294>)
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	2b03      	cmp	r3, #3
 80016cc:	d103      	bne.n	80016d6 <HAL_GPIO_EXTI_Callback+0x1fe>
 80016ce:	4b26      	ldr	r3, [pc, #152]	; (8001768 <HAL_GPIO_EXTI_Callback+0x290>)
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d017      	beq.n	8001706 <HAL_GPIO_EXTI_Callback+0x22e>
				|| (enc2_old_state == 1 && enc2_new_state == 0)
 80016d6:	4b25      	ldr	r3, [pc, #148]	; (800176c <HAL_GPIO_EXTI_Callback+0x294>)
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d103      	bne.n	80016e6 <HAL_GPIO_EXTI_Callback+0x20e>
 80016de:	4b22      	ldr	r3, [pc, #136]	; (8001768 <HAL_GPIO_EXTI_Callback+0x290>)
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d00f      	beq.n	8001706 <HAL_GPIO_EXTI_Callback+0x22e>
				|| (enc2_old_state == 0 && enc2_new_state == 2)
 80016e6:	4b21      	ldr	r3, [pc, #132]	; (800176c <HAL_GPIO_EXTI_Callback+0x294>)
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d103      	bne.n	80016f6 <HAL_GPIO_EXTI_Callback+0x21e>
 80016ee:	4b1e      	ldr	r3, [pc, #120]	; (8001768 <HAL_GPIO_EXTI_Callback+0x290>)
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d007      	beq.n	8001706 <HAL_GPIO_EXTI_Callback+0x22e>
				|| (enc2_old_state == 2 && enc2_new_state == 3))
 80016f6:	4b1d      	ldr	r3, [pc, #116]	; (800176c <HAL_GPIO_EXTI_Callback+0x294>)
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	d10f      	bne.n	800171e <HAL_GPIO_EXTI_Callback+0x246>
 80016fe:	4b1a      	ldr	r3, [pc, #104]	; (8001768 <HAL_GPIO_EXTI_Callback+0x290>)
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	2b03      	cmp	r3, #3
 8001704:	d10b      	bne.n	800171e <HAL_GPIO_EXTI_Callback+0x246>
				if (enc2 > enc_min*4) enc2--;
 8001706:	4b16      	ldr	r3, [pc, #88]	; (8001760 <HAL_GPIO_EXTI_Callback+0x288>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	009a      	lsls	r2, r3, #2
 800170c:	4b18      	ldr	r3, [pc, #96]	; (8001770 <HAL_GPIO_EXTI_Callback+0x298>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	429a      	cmp	r2, r3
 8001712:	da04      	bge.n	800171e <HAL_GPIO_EXTI_Callback+0x246>
 8001714:	4b16      	ldr	r3, [pc, #88]	; (8001770 <HAL_GPIO_EXTI_Callback+0x298>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	3b01      	subs	r3, #1
 800171a:	4a15      	ldr	r2, [pc, #84]	; (8001770 <HAL_GPIO_EXTI_Callback+0x298>)
 800171c:	6013      	str	r3, [r2, #0]
			enc2_count = enc2/4;
 800171e:	4b14      	ldr	r3, [pc, #80]	; (8001770 <HAL_GPIO_EXTI_Callback+0x298>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	2b00      	cmp	r3, #0
 8001724:	da00      	bge.n	8001728 <HAL_GPIO_EXTI_Callback+0x250>
 8001726:	3303      	adds	r3, #3
 8001728:	109b      	asrs	r3, r3, #2
 800172a:	461a      	mov	r2, r3
 800172c:	4b11      	ldr	r3, [pc, #68]	; (8001774 <HAL_GPIO_EXTI_Callback+0x29c>)
 800172e:	601a      	str	r2, [r3, #0]
			enc2_old_state = enc2_new_state;
 8001730:	4b0d      	ldr	r3, [pc, #52]	; (8001768 <HAL_GPIO_EXTI_Callback+0x290>)
 8001732:	781a      	ldrb	r2, [r3, #0]
 8001734:	4b0d      	ldr	r3, [pc, #52]	; (800176c <HAL_GPIO_EXTI_Callback+0x294>)
 8001736:	701a      	strb	r2, [r3, #0]
			break;
 8001738:	e000      	b.n	800173c <HAL_GPIO_EXTI_Callback+0x264>
			break;
 800173a:	bf00      	nop
	}
}
 800173c:	bf00      	nop
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	bd90      	pop	{r4, r7, pc}
 8001744:	40020000 	.word	0x40020000
 8001748:	20002088 	.word	0x20002088
 800174c:	20002089 	.word	0x20002089
 8001750:	20002095 	.word	0x20002095
 8001754:	20002094 	.word	0x20002094
 8001758:	200020a4 	.word	0x200020a4
 800175c:	20002090 	.word	0x20002090
 8001760:	200020a8 	.word	0x200020a8
 8001764:	2000208c 	.word	0x2000208c
 8001768:	200020a1 	.word	0x200020a1
 800176c:	200020a0 	.word	0x200020a0
 8001770:	2000209c 	.word	0x2000209c
 8001774:	20002098 	.word	0x20002098

08001778 <set_enc_max_min>:

void set_enc_max_min(int32_t max, int32_t min){
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	6039      	str	r1, [r7, #0]
	enc_max = max;
 8001782:	4a06      	ldr	r2, [pc, #24]	; (800179c <set_enc_max_min+0x24>)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6013      	str	r3, [r2, #0]
	enc_min = min;
 8001788:	4a05      	ldr	r2, [pc, #20]	; (80017a0 <set_enc_max_min+0x28>)
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	6013      	str	r3, [r2, #0]
}
 800178e:	bf00      	nop
 8001790:	370c      	adds	r7, #12
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	200020a4 	.word	0x200020a4
 80017a0:	200020a8 	.word	0x200020a8

080017a4 <set_enc1_val>:

uint8_t set_enc1_val(int32_t value)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
	if ((value <= (enc_max)) && (value >= (enc_min)))
 80017ac:	4b0c      	ldr	r3, [pc, #48]	; (80017e0 <set_enc1_val+0x3c>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	687a      	ldr	r2, [r7, #4]
 80017b2:	429a      	cmp	r2, r3
 80017b4:	dc0d      	bgt.n	80017d2 <set_enc1_val+0x2e>
 80017b6:	4b0b      	ldr	r3, [pc, #44]	; (80017e4 <set_enc1_val+0x40>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	687a      	ldr	r2, [r7, #4]
 80017bc:	429a      	cmp	r2, r3
 80017be:	db08      	blt.n	80017d2 <set_enc1_val+0x2e>
	{
		enc1 = value*4;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	4a08      	ldr	r2, [pc, #32]	; (80017e8 <set_enc1_val+0x44>)
 80017c6:	6013      	str	r3, [r2, #0]
		enc1_count = value;
 80017c8:	4a08      	ldr	r2, [pc, #32]	; (80017ec <set_enc1_val+0x48>)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6013      	str	r3, [r2, #0]
		return 0;
 80017ce:	2300      	movs	r3, #0
 80017d0:	e000      	b.n	80017d4 <set_enc1_val+0x30>
	}
	else
	{
		return 1;
 80017d2:	2301      	movs	r3, #1
	}
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr
 80017e0:	200020a4 	.word	0x200020a4
 80017e4:	200020a8 	.word	0x200020a8
 80017e8:	20002090 	.word	0x20002090
 80017ec:	2000208c 	.word	0x2000208c

080017f0 <set_enc2_val>:

uint8_t set_enc2_val(int32_t value)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
	if ((value <= (enc_max)) && (value >= (enc_min)))
 80017f8:	4b0c      	ldr	r3, [pc, #48]	; (800182c <set_enc2_val+0x3c>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	687a      	ldr	r2, [r7, #4]
 80017fe:	429a      	cmp	r2, r3
 8001800:	dc0d      	bgt.n	800181e <set_enc2_val+0x2e>
 8001802:	4b0b      	ldr	r3, [pc, #44]	; (8001830 <set_enc2_val+0x40>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	429a      	cmp	r2, r3
 800180a:	db08      	blt.n	800181e <set_enc2_val+0x2e>
	{
		enc2 = value*4;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	4a08      	ldr	r2, [pc, #32]	; (8001834 <set_enc2_val+0x44>)
 8001812:	6013      	str	r3, [r2, #0]
		enc2_count = value;
 8001814:	4a08      	ldr	r2, [pc, #32]	; (8001838 <set_enc2_val+0x48>)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6013      	str	r3, [r2, #0]
		return 0;
 800181a:	2300      	movs	r3, #0
 800181c:	e000      	b.n	8001820 <set_enc2_val+0x30>
	}
	else
	{
		return 1;
 800181e:	2301      	movs	r3, #1
	}
}
 8001820:	4618      	mov	r0, r3
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr
 800182c:	200020a4 	.word	0x200020a4
 8001830:	200020a8 	.word	0x200020a8
 8001834:	2000209c 	.word	0x2000209c
 8001838:	20002098 	.word	0x20002098

0800183c <rotary_enc_init>:

void rotary_enc_init()
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
	enc1 = 0;
 8001840:	4b0f      	ldr	r3, [pc, #60]	; (8001880 <rotary_enc_init+0x44>)
 8001842:	2200      	movs	r2, #0
 8001844:	601a      	str	r2, [r3, #0]
	enc1_count = 0;
 8001846:	4b0f      	ldr	r3, [pc, #60]	; (8001884 <rotary_enc_init+0x48>)
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
	enc_max = INT_MAX;
 800184c:	4b0e      	ldr	r3, [pc, #56]	; (8001888 <rotary_enc_init+0x4c>)
 800184e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001852:	601a      	str	r2, [r3, #0]
	enc_min = INT_MIN;
 8001854:	4b0d      	ldr	r3, [pc, #52]	; (800188c <rotary_enc_init+0x50>)
 8001856:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800185a:	601a      	str	r2, [r3, #0]
	btn1 = RELEASED;
 800185c:	4b0c      	ldr	r3, [pc, #48]	; (8001890 <rotary_enc_init+0x54>)
 800185e:	2201      	movs	r2, #1
 8001860:	701a      	strb	r2, [r3, #0]
	btn2 = RELEASED;
 8001862:	4b0c      	ldr	r3, [pc, #48]	; (8001894 <rotary_enc_init+0x58>)
 8001864:	2201      	movs	r2, #1
 8001866:	701a      	strb	r2, [r3, #0]
	enc1_old_state = 3;
 8001868:	4b0b      	ldr	r3, [pc, #44]	; (8001898 <rotary_enc_init+0x5c>)
 800186a:	2203      	movs	r2, #3
 800186c:	701a      	strb	r2, [r3, #0]
	enc1_new_state = 3;
 800186e:	4b0b      	ldr	r3, [pc, #44]	; (800189c <rotary_enc_init+0x60>)
 8001870:	2203      	movs	r2, #3
 8001872:	701a      	strb	r2, [r3, #0]
 8001874:	bf00      	nop
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	20002090 	.word	0x20002090
 8001884:	2000208c 	.word	0x2000208c
 8001888:	200020a4 	.word	0x200020a4
 800188c:	200020a8 	.word	0x200020a8
 8001890:	20002088 	.word	0x20002088
 8001894:	20002089 	.word	0x20002089
 8001898:	20002094 	.word	0x20002094
 800189c:	20002095 	.word	0x20002095

080018a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018a6:	2300      	movs	r3, #0
 80018a8:	607b      	str	r3, [r7, #4]
 80018aa:	4b10      	ldr	r3, [pc, #64]	; (80018ec <HAL_MspInit+0x4c>)
 80018ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ae:	4a0f      	ldr	r2, [pc, #60]	; (80018ec <HAL_MspInit+0x4c>)
 80018b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018b4:	6453      	str	r3, [r2, #68]	; 0x44
 80018b6:	4b0d      	ldr	r3, [pc, #52]	; (80018ec <HAL_MspInit+0x4c>)
 80018b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018be:	607b      	str	r3, [r7, #4]
 80018c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018c2:	2300      	movs	r3, #0
 80018c4:	603b      	str	r3, [r7, #0]
 80018c6:	4b09      	ldr	r3, [pc, #36]	; (80018ec <HAL_MspInit+0x4c>)
 80018c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ca:	4a08      	ldr	r2, [pc, #32]	; (80018ec <HAL_MspInit+0x4c>)
 80018cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018d0:	6413      	str	r3, [r2, #64]	; 0x40
 80018d2:	4b06      	ldr	r3, [pc, #24]	; (80018ec <HAL_MspInit+0x4c>)
 80018d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018da:	603b      	str	r3, [r7, #0]
 80018dc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80018de:	2007      	movs	r0, #7
 80018e0:	f000 fc46 	bl	8002170 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018e4:	bf00      	nop
 80018e6:	3708      	adds	r7, #8
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	40023800 	.word	0x40023800

080018f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b085      	sub	sp, #20
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a0b      	ldr	r2, [pc, #44]	; (800192c <HAL_TIM_Base_MspInit+0x3c>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d10d      	bne.n	800191e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	60fb      	str	r3, [r7, #12]
 8001906:	4b0a      	ldr	r3, [pc, #40]	; (8001930 <HAL_TIM_Base_MspInit+0x40>)
 8001908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800190a:	4a09      	ldr	r2, [pc, #36]	; (8001930 <HAL_TIM_Base_MspInit+0x40>)
 800190c:	f043 0301 	orr.w	r3, r3, #1
 8001910:	6453      	str	r3, [r2, #68]	; 0x44
 8001912:	4b07      	ldr	r3, [pc, #28]	; (8001930 <HAL_TIM_Base_MspInit+0x40>)
 8001914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001916:	f003 0301 	and.w	r3, r3, #1
 800191a:	60fb      	str	r3, [r7, #12]
 800191c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800191e:	bf00      	nop
 8001920:	3714      	adds	r7, #20
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	40010000 	.word	0x40010000
 8001930:	40023800 	.word	0x40023800

08001934 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001938:	e7fe      	b.n	8001938 <NMI_Handler+0x4>

0800193a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800193a:	b480      	push	{r7}
 800193c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800193e:	e7fe      	b.n	800193e <HardFault_Handler+0x4>

08001940 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001944:	e7fe      	b.n	8001944 <MemManage_Handler+0x4>

08001946 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001946:	b480      	push	{r7}
 8001948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800194a:	e7fe      	b.n	800194a <BusFault_Handler+0x4>

0800194c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001950:	e7fe      	b.n	8001950 <UsageFault_Handler+0x4>

08001952 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001952:	b480      	push	{r7}
 8001954:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001956:	bf00      	nop
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001964:	bf00      	nop
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr

0800196e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800196e:	b480      	push	{r7}
 8001970:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001972:	bf00      	nop
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001980:	f000 fae2 	bl	8001f48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  timer_tick();
 8001984:	f000 f8c0 	bl	8001b08 <timer_tick>
  /* USER CODE END SysTick_IRQn 1 */
}
 8001988:	bf00      	nop
 800198a:	bd80      	pop	{r7, pc}

0800198c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001990:	2001      	movs	r0, #1
 8001992:	f000 fde5 	bl	8002560 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001996:	bf00      	nop
 8001998:	bd80      	pop	{r7, pc}

0800199a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800199e:	2002      	movs	r0, #2
 80019a0:	f000 fdde 	bl	8002560 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80019a4:	bf00      	nop
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80019ac:	2010      	movs	r0, #16
 80019ae:	f000 fdd7 	bl	8002560 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80019b2:	bf00      	nop
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80019ba:	2040      	movs	r0, #64	; 0x40
 80019bc:	f000 fdd0 	bl	8002560 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80019c0:	2080      	movs	r0, #128	; 0x80
 80019c2:	f000 fdcd 	bl	8002560 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80019c6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80019ca:	f000 fdc9 	bl	8002560 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80019ce:	bf00      	nop
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80019d2:	b580      	push	{r7, lr}
 80019d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	usart2_transmit();
 80019d6:	f000 f9dd 	bl	8001d94 <usart2_transmit>
	usart2_receive();
 80019da:	f000 f97f 	bl	8001cdc <usart2_receive>
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80019de:	bf00      	nop
 80019e0:	bd80      	pop	{r7, pc}
	...

080019e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019e8:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <SystemInit+0x20>)
 80019ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019ee:	4a05      	ldr	r2, [pc, #20]	; (8001a04 <SystemInit+0x20>)
 80019f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019f8:	bf00      	nop
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	e000ed00 	.word	0xe000ed00

08001a08 <timer_init>:
timerFunctionReg timerFuncReg[TIMER_MAX_TIMERS];

uint8_t funcNum;

int timer_init(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
	for (int i = 0;i < TIMER_MAX_TIMERS;i++)
 8001a0e:	2300      	movs	r3, #0
 8001a10:	607b      	str	r3, [r7, #4]
 8001a12:	e013      	b.n	8001a3c <timer_init+0x34>
	{
		timerFuncReg[i].funcPointer = NULL;
 8001a14:	4a0e      	ldr	r2, [pc, #56]	; (8001a50 <timer_init+0x48>)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2100      	movs	r1, #0
 8001a1a:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
		timerFuncReg[i].divider = 0;
 8001a1e:	4a0c      	ldr	r2, [pc, #48]	; (8001a50 <timer_init+0x48>)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	00db      	lsls	r3, r3, #3
 8001a24:	4413      	add	r3, r2
 8001a26:	2200      	movs	r2, #0
 8001a28:	809a      	strh	r2, [r3, #4]
		timerFuncReg[i].counter = 0;
 8001a2a:	4a09      	ldr	r2, [pc, #36]	; (8001a50 <timer_init+0x48>)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	00db      	lsls	r3, r3, #3
 8001a30:	4413      	add	r3, r2
 8001a32:	2200      	movs	r2, #0
 8001a34:	80da      	strh	r2, [r3, #6]
	for (int i = 0;i < TIMER_MAX_TIMERS;i++)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	607b      	str	r3, [r7, #4]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2b07      	cmp	r3, #7
 8001a40:	dde8      	ble.n	8001a14 <timer_init+0xc>
	}
	return 0;
 8001a42:	2300      	movs	r3, #0
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr
 8001a50:	200020ac 	.word	0x200020ac

08001a54 <timer_register>:

int timer_register(timer_fp_t timerfp, uint32_t div)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	6039      	str	r1, [r7, #0]
	if (funcNum < TIMER_MAX_TIMERS)
 8001a5e:	4b11      	ldr	r3, [pc, #68]	; (8001aa4 <timer_register+0x50>)
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	2b07      	cmp	r3, #7
 8001a64:	d817      	bhi.n	8001a96 <timer_register+0x42>
	{
		timerFuncReg[funcNum].funcPointer = timerfp;
 8001a66:	4b0f      	ldr	r3, [pc, #60]	; (8001aa4 <timer_register+0x50>)
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4a0e      	ldr	r2, [pc, #56]	; (8001aa8 <timer_register+0x54>)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
		timerFuncReg[funcNum].divider = div;
 8001a74:	4b0b      	ldr	r3, [pc, #44]	; (8001aa4 <timer_register+0x50>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	683a      	ldr	r2, [r7, #0]
 8001a7a:	b291      	uxth	r1, r2
 8001a7c:	4a0a      	ldr	r2, [pc, #40]	; (8001aa8 <timer_register+0x54>)
 8001a7e:	00db      	lsls	r3, r3, #3
 8001a80:	4413      	add	r3, r2
 8001a82:	460a      	mov	r2, r1
 8001a84:	809a      	strh	r2, [r3, #4]
		funcNum++;
 8001a86:	4b07      	ldr	r3, [pc, #28]	; (8001aa4 <timer_register+0x50>)
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	b2da      	uxtb	r2, r3
 8001a8e:	4b05      	ldr	r3, [pc, #20]	; (8001aa4 <timer_register+0x50>)
 8001a90:	701a      	strb	r2, [r3, #0]
		return 0;
 8001a92:	2300      	movs	r3, #0
 8001a94:	e000      	b.n	8001a98 <timer_register+0x44>
	}
	else
	{
		return 1;
 8001a96:	2301      	movs	r3, #1
	}
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr
 8001aa4:	200020ec 	.word	0x200020ec
 8001aa8:	200020ac 	.word	0x200020ac

08001aac <timer_func_divider_update>:

int timer_func_divider_update(timer_fp_t timerfp, uint32_t div)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b085      	sub	sp, #20
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	6039      	str	r1, [r7, #0]
	for(int i = 0;i < funcNum;i++)
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	60fb      	str	r3, [r7, #12]
 8001aba:	e013      	b.n	8001ae4 <timer_func_divider_update+0x38>
	{
		if(timerFuncReg[i].funcPointer == timerfp)
 8001abc:	4a10      	ldr	r2, [pc, #64]	; (8001b00 <timer_func_divider_update+0x54>)
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001ac4:	687a      	ldr	r2, [r7, #4]
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d109      	bne.n	8001ade <timer_func_divider_update+0x32>
		{
			timerFuncReg[i].divider = div;
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	b299      	uxth	r1, r3
 8001ace:	4a0c      	ldr	r2, [pc, #48]	; (8001b00 <timer_func_divider_update+0x54>)
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	00db      	lsls	r3, r3, #3
 8001ad4:	4413      	add	r3, r2
 8001ad6:	460a      	mov	r2, r1
 8001ad8:	809a      	strh	r2, [r3, #4]
			return 0;
 8001ada:	2300      	movs	r3, #0
 8001adc:	e009      	b.n	8001af2 <timer_func_divider_update+0x46>
	for(int i = 0;i < funcNum;i++)
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	60fb      	str	r3, [r7, #12]
 8001ae4:	4b07      	ldr	r3, [pc, #28]	; (8001b04 <timer_func_divider_update+0x58>)
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	461a      	mov	r2, r3
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	4293      	cmp	r3, r2
 8001aee:	dbe5      	blt.n	8001abc <timer_func_divider_update+0x10>
		}
	}
	return 1;
 8001af0:	2301      	movs	r3, #1
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3714      	adds	r7, #20
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	200020ac 	.word	0x200020ac
 8001b04:	200020ec 	.word	0x200020ec

08001b08 <timer_tick>:

void timer_tick(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
	// Iterate through the list of registered timer functions
	for(int i = 0;i < funcNum;i++)
 8001b0e:	2300      	movs	r3, #0
 8001b10:	607b      	str	r3, [r7, #4]
 8001b12:	e026      	b.n	8001b62 <timer_tick+0x5a>
	{
		// Increment the counter for this timer function
		timerFuncReg[i].counter++;
 8001b14:	4a18      	ldr	r2, [pc, #96]	; (8001b78 <timer_tick+0x70>)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	00db      	lsls	r3, r3, #3
 8001b1a:	4413      	add	r3, r2
 8001b1c:	88db      	ldrh	r3, [r3, #6]
 8001b1e:	3301      	adds	r3, #1
 8001b20:	b299      	uxth	r1, r3
 8001b22:	4a15      	ldr	r2, [pc, #84]	; (8001b78 <timer_tick+0x70>)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	00db      	lsls	r3, r3, #3
 8001b28:	4413      	add	r3, r2
 8001b2a:	460a      	mov	r2, r1
 8001b2c:	80da      	strh	r2, [r3, #6]

		// If the counter has reached the specified divider value, 
        // execute the timer function and reset the counter
		if((timerFuncReg[i].counter >= (timerFuncReg[i].divider)))
 8001b2e:	4a12      	ldr	r2, [pc, #72]	; (8001b78 <timer_tick+0x70>)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	00db      	lsls	r3, r3, #3
 8001b34:	4413      	add	r3, r2
 8001b36:	88da      	ldrh	r2, [r3, #6]
 8001b38:	490f      	ldr	r1, [pc, #60]	; (8001b78 <timer_tick+0x70>)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	00db      	lsls	r3, r3, #3
 8001b3e:	440b      	add	r3, r1
 8001b40:	889b      	ldrh	r3, [r3, #4]
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d30a      	bcc.n	8001b5c <timer_tick+0x54>
		{
			timerFuncReg[i].funcPointer();
 8001b46:	4a0c      	ldr	r2, [pc, #48]	; (8001b78 <timer_tick+0x70>)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001b4e:	4798      	blx	r3
			timerFuncReg[i].counter = 0;
 8001b50:	4a09      	ldr	r2, [pc, #36]	; (8001b78 <timer_tick+0x70>)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	00db      	lsls	r3, r3, #3
 8001b56:	4413      	add	r3, r2
 8001b58:	2200      	movs	r2, #0
 8001b5a:	80da      	strh	r2, [r3, #6]
	for(int i = 0;i < funcNum;i++)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	3301      	adds	r3, #1
 8001b60:	607b      	str	r3, [r7, #4]
 8001b62:	4b06      	ldr	r3, [pc, #24]	; (8001b7c <timer_tick+0x74>)
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	461a      	mov	r2, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	dbd2      	blt.n	8001b14 <timer_tick+0xc>
		}
	}
}
 8001b6e:	bf00      	nop
 8001b70:	bf00      	nop
 8001b72:	3708      	adds	r7, #8
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	200020ac 	.word	0x200020ac
 8001b7c:	200020ec 	.word	0x200020ec

08001b80 <LL_USART_IsActiveFlag_FE>:
  * @rmtoll SR           FE            LL_USART_IsActiveFlag_FE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_FE(USART_TypeDef *USARTx)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_FE) == (USART_SR_FE));
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0302 	and.w	r3, r3, #2
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	bf0c      	ite	eq
 8001b94:	2301      	moveq	r3, #1
 8001b96:	2300      	movne	r3, #0
 8001b98:	b2db      	uxtb	r3, r3
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	370c      	adds	r7, #12
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr

08001ba6 <LL_USART_IsActiveFlag_ORE>:
  * @rmtoll SR           ORE           LL_USART_IsActiveFlag_ORE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_ORE(USART_TypeDef *USARTx)
{
 8001ba6:	b480      	push	{r7}
 8001ba8:	b083      	sub	sp, #12
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0308 	and.w	r3, r3, #8
 8001bb6:	2b08      	cmp	r3, #8
 8001bb8:	bf0c      	ite	eq
 8001bba:	2301      	moveq	r3, #1
 8001bbc:	2300      	movne	r3, #0
 8001bbe:	b2db      	uxtb	r3, r3
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0320 	and.w	r3, r3, #32
 8001bdc:	2b20      	cmp	r3, #32
 8001bde:	bf0c      	ite	eq
 8001be0:	2301      	moveq	r3, #1
 8001be2:	2300      	movne	r3, #0
 8001be4:	b2db      	uxtb	r3, r3
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr

08001bf2 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	b083      	sub	sp, #12
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c02:	2b80      	cmp	r3, #128	; 0x80
 8001c04:	bf0c      	ite	eq
 8001c06:	2301      	moveq	r3, #1
 8001c08:	2300      	movne	r3, #0
 8001c0a:	b2db      	uxtb	r3, r3
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <LL_USART_EnableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_EnableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TXE(USART_TypeDef *USARTx)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b089      	sub	sp, #36	; 0x24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	330c      	adds	r3, #12
 8001c24:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	e853 3f00 	ldrex	r3, [r3]
 8001c2c:	60bb      	str	r3, [r7, #8]
   return(result);
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c34:	61fb      	str	r3, [r7, #28]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	330c      	adds	r3, #12
 8001c3a:	69fa      	ldr	r2, [r7, #28]
 8001c3c:	61ba      	str	r2, [r7, #24]
 8001c3e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c40:	6979      	ldr	r1, [r7, #20]
 8001c42:	69ba      	ldr	r2, [r7, #24]
 8001c44:	e841 2300 	strex	r3, r2, [r1]
 8001c48:	613b      	str	r3, [r7, #16]
   return(result);
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d1e7      	bne.n	8001c20 <LL_USART_EnableIT_TXE+0x8>
}
 8001c50:	bf00      	nop
 8001c52:	bf00      	nop
 8001c54:	3724      	adds	r7, #36	; 0x24
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr

08001c5e <LL_USART_DisableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_DisableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TXE(USART_TypeDef *USARTx)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	b089      	sub	sp, #36	; 0x24
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	330c      	adds	r3, #12
 8001c6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	e853 3f00 	ldrex	r3, [r3]
 8001c72:	60bb      	str	r3, [r7, #8]
   return(result);
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c7a:	61fb      	str	r3, [r7, #28]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	330c      	adds	r3, #12
 8001c80:	69fa      	ldr	r2, [r7, #28]
 8001c82:	61ba      	str	r2, [r7, #24]
 8001c84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c86:	6979      	ldr	r1, [r7, #20]
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	e841 2300 	strex	r3, r2, [r1]
 8001c8e:	613b      	str	r3, [r7, #16]
   return(result);
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d1e7      	bne.n	8001c66 <LL_USART_DisableIT_TXE+0x8>
}
 8001c96:	bf00      	nop
 8001c98:	bf00      	nop
 8001c9a:	3724      	adds	r7, #36	; 0x24
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr

08001ca4 <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	b2db      	uxtb	r3, r3
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr

08001cbe <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	b083      	sub	sp, #12
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8001cca:	78fa      	ldrb	r2, [r7, #3]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	605a      	str	r2, [r3, #4]
}
 8001cd0:	bf00      	nop
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <usart2_receive>:
bufferInfo bufInfo;

uint8_t receive_counter = 0;

void usart2_receive()
{
 8001cdc:	b598      	push	{r3, r4, r7, lr}
 8001cde:	af00      	add	r7, sp, #0
	if (LL_USART_IsActiveFlag_ORE(USART2) || LL_USART_IsActiveFlag_FE(USART2))
 8001ce0:	4826      	ldr	r0, [pc, #152]	; (8001d7c <usart2_receive+0xa0>)
 8001ce2:	f7ff ff60 	bl	8001ba6 <LL_USART_IsActiveFlag_ORE>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d105      	bne.n	8001cf8 <usart2_receive+0x1c>
 8001cec:	4823      	ldr	r0, [pc, #140]	; (8001d7c <usart2_receive+0xa0>)
 8001cee:	f7ff ff47 	bl	8001b80 <LL_USART_IsActiveFlag_FE>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d009      	beq.n	8001d0c <usart2_receive+0x30>
	{
		LL_USART_ReceiveData8(USART2);
 8001cf8:	4820      	ldr	r0, [pc, #128]	; (8001d7c <usart2_receive+0xa0>)
 8001cfa:	f7ff ffd3 	bl	8001ca4 <LL_USART_ReceiveData8>
		receive_counter = 0;
 8001cfe:	4b20      	ldr	r3, [pc, #128]	; (8001d80 <usart2_receive+0xa4>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	701a      	strb	r2, [r3, #0]
		uart_rx_err = 1;
 8001d04:	4b1f      	ldr	r3, [pc, #124]	; (8001d84 <usart2_receive+0xa8>)
 8001d06:	2201      	movs	r2, #1
 8001d08:	701a      	strb	r2, [r3, #0]
		else
		{
			receive_counter++;
		}
	}
}
 8001d0a:	e035      	b.n	8001d78 <usart2_receive+0x9c>
	else if (LL_USART_IsActiveFlag_RXNE(USART2))
 8001d0c:	481b      	ldr	r0, [pc, #108]	; (8001d7c <usart2_receive+0xa0>)
 8001d0e:	f7ff ff5d 	bl	8001bcc <LL_USART_IsActiveFlag_RXNE>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d02f      	beq.n	8001d78 <usart2_receive+0x9c>
		uart_rx_buf[receive_counter] = (uint8_t)LL_USART_ReceiveData8(USART2);
 8001d18:	4b19      	ldr	r3, [pc, #100]	; (8001d80 <usart2_receive+0xa4>)
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	461c      	mov	r4, r3
 8001d1e:	4817      	ldr	r0, [pc, #92]	; (8001d7c <usart2_receive+0xa0>)
 8001d20:	f7ff ffc0 	bl	8001ca4 <LL_USART_ReceiveData8>
 8001d24:	4603      	mov	r3, r0
 8001d26:	461a      	mov	r2, r3
 8001d28:	4b17      	ldr	r3, [pc, #92]	; (8001d88 <usart2_receive+0xac>)
 8001d2a:	551a      	strb	r2, [r3, r4]
		if (receive_counter >= UART_RX_BUF_SIZE)
 8001d2c:	4b14      	ldr	r3, [pc, #80]	; (8001d80 <usart2_receive+0xa4>)
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	2b31      	cmp	r3, #49	; 0x31
 8001d32:	d906      	bls.n	8001d42 <usart2_receive+0x66>
			uart_write("Command too long\n");
 8001d34:	4815      	ldr	r0, [pc, #84]	; (8001d8c <usart2_receive+0xb0>)
 8001d36:	f000 f85f 	bl	8001df8 <uart_write>
			receive_counter = 0;
 8001d3a:	4b11      	ldr	r3, [pc, #68]	; (8001d80 <usart2_receive+0xa4>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	701a      	strb	r2, [r3, #0]
}
 8001d40:	e01a      	b.n	8001d78 <usart2_receive+0x9c>
		else if (uart_rx_buf[receive_counter] == '\n')
 8001d42:	4b0f      	ldr	r3, [pc, #60]	; (8001d80 <usart2_receive+0xa4>)
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	461a      	mov	r2, r3
 8001d48:	4b0f      	ldr	r3, [pc, #60]	; (8001d88 <usart2_receive+0xac>)
 8001d4a:	5c9b      	ldrb	r3, [r3, r2]
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	2b0a      	cmp	r3, #10
 8001d50:	d10c      	bne.n	8001d6c <usart2_receive+0x90>
			uart_rx_buf[receive_counter] = '\0';
 8001d52:	4b0b      	ldr	r3, [pc, #44]	; (8001d80 <usart2_receive+0xa4>)
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	461a      	mov	r2, r3
 8001d58:	4b0b      	ldr	r3, [pc, #44]	; (8001d88 <usart2_receive+0xac>)
 8001d5a:	2100      	movs	r1, #0
 8001d5c:	5499      	strb	r1, [r3, r2]
			receive_counter = 0;
 8001d5e:	4b08      	ldr	r3, [pc, #32]	; (8001d80 <usart2_receive+0xa4>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	701a      	strb	r2, [r3, #0]
			uart_rx_rdy = 1;
 8001d64:	4b0a      	ldr	r3, [pc, #40]	; (8001d90 <usart2_receive+0xb4>)
 8001d66:	2201      	movs	r2, #1
 8001d68:	701a      	strb	r2, [r3, #0]
}
 8001d6a:	e005      	b.n	8001d78 <usart2_receive+0x9c>
			receive_counter++;
 8001d6c:	4b04      	ldr	r3, [pc, #16]	; (8001d80 <usart2_receive+0xa4>)
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	3301      	adds	r3, #1
 8001d72:	b2da      	uxtb	r2, r3
 8001d74:	4b02      	ldr	r3, [pc, #8]	; (8001d80 <usart2_receive+0xa4>)
 8001d76:	701a      	strb	r2, [r3, #0]
}
 8001d78:	bf00      	nop
 8001d7a:	bd98      	pop	{r3, r4, r7, pc}
 8001d7c:	40004400 	.word	0x40004400
 8001d80:	20002130 	.word	0x20002130
 8001d84:	200020ee 	.word	0x200020ee
 8001d88:	200020f4 	.word	0x200020f4
 8001d8c:	08003fb4 	.word	0x08003fb4
 8001d90:	200020ed 	.word	0x200020ed

08001d94 <usart2_transmit>:

void usart2_transmit()
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
	uint8_t dataToTransmit;

	if (LL_USART_IsActiveFlag_TXE(USART2))
 8001d9a:	4814      	ldr	r0, [pc, #80]	; (8001dec <usart2_transmit+0x58>)
 8001d9c:	f7ff ff29 	bl	8001bf2 <LL_USART_IsActiveFlag_TXE>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d01e      	beq.n	8001de4 <usart2_transmit+0x50>
	{
		bufInfo.counter++;
 8001da6:	4b12      	ldr	r3, [pc, #72]	; (8001df0 <usart2_transmit+0x5c>)
 8001da8:	88db      	ldrh	r3, [r3, #6]
 8001daa:	3301      	adds	r3, #1
 8001dac:	b29a      	uxth	r2, r3
 8001dae:	4b10      	ldr	r3, [pc, #64]	; (8001df0 <usart2_transmit+0x5c>)
 8001db0:	80da      	strh	r2, [r3, #6]
		if (bufInfo.counter > bufInfo.size)
 8001db2:	4b0f      	ldr	r3, [pc, #60]	; (8001df0 <usart2_transmit+0x5c>)
 8001db4:	88da      	ldrh	r2, [r3, #6]
 8001db6:	4b0e      	ldr	r3, [pc, #56]	; (8001df0 <usart2_transmit+0x5c>)
 8001db8:	889b      	ldrh	r3, [r3, #4]
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d906      	bls.n	8001dcc <usart2_transmit+0x38>
		{
			LL_USART_DisableIT_TXE(USART2);
 8001dbe:	480b      	ldr	r0, [pc, #44]	; (8001dec <usart2_transmit+0x58>)
 8001dc0:	f7ff ff4d 	bl	8001c5e <LL_USART_DisableIT_TXE>
			uart_tx_rdy = 1;
 8001dc4:	4b0b      	ldr	r3, [pc, #44]	; (8001df4 <usart2_transmit+0x60>)
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	701a      	strb	r2, [r3, #0]
			return;
 8001dca:	e00b      	b.n	8001de4 <usart2_transmit+0x50>
		}
		dataToTransmit = *(bufInfo.ptr++);
 8001dcc:	4b08      	ldr	r3, [pc, #32]	; (8001df0 <usart2_transmit+0x5c>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	1c5a      	adds	r2, r3, #1
 8001dd2:	4907      	ldr	r1, [pc, #28]	; (8001df0 <usart2_transmit+0x5c>)
 8001dd4:	600a      	str	r2, [r1, #0]
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	71fb      	strb	r3, [r7, #7]
		LL_USART_TransmitData8(USART2, (uint8_t)dataToTransmit);
 8001dda:	79fb      	ldrb	r3, [r7, #7]
 8001ddc:	4619      	mov	r1, r3
 8001dde:	4803      	ldr	r0, [pc, #12]	; (8001dec <usart2_transmit+0x58>)
 8001de0:	f7ff ff6d 	bl	8001cbe <LL_USART_TransmitData8>
	}
}
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	40004400 	.word	0x40004400
 8001df0:	20002128 	.word	0x20002128
 8001df4:	200020ef 	.word	0x200020ef

08001df8 <uart_write>:
		uart_rx_err = 1;
	}
}

void uart_write(char* text)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
	if(uart_tx_rdy == 1)
 8001e00:	4b0f      	ldr	r3, [pc, #60]	; (8001e40 <uart_write+0x48>)
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d113      	bne.n	8001e32 <uart_write+0x3a>
	{
		uart_tx_rdy = 0;
 8001e0a:	4b0d      	ldr	r3, [pc, #52]	; (8001e40 <uart_write+0x48>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	701a      	strb	r2, [r3, #0]
		bufInfo.ptr = (uint8_t*)text;
 8001e10:	4a0c      	ldr	r2, [pc, #48]	; (8001e44 <uart_write+0x4c>)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6013      	str	r3, [r2, #0]
		bufInfo.size = strlen(text);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f7fe f9dc 	bl	80001d4 <strlen>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	b29a      	uxth	r2, r3
 8001e20:	4b08      	ldr	r3, [pc, #32]	; (8001e44 <uart_write+0x4c>)
 8001e22:	809a      	strh	r2, [r3, #4]
		bufInfo.counter = 0;
 8001e24:	4b07      	ldr	r3, [pc, #28]	; (8001e44 <uart_write+0x4c>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	80da      	strh	r2, [r3, #6]
		LL_USART_EnableIT_TXE(USART2);
 8001e2a:	4807      	ldr	r0, [pc, #28]	; (8001e48 <uart_write+0x50>)
 8001e2c:	f7ff fef4 	bl	8001c18 <LL_USART_EnableIT_TXE>
	else
	{
		uart_tx_err = 1;
	}

}
 8001e30:	e002      	b.n	8001e38 <uart_write+0x40>
		uart_tx_err = 1;
 8001e32:	4b06      	ldr	r3, [pc, #24]	; (8001e4c <uart_write+0x54>)
 8001e34:	2201      	movs	r2, #1
 8001e36:	701a      	strb	r2, [r3, #0]
}
 8001e38:	bf00      	nop
 8001e3a:	3708      	adds	r7, #8
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	200020ef 	.word	0x200020ef
 8001e44:	20002128 	.word	0x20002128
 8001e48:	40004400 	.word	0x40004400
 8001e4c:	200020f0 	.word	0x200020f0

08001e50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e88 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e54:	480d      	ldr	r0, [pc, #52]	; (8001e8c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e56:	490e      	ldr	r1, [pc, #56]	; (8001e90 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e58:	4a0e      	ldr	r2, [pc, #56]	; (8001e94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e5c:	e002      	b.n	8001e64 <LoopCopyDataInit>

08001e5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e62:	3304      	adds	r3, #4

08001e64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e68:	d3f9      	bcc.n	8001e5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e6a:	4a0b      	ldr	r2, [pc, #44]	; (8001e98 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e6c:	4c0b      	ldr	r4, [pc, #44]	; (8001e9c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e70:	e001      	b.n	8001e76 <LoopFillZerobss>

08001e72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e74:	3204      	adds	r2, #4

08001e76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e78:	d3fb      	bcc.n	8001e72 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e7a:	f7ff fdb3 	bl	80019e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e7e:	f002 f861 	bl	8003f44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e82:	f7ff f937 	bl	80010f4 <main>
  bx  lr    
 8001e86:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e88:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001e8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e90:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001e94:	080045f0 	.word	0x080045f0
  ldr r2, =_sbss
 8001e98:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001e9c:	20002138 	.word	0x20002138

08001ea0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ea0:	e7fe      	b.n	8001ea0 <ADC_IRQHandler>
	...

08001ea4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ea8:	4b0e      	ldr	r3, [pc, #56]	; (8001ee4 <HAL_Init+0x40>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a0d      	ldr	r2, [pc, #52]	; (8001ee4 <HAL_Init+0x40>)
 8001eae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001eb2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001eb4:	4b0b      	ldr	r3, [pc, #44]	; (8001ee4 <HAL_Init+0x40>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a0a      	ldr	r2, [pc, #40]	; (8001ee4 <HAL_Init+0x40>)
 8001eba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ebe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ec0:	4b08      	ldr	r3, [pc, #32]	; (8001ee4 <HAL_Init+0x40>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a07      	ldr	r2, [pc, #28]	; (8001ee4 <HAL_Init+0x40>)
 8001ec6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ecc:	2003      	movs	r0, #3
 8001ece:	f000 f94f 	bl	8002170 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ed2:	2000      	movs	r0, #0
 8001ed4:	f000 f808 	bl	8001ee8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ed8:	f7ff fce2 	bl	80018a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	40023c00 	.word	0x40023c00

08001ee8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ef0:	4b12      	ldr	r3, [pc, #72]	; (8001f3c <HAL_InitTick+0x54>)
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	4b12      	ldr	r3, [pc, #72]	; (8001f40 <HAL_InitTick+0x58>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	4619      	mov	r1, r3
 8001efa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001efe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f06:	4618      	mov	r0, r3
 8001f08:	f000 f967 	bl	80021da <HAL_SYSTICK_Config>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e00e      	b.n	8001f34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2b0f      	cmp	r3, #15
 8001f1a:	d80a      	bhi.n	8001f32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	6879      	ldr	r1, [r7, #4]
 8001f20:	f04f 30ff 	mov.w	r0, #4294967295
 8001f24:	f000 f92f 	bl	8002186 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f28:	4a06      	ldr	r2, [pc, #24]	; (8001f44 <HAL_InitTick+0x5c>)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	e000      	b.n	8001f34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3708      	adds	r7, #8
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	20000000 	.word	0x20000000
 8001f40:	20000008 	.word	0x20000008
 8001f44:	20000004 	.word	0x20000004

08001f48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f4c:	4b06      	ldr	r3, [pc, #24]	; (8001f68 <HAL_IncTick+0x20>)
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	461a      	mov	r2, r3
 8001f52:	4b06      	ldr	r3, [pc, #24]	; (8001f6c <HAL_IncTick+0x24>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4413      	add	r3, r2
 8001f58:	4a04      	ldr	r2, [pc, #16]	; (8001f6c <HAL_IncTick+0x24>)
 8001f5a:	6013      	str	r3, [r2, #0]
}
 8001f5c:	bf00      	nop
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	20000008 	.word	0x20000008
 8001f6c:	20002134 	.word	0x20002134

08001f70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  return uwTick;
 8001f74:	4b03      	ldr	r3, [pc, #12]	; (8001f84 <HAL_GetTick+0x14>)
 8001f76:	681b      	ldr	r3, [r3, #0]
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	20002134 	.word	0x20002134

08001f88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f90:	f7ff ffee 	bl	8001f70 <HAL_GetTick>
 8001f94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fa0:	d005      	beq.n	8001fae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fa2:	4b0a      	ldr	r3, [pc, #40]	; (8001fcc <HAL_Delay+0x44>)
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	4413      	add	r3, r2
 8001fac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001fae:	bf00      	nop
 8001fb0:	f7ff ffde 	bl	8001f70 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	68fa      	ldr	r2, [r7, #12]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d8f7      	bhi.n	8001fb0 <HAL_Delay+0x28>
  {
  }
}
 8001fc0:	bf00      	nop
 8001fc2:	bf00      	nop
 8001fc4:	3710      	adds	r7, #16
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	20000008 	.word	0x20000008

08001fd0 <__NVIC_SetPriorityGrouping>:
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b085      	sub	sp, #20
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f003 0307 	and.w	r3, r3, #7
 8001fde:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fe0:	4b0c      	ldr	r3, [pc, #48]	; (8002014 <__NVIC_SetPriorityGrouping+0x44>)
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fe6:	68ba      	ldr	r2, [r7, #8]
 8001fe8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fec:	4013      	ands	r3, r2
 8001fee:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ff8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ffc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002000:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002002:	4a04      	ldr	r2, [pc, #16]	; (8002014 <__NVIC_SetPriorityGrouping+0x44>)
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	60d3      	str	r3, [r2, #12]
}
 8002008:	bf00      	nop
 800200a:	3714      	adds	r7, #20
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr
 8002014:	e000ed00 	.word	0xe000ed00

08002018 <__NVIC_GetPriorityGrouping>:
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800201c:	4b04      	ldr	r3, [pc, #16]	; (8002030 <__NVIC_GetPriorityGrouping+0x18>)
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	0a1b      	lsrs	r3, r3, #8
 8002022:	f003 0307 	and.w	r3, r3, #7
}
 8002026:	4618      	mov	r0, r3
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr
 8002030:	e000ed00 	.word	0xe000ed00

08002034 <__NVIC_EnableIRQ>:
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	4603      	mov	r3, r0
 800203c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800203e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002042:	2b00      	cmp	r3, #0
 8002044:	db0b      	blt.n	800205e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002046:	79fb      	ldrb	r3, [r7, #7]
 8002048:	f003 021f 	and.w	r2, r3, #31
 800204c:	4907      	ldr	r1, [pc, #28]	; (800206c <__NVIC_EnableIRQ+0x38>)
 800204e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002052:	095b      	lsrs	r3, r3, #5
 8002054:	2001      	movs	r0, #1
 8002056:	fa00 f202 	lsl.w	r2, r0, r2
 800205a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800205e:	bf00      	nop
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	e000e100 	.word	0xe000e100

08002070 <__NVIC_SetPriority>:
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	4603      	mov	r3, r0
 8002078:	6039      	str	r1, [r7, #0]
 800207a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800207c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002080:	2b00      	cmp	r3, #0
 8002082:	db0a      	blt.n	800209a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	b2da      	uxtb	r2, r3
 8002088:	490c      	ldr	r1, [pc, #48]	; (80020bc <__NVIC_SetPriority+0x4c>)
 800208a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800208e:	0112      	lsls	r2, r2, #4
 8002090:	b2d2      	uxtb	r2, r2
 8002092:	440b      	add	r3, r1
 8002094:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002098:	e00a      	b.n	80020b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	b2da      	uxtb	r2, r3
 800209e:	4908      	ldr	r1, [pc, #32]	; (80020c0 <__NVIC_SetPriority+0x50>)
 80020a0:	79fb      	ldrb	r3, [r7, #7]
 80020a2:	f003 030f 	and.w	r3, r3, #15
 80020a6:	3b04      	subs	r3, #4
 80020a8:	0112      	lsls	r2, r2, #4
 80020aa:	b2d2      	uxtb	r2, r2
 80020ac:	440b      	add	r3, r1
 80020ae:	761a      	strb	r2, [r3, #24]
}
 80020b0:	bf00      	nop
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr
 80020bc:	e000e100 	.word	0xe000e100
 80020c0:	e000ed00 	.word	0xe000ed00

080020c4 <NVIC_EncodePriority>:
{
 80020c4:	b480      	push	{r7}
 80020c6:	b089      	sub	sp, #36	; 0x24
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	60b9      	str	r1, [r7, #8]
 80020ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	f003 0307 	and.w	r3, r3, #7
 80020d6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	f1c3 0307 	rsb	r3, r3, #7
 80020de:	2b04      	cmp	r3, #4
 80020e0:	bf28      	it	cs
 80020e2:	2304      	movcs	r3, #4
 80020e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	3304      	adds	r3, #4
 80020ea:	2b06      	cmp	r3, #6
 80020ec:	d902      	bls.n	80020f4 <NVIC_EncodePriority+0x30>
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	3b03      	subs	r3, #3
 80020f2:	e000      	b.n	80020f6 <NVIC_EncodePriority+0x32>
 80020f4:	2300      	movs	r3, #0
 80020f6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020f8:	f04f 32ff 	mov.w	r2, #4294967295
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002102:	43da      	mvns	r2, r3
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	401a      	ands	r2, r3
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800210c:	f04f 31ff 	mov.w	r1, #4294967295
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	fa01 f303 	lsl.w	r3, r1, r3
 8002116:	43d9      	mvns	r1, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800211c:	4313      	orrs	r3, r2
}
 800211e:	4618      	mov	r0, r3
 8002120:	3724      	adds	r7, #36	; 0x24
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
	...

0800212c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	3b01      	subs	r3, #1
 8002138:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800213c:	d301      	bcc.n	8002142 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800213e:	2301      	movs	r3, #1
 8002140:	e00f      	b.n	8002162 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002142:	4a0a      	ldr	r2, [pc, #40]	; (800216c <SysTick_Config+0x40>)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	3b01      	subs	r3, #1
 8002148:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800214a:	210f      	movs	r1, #15
 800214c:	f04f 30ff 	mov.w	r0, #4294967295
 8002150:	f7ff ff8e 	bl	8002070 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002154:	4b05      	ldr	r3, [pc, #20]	; (800216c <SysTick_Config+0x40>)
 8002156:	2200      	movs	r2, #0
 8002158:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800215a:	4b04      	ldr	r3, [pc, #16]	; (800216c <SysTick_Config+0x40>)
 800215c:	2207      	movs	r2, #7
 800215e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002160:	2300      	movs	r3, #0
}
 8002162:	4618      	mov	r0, r3
 8002164:	3708      	adds	r7, #8
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	e000e010 	.word	0xe000e010

08002170 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f7ff ff29 	bl	8001fd0 <__NVIC_SetPriorityGrouping>
}
 800217e:	bf00      	nop
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}

08002186 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002186:	b580      	push	{r7, lr}
 8002188:	b086      	sub	sp, #24
 800218a:	af00      	add	r7, sp, #0
 800218c:	4603      	mov	r3, r0
 800218e:	60b9      	str	r1, [r7, #8]
 8002190:	607a      	str	r2, [r7, #4]
 8002192:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002194:	2300      	movs	r3, #0
 8002196:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002198:	f7ff ff3e 	bl	8002018 <__NVIC_GetPriorityGrouping>
 800219c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	68b9      	ldr	r1, [r7, #8]
 80021a2:	6978      	ldr	r0, [r7, #20]
 80021a4:	f7ff ff8e 	bl	80020c4 <NVIC_EncodePriority>
 80021a8:	4602      	mov	r2, r0
 80021aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021ae:	4611      	mov	r1, r2
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7ff ff5d 	bl	8002070 <__NVIC_SetPriority>
}
 80021b6:	bf00      	nop
 80021b8:	3718      	adds	r7, #24
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}

080021be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021be:	b580      	push	{r7, lr}
 80021c0:	b082      	sub	sp, #8
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	4603      	mov	r3, r0
 80021c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7ff ff31 	bl	8002034 <__NVIC_EnableIRQ>
}
 80021d2:	bf00      	nop
 80021d4:	3708      	adds	r7, #8
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}

080021da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021da:	b580      	push	{r7, lr}
 80021dc:	b082      	sub	sp, #8
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f7ff ffa2 	bl	800212c <SysTick_Config>
 80021e8:	4603      	mov	r3, r0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3708      	adds	r7, #8
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
	...

080021f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b089      	sub	sp, #36	; 0x24
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021fe:	2300      	movs	r3, #0
 8002200:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002202:	2300      	movs	r3, #0
 8002204:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002206:	2300      	movs	r3, #0
 8002208:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800220a:	2300      	movs	r3, #0
 800220c:	61fb      	str	r3, [r7, #28]
 800220e:	e159      	b.n	80024c4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002210:	2201      	movs	r2, #1
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	697a      	ldr	r2, [r7, #20]
 8002220:	4013      	ands	r3, r2
 8002222:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002224:	693a      	ldr	r2, [r7, #16]
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	429a      	cmp	r2, r3
 800222a:	f040 8148 	bne.w	80024be <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f003 0303 	and.w	r3, r3, #3
 8002236:	2b01      	cmp	r3, #1
 8002238:	d005      	beq.n	8002246 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002242:	2b02      	cmp	r3, #2
 8002244:	d130      	bne.n	80022a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	005b      	lsls	r3, r3, #1
 8002250:	2203      	movs	r2, #3
 8002252:	fa02 f303 	lsl.w	r3, r2, r3
 8002256:	43db      	mvns	r3, r3
 8002258:	69ba      	ldr	r2, [r7, #24]
 800225a:	4013      	ands	r3, r2
 800225c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	68da      	ldr	r2, [r3, #12]
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	fa02 f303 	lsl.w	r3, r2, r3
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	4313      	orrs	r3, r2
 800226e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800227c:	2201      	movs	r2, #1
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	43db      	mvns	r3, r3
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	4013      	ands	r3, r2
 800228a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	091b      	lsrs	r3, r3, #4
 8002292:	f003 0201 	and.w	r2, r3, #1
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	fa02 f303 	lsl.w	r3, r2, r3
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	4313      	orrs	r3, r2
 80022a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f003 0303 	and.w	r3, r3, #3
 80022b0:	2b03      	cmp	r3, #3
 80022b2:	d017      	beq.n	80022e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	2203      	movs	r2, #3
 80022c0:	fa02 f303 	lsl.w	r3, r2, r3
 80022c4:	43db      	mvns	r3, r3
 80022c6:	69ba      	ldr	r2, [r7, #24]
 80022c8:	4013      	ands	r3, r2
 80022ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	689a      	ldr	r2, [r3, #8]
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	005b      	lsls	r3, r3, #1
 80022d4:	fa02 f303 	lsl.w	r3, r2, r3
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	4313      	orrs	r3, r2
 80022dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f003 0303 	and.w	r3, r3, #3
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d123      	bne.n	8002338 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	08da      	lsrs	r2, r3, #3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	3208      	adds	r2, #8
 80022f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	f003 0307 	and.w	r3, r3, #7
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	220f      	movs	r2, #15
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	43db      	mvns	r3, r3
 800230e:	69ba      	ldr	r2, [r7, #24]
 8002310:	4013      	ands	r3, r2
 8002312:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	691a      	ldr	r2, [r3, #16]
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	f003 0307 	and.w	r3, r3, #7
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	4313      	orrs	r3, r2
 8002328:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	08da      	lsrs	r2, r3, #3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	3208      	adds	r2, #8
 8002332:	69b9      	ldr	r1, [r7, #24]
 8002334:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	005b      	lsls	r3, r3, #1
 8002342:	2203      	movs	r2, #3
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	43db      	mvns	r3, r3
 800234a:	69ba      	ldr	r2, [r7, #24]
 800234c:	4013      	ands	r3, r2
 800234e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f003 0203 	and.w	r2, r3, #3
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	fa02 f303 	lsl.w	r3, r2, r3
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	4313      	orrs	r3, r2
 8002364:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002374:	2b00      	cmp	r3, #0
 8002376:	f000 80a2 	beq.w	80024be <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800237a:	2300      	movs	r3, #0
 800237c:	60fb      	str	r3, [r7, #12]
 800237e:	4b57      	ldr	r3, [pc, #348]	; (80024dc <HAL_GPIO_Init+0x2e8>)
 8002380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002382:	4a56      	ldr	r2, [pc, #344]	; (80024dc <HAL_GPIO_Init+0x2e8>)
 8002384:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002388:	6453      	str	r3, [r2, #68]	; 0x44
 800238a:	4b54      	ldr	r3, [pc, #336]	; (80024dc <HAL_GPIO_Init+0x2e8>)
 800238c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800238e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002392:	60fb      	str	r3, [r7, #12]
 8002394:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002396:	4a52      	ldr	r2, [pc, #328]	; (80024e0 <HAL_GPIO_Init+0x2ec>)
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	089b      	lsrs	r3, r3, #2
 800239c:	3302      	adds	r3, #2
 800239e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	f003 0303 	and.w	r3, r3, #3
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	220f      	movs	r2, #15
 80023ae:	fa02 f303 	lsl.w	r3, r2, r3
 80023b2:	43db      	mvns	r3, r3
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	4013      	ands	r3, r2
 80023b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a49      	ldr	r2, [pc, #292]	; (80024e4 <HAL_GPIO_Init+0x2f0>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d019      	beq.n	80023f6 <HAL_GPIO_Init+0x202>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a48      	ldr	r2, [pc, #288]	; (80024e8 <HAL_GPIO_Init+0x2f4>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d013      	beq.n	80023f2 <HAL_GPIO_Init+0x1fe>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a47      	ldr	r2, [pc, #284]	; (80024ec <HAL_GPIO_Init+0x2f8>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d00d      	beq.n	80023ee <HAL_GPIO_Init+0x1fa>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a46      	ldr	r2, [pc, #280]	; (80024f0 <HAL_GPIO_Init+0x2fc>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d007      	beq.n	80023ea <HAL_GPIO_Init+0x1f6>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a45      	ldr	r2, [pc, #276]	; (80024f4 <HAL_GPIO_Init+0x300>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d101      	bne.n	80023e6 <HAL_GPIO_Init+0x1f2>
 80023e2:	2304      	movs	r3, #4
 80023e4:	e008      	b.n	80023f8 <HAL_GPIO_Init+0x204>
 80023e6:	2307      	movs	r3, #7
 80023e8:	e006      	b.n	80023f8 <HAL_GPIO_Init+0x204>
 80023ea:	2303      	movs	r3, #3
 80023ec:	e004      	b.n	80023f8 <HAL_GPIO_Init+0x204>
 80023ee:	2302      	movs	r3, #2
 80023f0:	e002      	b.n	80023f8 <HAL_GPIO_Init+0x204>
 80023f2:	2301      	movs	r3, #1
 80023f4:	e000      	b.n	80023f8 <HAL_GPIO_Init+0x204>
 80023f6:	2300      	movs	r3, #0
 80023f8:	69fa      	ldr	r2, [r7, #28]
 80023fa:	f002 0203 	and.w	r2, r2, #3
 80023fe:	0092      	lsls	r2, r2, #2
 8002400:	4093      	lsls	r3, r2
 8002402:	69ba      	ldr	r2, [r7, #24]
 8002404:	4313      	orrs	r3, r2
 8002406:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002408:	4935      	ldr	r1, [pc, #212]	; (80024e0 <HAL_GPIO_Init+0x2ec>)
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	089b      	lsrs	r3, r3, #2
 800240e:	3302      	adds	r3, #2
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002416:	4b38      	ldr	r3, [pc, #224]	; (80024f8 <HAL_GPIO_Init+0x304>)
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	43db      	mvns	r3, r3
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	4013      	ands	r3, r2
 8002424:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d003      	beq.n	800243a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002432:	69ba      	ldr	r2, [r7, #24]
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	4313      	orrs	r3, r2
 8002438:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800243a:	4a2f      	ldr	r2, [pc, #188]	; (80024f8 <HAL_GPIO_Init+0x304>)
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002440:	4b2d      	ldr	r3, [pc, #180]	; (80024f8 <HAL_GPIO_Init+0x304>)
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	43db      	mvns	r3, r3
 800244a:	69ba      	ldr	r2, [r7, #24]
 800244c:	4013      	ands	r3, r2
 800244e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d003      	beq.n	8002464 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	4313      	orrs	r3, r2
 8002462:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002464:	4a24      	ldr	r2, [pc, #144]	; (80024f8 <HAL_GPIO_Init+0x304>)
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800246a:	4b23      	ldr	r3, [pc, #140]	; (80024f8 <HAL_GPIO_Init+0x304>)
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	43db      	mvns	r3, r3
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	4013      	ands	r3, r2
 8002478:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d003      	beq.n	800248e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002486:	69ba      	ldr	r2, [r7, #24]
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	4313      	orrs	r3, r2
 800248c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800248e:	4a1a      	ldr	r2, [pc, #104]	; (80024f8 <HAL_GPIO_Init+0x304>)
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002494:	4b18      	ldr	r3, [pc, #96]	; (80024f8 <HAL_GPIO_Init+0x304>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	43db      	mvns	r3, r3
 800249e:	69ba      	ldr	r2, [r7, #24]
 80024a0:	4013      	ands	r3, r2
 80024a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d003      	beq.n	80024b8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80024b0:	69ba      	ldr	r2, [r7, #24]
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024b8:	4a0f      	ldr	r2, [pc, #60]	; (80024f8 <HAL_GPIO_Init+0x304>)
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	3301      	adds	r3, #1
 80024c2:	61fb      	str	r3, [r7, #28]
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	2b0f      	cmp	r3, #15
 80024c8:	f67f aea2 	bls.w	8002210 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024cc:	bf00      	nop
 80024ce:	bf00      	nop
 80024d0:	3724      	adds	r7, #36	; 0x24
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	40023800 	.word	0x40023800
 80024e0:	40013800 	.word	0x40013800
 80024e4:	40020000 	.word	0x40020000
 80024e8:	40020400 	.word	0x40020400
 80024ec:	40020800 	.word	0x40020800
 80024f0:	40020c00 	.word	0x40020c00
 80024f4:	40021000 	.word	0x40021000
 80024f8:	40013c00 	.word	0x40013c00

080024fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b085      	sub	sp, #20
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	460b      	mov	r3, r1
 8002506:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	691a      	ldr	r2, [r3, #16]
 800250c:	887b      	ldrh	r3, [r7, #2]
 800250e:	4013      	ands	r3, r2
 8002510:	2b00      	cmp	r3, #0
 8002512:	d002      	beq.n	800251a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002514:	2301      	movs	r3, #1
 8002516:	73fb      	strb	r3, [r7, #15]
 8002518:	e001      	b.n	800251e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800251a:	2300      	movs	r3, #0
 800251c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800251e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002520:	4618      	mov	r0, r3
 8002522:	3714      	adds	r7, #20
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	460b      	mov	r3, r1
 8002536:	807b      	strh	r3, [r7, #2]
 8002538:	4613      	mov	r3, r2
 800253a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800253c:	787b      	ldrb	r3, [r7, #1]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d003      	beq.n	800254a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002542:	887a      	ldrh	r2, [r7, #2]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002548:	e003      	b.n	8002552 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800254a:	887b      	ldrh	r3, [r7, #2]
 800254c:	041a      	lsls	r2, r3, #16
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	619a      	str	r2, [r3, #24]
}
 8002552:	bf00      	nop
 8002554:	370c      	adds	r7, #12
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
	...

08002560 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	4603      	mov	r3, r0
 8002568:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800256a:	4b08      	ldr	r3, [pc, #32]	; (800258c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800256c:	695a      	ldr	r2, [r3, #20]
 800256e:	88fb      	ldrh	r3, [r7, #6]
 8002570:	4013      	ands	r3, r2
 8002572:	2b00      	cmp	r3, #0
 8002574:	d006      	beq.n	8002584 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002576:	4a05      	ldr	r2, [pc, #20]	; (800258c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002578:	88fb      	ldrh	r3, [r7, #6]
 800257a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800257c:	88fb      	ldrh	r3, [r7, #6]
 800257e:	4618      	mov	r0, r3
 8002580:	f7fe ffaa 	bl	80014d8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002584:	bf00      	nop
 8002586:	3708      	adds	r7, #8
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	40013c00 	.word	0x40013c00

08002590 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b086      	sub	sp, #24
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d101      	bne.n	80025a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e267      	b.n	8002a72 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0301 	and.w	r3, r3, #1
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d075      	beq.n	800269a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025ae:	4b88      	ldr	r3, [pc, #544]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	f003 030c 	and.w	r3, r3, #12
 80025b6:	2b04      	cmp	r3, #4
 80025b8:	d00c      	beq.n	80025d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025ba:	4b85      	ldr	r3, [pc, #532]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025c2:	2b08      	cmp	r3, #8
 80025c4:	d112      	bne.n	80025ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025c6:	4b82      	ldr	r3, [pc, #520]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025d2:	d10b      	bne.n	80025ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025d4:	4b7e      	ldr	r3, [pc, #504]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d05b      	beq.n	8002698 <HAL_RCC_OscConfig+0x108>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d157      	bne.n	8002698 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e242      	b.n	8002a72 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025f4:	d106      	bne.n	8002604 <HAL_RCC_OscConfig+0x74>
 80025f6:	4b76      	ldr	r3, [pc, #472]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a75      	ldr	r2, [pc, #468]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 80025fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002600:	6013      	str	r3, [r2, #0]
 8002602:	e01d      	b.n	8002640 <HAL_RCC_OscConfig+0xb0>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800260c:	d10c      	bne.n	8002628 <HAL_RCC_OscConfig+0x98>
 800260e:	4b70      	ldr	r3, [pc, #448]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a6f      	ldr	r2, [pc, #444]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 8002614:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002618:	6013      	str	r3, [r2, #0]
 800261a:	4b6d      	ldr	r3, [pc, #436]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a6c      	ldr	r2, [pc, #432]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 8002620:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002624:	6013      	str	r3, [r2, #0]
 8002626:	e00b      	b.n	8002640 <HAL_RCC_OscConfig+0xb0>
 8002628:	4b69      	ldr	r3, [pc, #420]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a68      	ldr	r2, [pc, #416]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 800262e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002632:	6013      	str	r3, [r2, #0]
 8002634:	4b66      	ldr	r3, [pc, #408]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a65      	ldr	r2, [pc, #404]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 800263a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800263e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d013      	beq.n	8002670 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002648:	f7ff fc92 	bl	8001f70 <HAL_GetTick>
 800264c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800264e:	e008      	b.n	8002662 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002650:	f7ff fc8e 	bl	8001f70 <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b64      	cmp	r3, #100	; 0x64
 800265c:	d901      	bls.n	8002662 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e207      	b.n	8002a72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002662:	4b5b      	ldr	r3, [pc, #364]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d0f0      	beq.n	8002650 <HAL_RCC_OscConfig+0xc0>
 800266e:	e014      	b.n	800269a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002670:	f7ff fc7e 	bl	8001f70 <HAL_GetTick>
 8002674:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002676:	e008      	b.n	800268a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002678:	f7ff fc7a 	bl	8001f70 <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	2b64      	cmp	r3, #100	; 0x64
 8002684:	d901      	bls.n	800268a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e1f3      	b.n	8002a72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800268a:	4b51      	ldr	r3, [pc, #324]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d1f0      	bne.n	8002678 <HAL_RCC_OscConfig+0xe8>
 8002696:	e000      	b.n	800269a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002698:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d063      	beq.n	800276e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026a6:	4b4a      	ldr	r3, [pc, #296]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	f003 030c 	and.w	r3, r3, #12
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d00b      	beq.n	80026ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026b2:	4b47      	ldr	r3, [pc, #284]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026ba:	2b08      	cmp	r3, #8
 80026bc:	d11c      	bne.n	80026f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026be:	4b44      	ldr	r3, [pc, #272]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d116      	bne.n	80026f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026ca:	4b41      	ldr	r3, [pc, #260]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0302 	and.w	r3, r3, #2
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d005      	beq.n	80026e2 <HAL_RCC_OscConfig+0x152>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d001      	beq.n	80026e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e1c7      	b.n	8002a72 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026e2:	4b3b      	ldr	r3, [pc, #236]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	00db      	lsls	r3, r3, #3
 80026f0:	4937      	ldr	r1, [pc, #220]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026f6:	e03a      	b.n	800276e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d020      	beq.n	8002742 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002700:	4b34      	ldr	r3, [pc, #208]	; (80027d4 <HAL_RCC_OscConfig+0x244>)
 8002702:	2201      	movs	r2, #1
 8002704:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002706:	f7ff fc33 	bl	8001f70 <HAL_GetTick>
 800270a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800270c:	e008      	b.n	8002720 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800270e:	f7ff fc2f 	bl	8001f70 <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	2b02      	cmp	r3, #2
 800271a:	d901      	bls.n	8002720 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e1a8      	b.n	8002a72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002720:	4b2b      	ldr	r3, [pc, #172]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0302 	and.w	r3, r3, #2
 8002728:	2b00      	cmp	r3, #0
 800272a:	d0f0      	beq.n	800270e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800272c:	4b28      	ldr	r3, [pc, #160]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	691b      	ldr	r3, [r3, #16]
 8002738:	00db      	lsls	r3, r3, #3
 800273a:	4925      	ldr	r1, [pc, #148]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 800273c:	4313      	orrs	r3, r2
 800273e:	600b      	str	r3, [r1, #0]
 8002740:	e015      	b.n	800276e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002742:	4b24      	ldr	r3, [pc, #144]	; (80027d4 <HAL_RCC_OscConfig+0x244>)
 8002744:	2200      	movs	r2, #0
 8002746:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002748:	f7ff fc12 	bl	8001f70 <HAL_GetTick>
 800274c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800274e:	e008      	b.n	8002762 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002750:	f7ff fc0e 	bl	8001f70 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	2b02      	cmp	r3, #2
 800275c:	d901      	bls.n	8002762 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e187      	b.n	8002a72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002762:	4b1b      	ldr	r3, [pc, #108]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	2b00      	cmp	r3, #0
 800276c:	d1f0      	bne.n	8002750 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0308 	and.w	r3, r3, #8
 8002776:	2b00      	cmp	r3, #0
 8002778:	d036      	beq.n	80027e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	695b      	ldr	r3, [r3, #20]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d016      	beq.n	80027b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002782:	4b15      	ldr	r3, [pc, #84]	; (80027d8 <HAL_RCC_OscConfig+0x248>)
 8002784:	2201      	movs	r2, #1
 8002786:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002788:	f7ff fbf2 	bl	8001f70 <HAL_GetTick>
 800278c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800278e:	e008      	b.n	80027a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002790:	f7ff fbee 	bl	8001f70 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	2b02      	cmp	r3, #2
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e167      	b.n	8002a72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027a2:	4b0b      	ldr	r3, [pc, #44]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 80027a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027a6:	f003 0302 	and.w	r3, r3, #2
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d0f0      	beq.n	8002790 <HAL_RCC_OscConfig+0x200>
 80027ae:	e01b      	b.n	80027e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027b0:	4b09      	ldr	r3, [pc, #36]	; (80027d8 <HAL_RCC_OscConfig+0x248>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027b6:	f7ff fbdb 	bl	8001f70 <HAL_GetTick>
 80027ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027bc:	e00e      	b.n	80027dc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027be:	f7ff fbd7 	bl	8001f70 <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d907      	bls.n	80027dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e150      	b.n	8002a72 <HAL_RCC_OscConfig+0x4e2>
 80027d0:	40023800 	.word	0x40023800
 80027d4:	42470000 	.word	0x42470000
 80027d8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027dc:	4b88      	ldr	r3, [pc, #544]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 80027de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027e0:	f003 0302 	and.w	r3, r3, #2
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d1ea      	bne.n	80027be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0304 	and.w	r3, r3, #4
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	f000 8097 	beq.w	8002924 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027f6:	2300      	movs	r3, #0
 80027f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027fa:	4b81      	ldr	r3, [pc, #516]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 80027fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d10f      	bne.n	8002826 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002806:	2300      	movs	r3, #0
 8002808:	60bb      	str	r3, [r7, #8]
 800280a:	4b7d      	ldr	r3, [pc, #500]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 800280c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280e:	4a7c      	ldr	r2, [pc, #496]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 8002810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002814:	6413      	str	r3, [r2, #64]	; 0x40
 8002816:	4b7a      	ldr	r3, [pc, #488]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 8002818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800281e:	60bb      	str	r3, [r7, #8]
 8002820:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002822:	2301      	movs	r3, #1
 8002824:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002826:	4b77      	ldr	r3, [pc, #476]	; (8002a04 <HAL_RCC_OscConfig+0x474>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800282e:	2b00      	cmp	r3, #0
 8002830:	d118      	bne.n	8002864 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002832:	4b74      	ldr	r3, [pc, #464]	; (8002a04 <HAL_RCC_OscConfig+0x474>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a73      	ldr	r2, [pc, #460]	; (8002a04 <HAL_RCC_OscConfig+0x474>)
 8002838:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800283c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800283e:	f7ff fb97 	bl	8001f70 <HAL_GetTick>
 8002842:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002844:	e008      	b.n	8002858 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002846:	f7ff fb93 	bl	8001f70 <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	2b02      	cmp	r3, #2
 8002852:	d901      	bls.n	8002858 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	e10c      	b.n	8002a72 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002858:	4b6a      	ldr	r3, [pc, #424]	; (8002a04 <HAL_RCC_OscConfig+0x474>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002860:	2b00      	cmp	r3, #0
 8002862:	d0f0      	beq.n	8002846 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	2b01      	cmp	r3, #1
 800286a:	d106      	bne.n	800287a <HAL_RCC_OscConfig+0x2ea>
 800286c:	4b64      	ldr	r3, [pc, #400]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 800286e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002870:	4a63      	ldr	r2, [pc, #396]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 8002872:	f043 0301 	orr.w	r3, r3, #1
 8002876:	6713      	str	r3, [r2, #112]	; 0x70
 8002878:	e01c      	b.n	80028b4 <HAL_RCC_OscConfig+0x324>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	2b05      	cmp	r3, #5
 8002880:	d10c      	bne.n	800289c <HAL_RCC_OscConfig+0x30c>
 8002882:	4b5f      	ldr	r3, [pc, #380]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 8002884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002886:	4a5e      	ldr	r2, [pc, #376]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 8002888:	f043 0304 	orr.w	r3, r3, #4
 800288c:	6713      	str	r3, [r2, #112]	; 0x70
 800288e:	4b5c      	ldr	r3, [pc, #368]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 8002890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002892:	4a5b      	ldr	r2, [pc, #364]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 8002894:	f043 0301 	orr.w	r3, r3, #1
 8002898:	6713      	str	r3, [r2, #112]	; 0x70
 800289a:	e00b      	b.n	80028b4 <HAL_RCC_OscConfig+0x324>
 800289c:	4b58      	ldr	r3, [pc, #352]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 800289e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028a0:	4a57      	ldr	r2, [pc, #348]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 80028a2:	f023 0301 	bic.w	r3, r3, #1
 80028a6:	6713      	str	r3, [r2, #112]	; 0x70
 80028a8:	4b55      	ldr	r3, [pc, #340]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 80028aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ac:	4a54      	ldr	r2, [pc, #336]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 80028ae:	f023 0304 	bic.w	r3, r3, #4
 80028b2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d015      	beq.n	80028e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028bc:	f7ff fb58 	bl	8001f70 <HAL_GetTick>
 80028c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028c2:	e00a      	b.n	80028da <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028c4:	f7ff fb54 	bl	8001f70 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d901      	bls.n	80028da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e0cb      	b.n	8002a72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028da:	4b49      	ldr	r3, [pc, #292]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 80028dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d0ee      	beq.n	80028c4 <HAL_RCC_OscConfig+0x334>
 80028e6:	e014      	b.n	8002912 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028e8:	f7ff fb42 	bl	8001f70 <HAL_GetTick>
 80028ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028ee:	e00a      	b.n	8002906 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028f0:	f7ff fb3e 	bl	8001f70 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80028fe:	4293      	cmp	r3, r2
 8002900:	d901      	bls.n	8002906 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e0b5      	b.n	8002a72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002906:	4b3e      	ldr	r3, [pc, #248]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 8002908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800290a:	f003 0302 	and.w	r3, r3, #2
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1ee      	bne.n	80028f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002912:	7dfb      	ldrb	r3, [r7, #23]
 8002914:	2b01      	cmp	r3, #1
 8002916:	d105      	bne.n	8002924 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002918:	4b39      	ldr	r3, [pc, #228]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 800291a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291c:	4a38      	ldr	r2, [pc, #224]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 800291e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002922:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	699b      	ldr	r3, [r3, #24]
 8002928:	2b00      	cmp	r3, #0
 800292a:	f000 80a1 	beq.w	8002a70 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800292e:	4b34      	ldr	r3, [pc, #208]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f003 030c 	and.w	r3, r3, #12
 8002936:	2b08      	cmp	r3, #8
 8002938:	d05c      	beq.n	80029f4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	699b      	ldr	r3, [r3, #24]
 800293e:	2b02      	cmp	r3, #2
 8002940:	d141      	bne.n	80029c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002942:	4b31      	ldr	r3, [pc, #196]	; (8002a08 <HAL_RCC_OscConfig+0x478>)
 8002944:	2200      	movs	r2, #0
 8002946:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002948:	f7ff fb12 	bl	8001f70 <HAL_GetTick>
 800294c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800294e:	e008      	b.n	8002962 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002950:	f7ff fb0e 	bl	8001f70 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	2b02      	cmp	r3, #2
 800295c:	d901      	bls.n	8002962 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e087      	b.n	8002a72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002962:	4b27      	ldr	r3, [pc, #156]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d1f0      	bne.n	8002950 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	69da      	ldr	r2, [r3, #28]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a1b      	ldr	r3, [r3, #32]
 8002976:	431a      	orrs	r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297c:	019b      	lsls	r3, r3, #6
 800297e:	431a      	orrs	r2, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002984:	085b      	lsrs	r3, r3, #1
 8002986:	3b01      	subs	r3, #1
 8002988:	041b      	lsls	r3, r3, #16
 800298a:	431a      	orrs	r2, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002990:	061b      	lsls	r3, r3, #24
 8002992:	491b      	ldr	r1, [pc, #108]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 8002994:	4313      	orrs	r3, r2
 8002996:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002998:	4b1b      	ldr	r3, [pc, #108]	; (8002a08 <HAL_RCC_OscConfig+0x478>)
 800299a:	2201      	movs	r2, #1
 800299c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800299e:	f7ff fae7 	bl	8001f70 <HAL_GetTick>
 80029a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029a4:	e008      	b.n	80029b8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029a6:	f7ff fae3 	bl	8001f70 <HAL_GetTick>
 80029aa:	4602      	mov	r2, r0
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d901      	bls.n	80029b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80029b4:	2303      	movs	r3, #3
 80029b6:	e05c      	b.n	8002a72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029b8:	4b11      	ldr	r3, [pc, #68]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d0f0      	beq.n	80029a6 <HAL_RCC_OscConfig+0x416>
 80029c4:	e054      	b.n	8002a70 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029c6:	4b10      	ldr	r3, [pc, #64]	; (8002a08 <HAL_RCC_OscConfig+0x478>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029cc:	f7ff fad0 	bl	8001f70 <HAL_GetTick>
 80029d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029d2:	e008      	b.n	80029e6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029d4:	f7ff facc 	bl	8001f70 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d901      	bls.n	80029e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e045      	b.n	8002a72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029e6:	4b06      	ldr	r3, [pc, #24]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d1f0      	bne.n	80029d4 <HAL_RCC_OscConfig+0x444>
 80029f2:	e03d      	b.n	8002a70 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	699b      	ldr	r3, [r3, #24]
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d107      	bne.n	8002a0c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e038      	b.n	8002a72 <HAL_RCC_OscConfig+0x4e2>
 8002a00:	40023800 	.word	0x40023800
 8002a04:	40007000 	.word	0x40007000
 8002a08:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a0c:	4b1b      	ldr	r3, [pc, #108]	; (8002a7c <HAL_RCC_OscConfig+0x4ec>)
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	699b      	ldr	r3, [r3, #24]
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d028      	beq.n	8002a6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d121      	bne.n	8002a6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d11a      	bne.n	8002a6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a36:	68fa      	ldr	r2, [r7, #12]
 8002a38:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a42:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d111      	bne.n	8002a6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a52:	085b      	lsrs	r3, r3, #1
 8002a54:	3b01      	subs	r3, #1
 8002a56:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d107      	bne.n	8002a6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a66:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d001      	beq.n	8002a70 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e000      	b.n	8002a72 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3718      	adds	r7, #24
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	40023800 	.word	0x40023800

08002a80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d101      	bne.n	8002a94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e0cc      	b.n	8002c2e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a94:	4b68      	ldr	r3, [pc, #416]	; (8002c38 <HAL_RCC_ClockConfig+0x1b8>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0307 	and.w	r3, r3, #7
 8002a9c:	683a      	ldr	r2, [r7, #0]
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d90c      	bls.n	8002abc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aa2:	4b65      	ldr	r3, [pc, #404]	; (8002c38 <HAL_RCC_ClockConfig+0x1b8>)
 8002aa4:	683a      	ldr	r2, [r7, #0]
 8002aa6:	b2d2      	uxtb	r2, r2
 8002aa8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aaa:	4b63      	ldr	r3, [pc, #396]	; (8002c38 <HAL_RCC_ClockConfig+0x1b8>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0307 	and.w	r3, r3, #7
 8002ab2:	683a      	ldr	r2, [r7, #0]
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d001      	beq.n	8002abc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e0b8      	b.n	8002c2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0302 	and.w	r3, r3, #2
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d020      	beq.n	8002b0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0304 	and.w	r3, r3, #4
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d005      	beq.n	8002ae0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ad4:	4b59      	ldr	r3, [pc, #356]	; (8002c3c <HAL_RCC_ClockConfig+0x1bc>)
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	4a58      	ldr	r2, [pc, #352]	; (8002c3c <HAL_RCC_ClockConfig+0x1bc>)
 8002ada:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ade:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0308 	and.w	r3, r3, #8
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d005      	beq.n	8002af8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002aec:	4b53      	ldr	r3, [pc, #332]	; (8002c3c <HAL_RCC_ClockConfig+0x1bc>)
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	4a52      	ldr	r2, [pc, #328]	; (8002c3c <HAL_RCC_ClockConfig+0x1bc>)
 8002af2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002af6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002af8:	4b50      	ldr	r3, [pc, #320]	; (8002c3c <HAL_RCC_ClockConfig+0x1bc>)
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	494d      	ldr	r1, [pc, #308]	; (8002c3c <HAL_RCC_ClockConfig+0x1bc>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0301 	and.w	r3, r3, #1
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d044      	beq.n	8002ba0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d107      	bne.n	8002b2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b1e:	4b47      	ldr	r3, [pc, #284]	; (8002c3c <HAL_RCC_ClockConfig+0x1bc>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d119      	bne.n	8002b5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e07f      	b.n	8002c2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d003      	beq.n	8002b3e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b3a:	2b03      	cmp	r3, #3
 8002b3c:	d107      	bne.n	8002b4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b3e:	4b3f      	ldr	r3, [pc, #252]	; (8002c3c <HAL_RCC_ClockConfig+0x1bc>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d109      	bne.n	8002b5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e06f      	b.n	8002c2e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b4e:	4b3b      	ldr	r3, [pc, #236]	; (8002c3c <HAL_RCC_ClockConfig+0x1bc>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0302 	and.w	r3, r3, #2
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d101      	bne.n	8002b5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e067      	b.n	8002c2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b5e:	4b37      	ldr	r3, [pc, #220]	; (8002c3c <HAL_RCC_ClockConfig+0x1bc>)
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f023 0203 	bic.w	r2, r3, #3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	4934      	ldr	r1, [pc, #208]	; (8002c3c <HAL_RCC_ClockConfig+0x1bc>)
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b70:	f7ff f9fe 	bl	8001f70 <HAL_GetTick>
 8002b74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b76:	e00a      	b.n	8002b8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b78:	f7ff f9fa 	bl	8001f70 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d901      	bls.n	8002b8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e04f      	b.n	8002c2e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b8e:	4b2b      	ldr	r3, [pc, #172]	; (8002c3c <HAL_RCC_ClockConfig+0x1bc>)
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f003 020c 	and.w	r2, r3, #12
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d1eb      	bne.n	8002b78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ba0:	4b25      	ldr	r3, [pc, #148]	; (8002c38 <HAL_RCC_ClockConfig+0x1b8>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0307 	and.w	r3, r3, #7
 8002ba8:	683a      	ldr	r2, [r7, #0]
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d20c      	bcs.n	8002bc8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bae:	4b22      	ldr	r3, [pc, #136]	; (8002c38 <HAL_RCC_ClockConfig+0x1b8>)
 8002bb0:	683a      	ldr	r2, [r7, #0]
 8002bb2:	b2d2      	uxtb	r2, r2
 8002bb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bb6:	4b20      	ldr	r3, [pc, #128]	; (8002c38 <HAL_RCC_ClockConfig+0x1b8>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0307 	and.w	r3, r3, #7
 8002bbe:	683a      	ldr	r2, [r7, #0]
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d001      	beq.n	8002bc8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e032      	b.n	8002c2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0304 	and.w	r3, r3, #4
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d008      	beq.n	8002be6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bd4:	4b19      	ldr	r3, [pc, #100]	; (8002c3c <HAL_RCC_ClockConfig+0x1bc>)
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	4916      	ldr	r1, [pc, #88]	; (8002c3c <HAL_RCC_ClockConfig+0x1bc>)
 8002be2:	4313      	orrs	r3, r2
 8002be4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0308 	and.w	r3, r3, #8
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d009      	beq.n	8002c06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bf2:	4b12      	ldr	r3, [pc, #72]	; (8002c3c <HAL_RCC_ClockConfig+0x1bc>)
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	691b      	ldr	r3, [r3, #16]
 8002bfe:	00db      	lsls	r3, r3, #3
 8002c00:	490e      	ldr	r1, [pc, #56]	; (8002c3c <HAL_RCC_ClockConfig+0x1bc>)
 8002c02:	4313      	orrs	r3, r2
 8002c04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c06:	f000 f821 	bl	8002c4c <HAL_RCC_GetSysClockFreq>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	4b0b      	ldr	r3, [pc, #44]	; (8002c3c <HAL_RCC_ClockConfig+0x1bc>)
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	091b      	lsrs	r3, r3, #4
 8002c12:	f003 030f 	and.w	r3, r3, #15
 8002c16:	490a      	ldr	r1, [pc, #40]	; (8002c40 <HAL_RCC_ClockConfig+0x1c0>)
 8002c18:	5ccb      	ldrb	r3, [r1, r3]
 8002c1a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c1e:	4a09      	ldr	r2, [pc, #36]	; (8002c44 <HAL_RCC_ClockConfig+0x1c4>)
 8002c20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c22:	4b09      	ldr	r3, [pc, #36]	; (8002c48 <HAL_RCC_ClockConfig+0x1c8>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7ff f95e 	bl	8001ee8 <HAL_InitTick>

  return HAL_OK;
 8002c2c:	2300      	movs	r3, #0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3710      	adds	r7, #16
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	40023c00 	.word	0x40023c00
 8002c3c:	40023800 	.word	0x40023800
 8002c40:	080045c8 	.word	0x080045c8
 8002c44:	20000000 	.word	0x20000000
 8002c48:	20000004 	.word	0x20000004

08002c4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c50:	b094      	sub	sp, #80	; 0x50
 8002c52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c54:	2300      	movs	r3, #0
 8002c56:	647b      	str	r3, [r7, #68]	; 0x44
 8002c58:	2300      	movs	r3, #0
 8002c5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002c60:	2300      	movs	r3, #0
 8002c62:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c64:	4b79      	ldr	r3, [pc, #484]	; (8002e4c <HAL_RCC_GetSysClockFreq+0x200>)
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	f003 030c 	and.w	r3, r3, #12
 8002c6c:	2b08      	cmp	r3, #8
 8002c6e:	d00d      	beq.n	8002c8c <HAL_RCC_GetSysClockFreq+0x40>
 8002c70:	2b08      	cmp	r3, #8
 8002c72:	f200 80e1 	bhi.w	8002e38 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d002      	beq.n	8002c80 <HAL_RCC_GetSysClockFreq+0x34>
 8002c7a:	2b04      	cmp	r3, #4
 8002c7c:	d003      	beq.n	8002c86 <HAL_RCC_GetSysClockFreq+0x3a>
 8002c7e:	e0db      	b.n	8002e38 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c80:	4b73      	ldr	r3, [pc, #460]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c82:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002c84:	e0db      	b.n	8002e3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c86:	4b73      	ldr	r3, [pc, #460]	; (8002e54 <HAL_RCC_GetSysClockFreq+0x208>)
 8002c88:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c8a:	e0d8      	b.n	8002e3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c8c:	4b6f      	ldr	r3, [pc, #444]	; (8002e4c <HAL_RCC_GetSysClockFreq+0x200>)
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c94:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c96:	4b6d      	ldr	r3, [pc, #436]	; (8002e4c <HAL_RCC_GetSysClockFreq+0x200>)
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d063      	beq.n	8002d6a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ca2:	4b6a      	ldr	r3, [pc, #424]	; (8002e4c <HAL_RCC_GetSysClockFreq+0x200>)
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	099b      	lsrs	r3, r3, #6
 8002ca8:	2200      	movs	r2, #0
 8002caa:	63bb      	str	r3, [r7, #56]	; 0x38
 8002cac:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cb4:	633b      	str	r3, [r7, #48]	; 0x30
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	637b      	str	r3, [r7, #52]	; 0x34
 8002cba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002cbe:	4622      	mov	r2, r4
 8002cc0:	462b      	mov	r3, r5
 8002cc2:	f04f 0000 	mov.w	r0, #0
 8002cc6:	f04f 0100 	mov.w	r1, #0
 8002cca:	0159      	lsls	r1, r3, #5
 8002ccc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cd0:	0150      	lsls	r0, r2, #5
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	4621      	mov	r1, r4
 8002cd8:	1a51      	subs	r1, r2, r1
 8002cda:	6139      	str	r1, [r7, #16]
 8002cdc:	4629      	mov	r1, r5
 8002cde:	eb63 0301 	sbc.w	r3, r3, r1
 8002ce2:	617b      	str	r3, [r7, #20]
 8002ce4:	f04f 0200 	mov.w	r2, #0
 8002ce8:	f04f 0300 	mov.w	r3, #0
 8002cec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002cf0:	4659      	mov	r1, fp
 8002cf2:	018b      	lsls	r3, r1, #6
 8002cf4:	4651      	mov	r1, sl
 8002cf6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002cfa:	4651      	mov	r1, sl
 8002cfc:	018a      	lsls	r2, r1, #6
 8002cfe:	4651      	mov	r1, sl
 8002d00:	ebb2 0801 	subs.w	r8, r2, r1
 8002d04:	4659      	mov	r1, fp
 8002d06:	eb63 0901 	sbc.w	r9, r3, r1
 8002d0a:	f04f 0200 	mov.w	r2, #0
 8002d0e:	f04f 0300 	mov.w	r3, #0
 8002d12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d1e:	4690      	mov	r8, r2
 8002d20:	4699      	mov	r9, r3
 8002d22:	4623      	mov	r3, r4
 8002d24:	eb18 0303 	adds.w	r3, r8, r3
 8002d28:	60bb      	str	r3, [r7, #8]
 8002d2a:	462b      	mov	r3, r5
 8002d2c:	eb49 0303 	adc.w	r3, r9, r3
 8002d30:	60fb      	str	r3, [r7, #12]
 8002d32:	f04f 0200 	mov.w	r2, #0
 8002d36:	f04f 0300 	mov.w	r3, #0
 8002d3a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002d3e:	4629      	mov	r1, r5
 8002d40:	024b      	lsls	r3, r1, #9
 8002d42:	4621      	mov	r1, r4
 8002d44:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d48:	4621      	mov	r1, r4
 8002d4a:	024a      	lsls	r2, r1, #9
 8002d4c:	4610      	mov	r0, r2
 8002d4e:	4619      	mov	r1, r3
 8002d50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d52:	2200      	movs	r2, #0
 8002d54:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d56:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d58:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d5c:	f7fd fa42 	bl	80001e4 <__aeabi_uldivmod>
 8002d60:	4602      	mov	r2, r0
 8002d62:	460b      	mov	r3, r1
 8002d64:	4613      	mov	r3, r2
 8002d66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d68:	e058      	b.n	8002e1c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d6a:	4b38      	ldr	r3, [pc, #224]	; (8002e4c <HAL_RCC_GetSysClockFreq+0x200>)
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	099b      	lsrs	r3, r3, #6
 8002d70:	2200      	movs	r2, #0
 8002d72:	4618      	mov	r0, r3
 8002d74:	4611      	mov	r1, r2
 8002d76:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d7a:	623b      	str	r3, [r7, #32]
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	627b      	str	r3, [r7, #36]	; 0x24
 8002d80:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002d84:	4642      	mov	r2, r8
 8002d86:	464b      	mov	r3, r9
 8002d88:	f04f 0000 	mov.w	r0, #0
 8002d8c:	f04f 0100 	mov.w	r1, #0
 8002d90:	0159      	lsls	r1, r3, #5
 8002d92:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d96:	0150      	lsls	r0, r2, #5
 8002d98:	4602      	mov	r2, r0
 8002d9a:	460b      	mov	r3, r1
 8002d9c:	4641      	mov	r1, r8
 8002d9e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002da2:	4649      	mov	r1, r9
 8002da4:	eb63 0b01 	sbc.w	fp, r3, r1
 8002da8:	f04f 0200 	mov.w	r2, #0
 8002dac:	f04f 0300 	mov.w	r3, #0
 8002db0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002db4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002db8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002dbc:	ebb2 040a 	subs.w	r4, r2, sl
 8002dc0:	eb63 050b 	sbc.w	r5, r3, fp
 8002dc4:	f04f 0200 	mov.w	r2, #0
 8002dc8:	f04f 0300 	mov.w	r3, #0
 8002dcc:	00eb      	lsls	r3, r5, #3
 8002dce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002dd2:	00e2      	lsls	r2, r4, #3
 8002dd4:	4614      	mov	r4, r2
 8002dd6:	461d      	mov	r5, r3
 8002dd8:	4643      	mov	r3, r8
 8002dda:	18e3      	adds	r3, r4, r3
 8002ddc:	603b      	str	r3, [r7, #0]
 8002dde:	464b      	mov	r3, r9
 8002de0:	eb45 0303 	adc.w	r3, r5, r3
 8002de4:	607b      	str	r3, [r7, #4]
 8002de6:	f04f 0200 	mov.w	r2, #0
 8002dea:	f04f 0300 	mov.w	r3, #0
 8002dee:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002df2:	4629      	mov	r1, r5
 8002df4:	028b      	lsls	r3, r1, #10
 8002df6:	4621      	mov	r1, r4
 8002df8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002dfc:	4621      	mov	r1, r4
 8002dfe:	028a      	lsls	r2, r1, #10
 8002e00:	4610      	mov	r0, r2
 8002e02:	4619      	mov	r1, r3
 8002e04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e06:	2200      	movs	r2, #0
 8002e08:	61bb      	str	r3, [r7, #24]
 8002e0a:	61fa      	str	r2, [r7, #28]
 8002e0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e10:	f7fd f9e8 	bl	80001e4 <__aeabi_uldivmod>
 8002e14:	4602      	mov	r2, r0
 8002e16:	460b      	mov	r3, r1
 8002e18:	4613      	mov	r3, r2
 8002e1a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e1c:	4b0b      	ldr	r3, [pc, #44]	; (8002e4c <HAL_RCC_GetSysClockFreq+0x200>)
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	0c1b      	lsrs	r3, r3, #16
 8002e22:	f003 0303 	and.w	r3, r3, #3
 8002e26:	3301      	adds	r3, #1
 8002e28:	005b      	lsls	r3, r3, #1
 8002e2a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002e2c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e34:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e36:	e002      	b.n	8002e3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e38:	4b05      	ldr	r3, [pc, #20]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e3a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3750      	adds	r7, #80	; 0x50
 8002e44:	46bd      	mov	sp, r7
 8002e46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e4a:	bf00      	nop
 8002e4c:	40023800 	.word	0x40023800
 8002e50:	00f42400 	.word	0x00f42400
 8002e54:	007a1200 	.word	0x007a1200

08002e58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d101      	bne.n	8002e6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e041      	b.n	8002eee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d106      	bne.n	8002e84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f7fe fd36 	bl	80018f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2202      	movs	r2, #2
 8002e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	3304      	adds	r3, #4
 8002e94:	4619      	mov	r1, r3
 8002e96:	4610      	mov	r0, r2
 8002e98:	f000 f950 	bl	800313c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3708      	adds	r7, #8
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
	...

08002ef8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b085      	sub	sp, #20
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d001      	beq.n	8002f10 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e03c      	b.n	8002f8a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2202      	movs	r2, #2
 8002f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a1e      	ldr	r2, [pc, #120]	; (8002f98 <HAL_TIM_Base_Start+0xa0>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d018      	beq.n	8002f54 <HAL_TIM_Base_Start+0x5c>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f2a:	d013      	beq.n	8002f54 <HAL_TIM_Base_Start+0x5c>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a1a      	ldr	r2, [pc, #104]	; (8002f9c <HAL_TIM_Base_Start+0xa4>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d00e      	beq.n	8002f54 <HAL_TIM_Base_Start+0x5c>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a19      	ldr	r2, [pc, #100]	; (8002fa0 <HAL_TIM_Base_Start+0xa8>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d009      	beq.n	8002f54 <HAL_TIM_Base_Start+0x5c>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a17      	ldr	r2, [pc, #92]	; (8002fa4 <HAL_TIM_Base_Start+0xac>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d004      	beq.n	8002f54 <HAL_TIM_Base_Start+0x5c>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a16      	ldr	r2, [pc, #88]	; (8002fa8 <HAL_TIM_Base_Start+0xb0>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d111      	bne.n	8002f78 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	f003 0307 	and.w	r3, r3, #7
 8002f5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2b06      	cmp	r3, #6
 8002f64:	d010      	beq.n	8002f88 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f042 0201 	orr.w	r2, r2, #1
 8002f74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f76:	e007      	b.n	8002f88 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f042 0201 	orr.w	r2, r2, #1
 8002f86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f88:	2300      	movs	r3, #0
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3714      	adds	r7, #20
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr
 8002f96:	bf00      	nop
 8002f98:	40010000 	.word	0x40010000
 8002f9c:	40000400 	.word	0x40000400
 8002fa0:	40000800 	.word	0x40000800
 8002fa4:	40000c00 	.word	0x40000c00
 8002fa8:	40014000 	.word	0x40014000

08002fac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d101      	bne.n	8002fc8 <HAL_TIM_ConfigClockSource+0x1c>
 8002fc4:	2302      	movs	r3, #2
 8002fc6:	e0b4      	b.n	8003132 <HAL_TIM_ConfigClockSource+0x186>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2202      	movs	r2, #2
 8002fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002fe6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002fee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	68ba      	ldr	r2, [r7, #8]
 8002ff6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003000:	d03e      	beq.n	8003080 <HAL_TIM_ConfigClockSource+0xd4>
 8003002:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003006:	f200 8087 	bhi.w	8003118 <HAL_TIM_ConfigClockSource+0x16c>
 800300a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800300e:	f000 8086 	beq.w	800311e <HAL_TIM_ConfigClockSource+0x172>
 8003012:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003016:	d87f      	bhi.n	8003118 <HAL_TIM_ConfigClockSource+0x16c>
 8003018:	2b70      	cmp	r3, #112	; 0x70
 800301a:	d01a      	beq.n	8003052 <HAL_TIM_ConfigClockSource+0xa6>
 800301c:	2b70      	cmp	r3, #112	; 0x70
 800301e:	d87b      	bhi.n	8003118 <HAL_TIM_ConfigClockSource+0x16c>
 8003020:	2b60      	cmp	r3, #96	; 0x60
 8003022:	d050      	beq.n	80030c6 <HAL_TIM_ConfigClockSource+0x11a>
 8003024:	2b60      	cmp	r3, #96	; 0x60
 8003026:	d877      	bhi.n	8003118 <HAL_TIM_ConfigClockSource+0x16c>
 8003028:	2b50      	cmp	r3, #80	; 0x50
 800302a:	d03c      	beq.n	80030a6 <HAL_TIM_ConfigClockSource+0xfa>
 800302c:	2b50      	cmp	r3, #80	; 0x50
 800302e:	d873      	bhi.n	8003118 <HAL_TIM_ConfigClockSource+0x16c>
 8003030:	2b40      	cmp	r3, #64	; 0x40
 8003032:	d058      	beq.n	80030e6 <HAL_TIM_ConfigClockSource+0x13a>
 8003034:	2b40      	cmp	r3, #64	; 0x40
 8003036:	d86f      	bhi.n	8003118 <HAL_TIM_ConfigClockSource+0x16c>
 8003038:	2b30      	cmp	r3, #48	; 0x30
 800303a:	d064      	beq.n	8003106 <HAL_TIM_ConfigClockSource+0x15a>
 800303c:	2b30      	cmp	r3, #48	; 0x30
 800303e:	d86b      	bhi.n	8003118 <HAL_TIM_ConfigClockSource+0x16c>
 8003040:	2b20      	cmp	r3, #32
 8003042:	d060      	beq.n	8003106 <HAL_TIM_ConfigClockSource+0x15a>
 8003044:	2b20      	cmp	r3, #32
 8003046:	d867      	bhi.n	8003118 <HAL_TIM_ConfigClockSource+0x16c>
 8003048:	2b00      	cmp	r3, #0
 800304a:	d05c      	beq.n	8003106 <HAL_TIM_ConfigClockSource+0x15a>
 800304c:	2b10      	cmp	r3, #16
 800304e:	d05a      	beq.n	8003106 <HAL_TIM_ConfigClockSource+0x15a>
 8003050:	e062      	b.n	8003118 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6818      	ldr	r0, [r3, #0]
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	6899      	ldr	r1, [r3, #8]
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	685a      	ldr	r2, [r3, #4]
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	f000 f965 	bl	8003330 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003074:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	68ba      	ldr	r2, [r7, #8]
 800307c:	609a      	str	r2, [r3, #8]
      break;
 800307e:	e04f      	b.n	8003120 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6818      	ldr	r0, [r3, #0]
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	6899      	ldr	r1, [r3, #8]
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	685a      	ldr	r2, [r3, #4]
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	f000 f94e 	bl	8003330 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	689a      	ldr	r2, [r3, #8]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030a2:	609a      	str	r2, [r3, #8]
      break;
 80030a4:	e03c      	b.n	8003120 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6818      	ldr	r0, [r3, #0]
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	6859      	ldr	r1, [r3, #4]
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	461a      	mov	r2, r3
 80030b4:	f000 f8c2 	bl	800323c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2150      	movs	r1, #80	; 0x50
 80030be:	4618      	mov	r0, r3
 80030c0:	f000 f91b 	bl	80032fa <TIM_ITRx_SetConfig>
      break;
 80030c4:	e02c      	b.n	8003120 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6818      	ldr	r0, [r3, #0]
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	6859      	ldr	r1, [r3, #4]
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	461a      	mov	r2, r3
 80030d4:	f000 f8e1 	bl	800329a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2160      	movs	r1, #96	; 0x60
 80030de:	4618      	mov	r0, r3
 80030e0:	f000 f90b 	bl	80032fa <TIM_ITRx_SetConfig>
      break;
 80030e4:	e01c      	b.n	8003120 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6818      	ldr	r0, [r3, #0]
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	6859      	ldr	r1, [r3, #4]
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	461a      	mov	r2, r3
 80030f4:	f000 f8a2 	bl	800323c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2140      	movs	r1, #64	; 0x40
 80030fe:	4618      	mov	r0, r3
 8003100:	f000 f8fb 	bl	80032fa <TIM_ITRx_SetConfig>
      break;
 8003104:	e00c      	b.n	8003120 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4619      	mov	r1, r3
 8003110:	4610      	mov	r0, r2
 8003112:	f000 f8f2 	bl	80032fa <TIM_ITRx_SetConfig>
      break;
 8003116:	e003      	b.n	8003120 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	73fb      	strb	r3, [r7, #15]
      break;
 800311c:	e000      	b.n	8003120 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800311e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2201      	movs	r2, #1
 8003124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003130:	7bfb      	ldrb	r3, [r7, #15]
}
 8003132:	4618      	mov	r0, r3
 8003134:	3710      	adds	r7, #16
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
	...

0800313c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800313c:	b480      	push	{r7}
 800313e:	b085      	sub	sp, #20
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4a34      	ldr	r2, [pc, #208]	; (8003220 <TIM_Base_SetConfig+0xe4>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d00f      	beq.n	8003174 <TIM_Base_SetConfig+0x38>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800315a:	d00b      	beq.n	8003174 <TIM_Base_SetConfig+0x38>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4a31      	ldr	r2, [pc, #196]	; (8003224 <TIM_Base_SetConfig+0xe8>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d007      	beq.n	8003174 <TIM_Base_SetConfig+0x38>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	4a30      	ldr	r2, [pc, #192]	; (8003228 <TIM_Base_SetConfig+0xec>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d003      	beq.n	8003174 <TIM_Base_SetConfig+0x38>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	4a2f      	ldr	r2, [pc, #188]	; (800322c <TIM_Base_SetConfig+0xf0>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d108      	bne.n	8003186 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800317a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	68fa      	ldr	r2, [r7, #12]
 8003182:	4313      	orrs	r3, r2
 8003184:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a25      	ldr	r2, [pc, #148]	; (8003220 <TIM_Base_SetConfig+0xe4>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d01b      	beq.n	80031c6 <TIM_Base_SetConfig+0x8a>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003194:	d017      	beq.n	80031c6 <TIM_Base_SetConfig+0x8a>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a22      	ldr	r2, [pc, #136]	; (8003224 <TIM_Base_SetConfig+0xe8>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d013      	beq.n	80031c6 <TIM_Base_SetConfig+0x8a>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a21      	ldr	r2, [pc, #132]	; (8003228 <TIM_Base_SetConfig+0xec>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d00f      	beq.n	80031c6 <TIM_Base_SetConfig+0x8a>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a20      	ldr	r2, [pc, #128]	; (800322c <TIM_Base_SetConfig+0xf0>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d00b      	beq.n	80031c6 <TIM_Base_SetConfig+0x8a>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a1f      	ldr	r2, [pc, #124]	; (8003230 <TIM_Base_SetConfig+0xf4>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d007      	beq.n	80031c6 <TIM_Base_SetConfig+0x8a>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a1e      	ldr	r2, [pc, #120]	; (8003234 <TIM_Base_SetConfig+0xf8>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d003      	beq.n	80031c6 <TIM_Base_SetConfig+0x8a>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a1d      	ldr	r2, [pc, #116]	; (8003238 <TIM_Base_SetConfig+0xfc>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d108      	bne.n	80031d8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	68fa      	ldr	r2, [r7, #12]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	695b      	ldr	r3, [r3, #20]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	68fa      	ldr	r2, [r7, #12]
 80031ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	689a      	ldr	r2, [r3, #8]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	4a08      	ldr	r2, [pc, #32]	; (8003220 <TIM_Base_SetConfig+0xe4>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d103      	bne.n	800320c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	691a      	ldr	r2, [r3, #16]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	615a      	str	r2, [r3, #20]
}
 8003212:	bf00      	nop
 8003214:	3714      	adds	r7, #20
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr
 800321e:	bf00      	nop
 8003220:	40010000 	.word	0x40010000
 8003224:	40000400 	.word	0x40000400
 8003228:	40000800 	.word	0x40000800
 800322c:	40000c00 	.word	0x40000c00
 8003230:	40014000 	.word	0x40014000
 8003234:	40014400 	.word	0x40014400
 8003238:	40014800 	.word	0x40014800

0800323c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800323c:	b480      	push	{r7}
 800323e:	b087      	sub	sp, #28
 8003240:	af00      	add	r7, sp, #0
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6a1b      	ldr	r3, [r3, #32]
 800324c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	6a1b      	ldr	r3, [r3, #32]
 8003252:	f023 0201 	bic.w	r2, r3, #1
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	699b      	ldr	r3, [r3, #24]
 800325e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003266:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	011b      	lsls	r3, r3, #4
 800326c:	693a      	ldr	r2, [r7, #16]
 800326e:	4313      	orrs	r3, r2
 8003270:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	f023 030a 	bic.w	r3, r3, #10
 8003278:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800327a:	697a      	ldr	r2, [r7, #20]
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	4313      	orrs	r3, r2
 8003280:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	693a      	ldr	r2, [r7, #16]
 8003286:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	697a      	ldr	r2, [r7, #20]
 800328c:	621a      	str	r2, [r3, #32]
}
 800328e:	bf00      	nop
 8003290:	371c      	adds	r7, #28
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr

0800329a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800329a:	b480      	push	{r7}
 800329c:	b087      	sub	sp, #28
 800329e:	af00      	add	r7, sp, #0
 80032a0:	60f8      	str	r0, [r7, #12]
 80032a2:	60b9      	str	r1, [r7, #8]
 80032a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6a1b      	ldr	r3, [r3, #32]
 80032aa:	f023 0210 	bic.w	r2, r3, #16
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	699b      	ldr	r3, [r3, #24]
 80032b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6a1b      	ldr	r3, [r3, #32]
 80032bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80032c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	031b      	lsls	r3, r3, #12
 80032ca:	697a      	ldr	r2, [r7, #20]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80032d6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	011b      	lsls	r3, r3, #4
 80032dc:	693a      	ldr	r2, [r7, #16]
 80032de:	4313      	orrs	r3, r2
 80032e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	697a      	ldr	r2, [r7, #20]
 80032e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	693a      	ldr	r2, [r7, #16]
 80032ec:	621a      	str	r2, [r3, #32]
}
 80032ee:	bf00      	nop
 80032f0:	371c      	adds	r7, #28
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr

080032fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80032fa:	b480      	push	{r7}
 80032fc:	b085      	sub	sp, #20
 80032fe:	af00      	add	r7, sp, #0
 8003300:	6078      	str	r0, [r7, #4]
 8003302:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003310:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003312:	683a      	ldr	r2, [r7, #0]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	4313      	orrs	r3, r2
 8003318:	f043 0307 	orr.w	r3, r3, #7
 800331c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	68fa      	ldr	r2, [r7, #12]
 8003322:	609a      	str	r2, [r3, #8]
}
 8003324:	bf00      	nop
 8003326:	3714      	adds	r7, #20
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr

08003330 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003330:	b480      	push	{r7}
 8003332:	b087      	sub	sp, #28
 8003334:	af00      	add	r7, sp, #0
 8003336:	60f8      	str	r0, [r7, #12]
 8003338:	60b9      	str	r1, [r7, #8]
 800333a:	607a      	str	r2, [r7, #4]
 800333c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800334a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	021a      	lsls	r2, r3, #8
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	431a      	orrs	r2, r3
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	4313      	orrs	r3, r2
 8003358:	697a      	ldr	r2, [r7, #20]
 800335a:	4313      	orrs	r3, r2
 800335c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	697a      	ldr	r2, [r7, #20]
 8003362:	609a      	str	r2, [r3, #8]
}
 8003364:	bf00      	nop
 8003366:	371c      	adds	r7, #28
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr

08003370 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003370:	b480      	push	{r7}
 8003372:	b085      	sub	sp, #20
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003380:	2b01      	cmp	r3, #1
 8003382:	d101      	bne.n	8003388 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003384:	2302      	movs	r3, #2
 8003386:	e050      	b.n	800342a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2202      	movs	r2, #2
 8003394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	68fa      	ldr	r2, [r7, #12]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	68fa      	ldr	r2, [r7, #12]
 80033c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a1c      	ldr	r2, [pc, #112]	; (8003438 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d018      	beq.n	80033fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033d4:	d013      	beq.n	80033fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a18      	ldr	r2, [pc, #96]	; (800343c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d00e      	beq.n	80033fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a16      	ldr	r2, [pc, #88]	; (8003440 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d009      	beq.n	80033fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a15      	ldr	r2, [pc, #84]	; (8003444 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d004      	beq.n	80033fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a13      	ldr	r2, [pc, #76]	; (8003448 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d10c      	bne.n	8003418 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003404:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	68ba      	ldr	r2, [r7, #8]
 800340c:	4313      	orrs	r3, r2
 800340e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	68ba      	ldr	r2, [r7, #8]
 8003416:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003428:	2300      	movs	r3, #0
}
 800342a:	4618      	mov	r0, r3
 800342c:	3714      	adds	r7, #20
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr
 8003436:	bf00      	nop
 8003438:	40010000 	.word	0x40010000
 800343c:	40000400 	.word	0x40000400
 8003440:	40000800 	.word	0x40000800
 8003444:	40000c00 	.word	0x40000c00
 8003448:	40014000 	.word	0x40014000

0800344c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800344c:	b480      	push	{r7}
 800344e:	b089      	sub	sp, #36	; 0x24
 8003450:	af00      	add	r7, sp, #0
 8003452:	60f8      	str	r0, [r7, #12]
 8003454:	60b9      	str	r1, [r7, #8]
 8003456:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	fa93 f3a3 	rbit	r3, r3
 8003466:	613b      	str	r3, [r7, #16]
  return result;
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	fab3 f383 	clz	r3, r3
 800346e:	b2db      	uxtb	r3, r3
 8003470:	005b      	lsls	r3, r3, #1
 8003472:	2103      	movs	r1, #3
 8003474:	fa01 f303 	lsl.w	r3, r1, r3
 8003478:	43db      	mvns	r3, r3
 800347a:	401a      	ands	r2, r3
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	fa93 f3a3 	rbit	r3, r3
 8003486:	61bb      	str	r3, [r7, #24]
  return result;
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	fab3 f383 	clz	r3, r3
 800348e:	b2db      	uxtb	r3, r3
 8003490:	005b      	lsls	r3, r3, #1
 8003492:	6879      	ldr	r1, [r7, #4]
 8003494:	fa01 f303 	lsl.w	r3, r1, r3
 8003498:	431a      	orrs	r2, r3
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	601a      	str	r2, [r3, #0]
}
 800349e:	bf00      	nop
 80034a0:	3724      	adds	r7, #36	; 0x24
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr

080034aa <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80034aa:	b480      	push	{r7}
 80034ac:	b085      	sub	sp, #20
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	60f8      	str	r0, [r7, #12]
 80034b2:	60b9      	str	r1, [r7, #8]
 80034b4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	685a      	ldr	r2, [r3, #4]
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	43db      	mvns	r3, r3
 80034be:	401a      	ands	r2, r3
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	6879      	ldr	r1, [r7, #4]
 80034c4:	fb01 f303 	mul.w	r3, r1, r3
 80034c8:	431a      	orrs	r2, r3
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	605a      	str	r2, [r3, #4]
}
 80034ce:	bf00      	nop
 80034d0:	3714      	adds	r7, #20
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr

080034da <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80034da:	b480      	push	{r7}
 80034dc:	b089      	sub	sp, #36	; 0x24
 80034de:	af00      	add	r7, sp, #0
 80034e0:	60f8      	str	r0, [r7, #12]
 80034e2:	60b9      	str	r1, [r7, #8]
 80034e4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	689a      	ldr	r2, [r3, #8]
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	fa93 f3a3 	rbit	r3, r3
 80034f4:	613b      	str	r3, [r7, #16]
  return result;
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	fab3 f383 	clz	r3, r3
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	005b      	lsls	r3, r3, #1
 8003500:	2103      	movs	r1, #3
 8003502:	fa01 f303 	lsl.w	r3, r1, r3
 8003506:	43db      	mvns	r3, r3
 8003508:	401a      	ands	r2, r3
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	fa93 f3a3 	rbit	r3, r3
 8003514:	61bb      	str	r3, [r7, #24]
  return result;
 8003516:	69bb      	ldr	r3, [r7, #24]
 8003518:	fab3 f383 	clz	r3, r3
 800351c:	b2db      	uxtb	r3, r3
 800351e:	005b      	lsls	r3, r3, #1
 8003520:	6879      	ldr	r1, [r7, #4]
 8003522:	fa01 f303 	lsl.w	r3, r1, r3
 8003526:	431a      	orrs	r2, r3
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 800352c:	bf00      	nop
 800352e:	3724      	adds	r7, #36	; 0x24
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr

08003538 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8003538:	b480      	push	{r7}
 800353a:	b089      	sub	sp, #36	; 0x24
 800353c:	af00      	add	r7, sp, #0
 800353e:	60f8      	str	r0, [r7, #12]
 8003540:	60b9      	str	r1, [r7, #8]
 8003542:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	68da      	ldr	r2, [r3, #12]
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	fa93 f3a3 	rbit	r3, r3
 8003552:	613b      	str	r3, [r7, #16]
  return result;
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	fab3 f383 	clz	r3, r3
 800355a:	b2db      	uxtb	r3, r3
 800355c:	005b      	lsls	r3, r3, #1
 800355e:	2103      	movs	r1, #3
 8003560:	fa01 f303 	lsl.w	r3, r1, r3
 8003564:	43db      	mvns	r3, r3
 8003566:	401a      	ands	r2, r3
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	fa93 f3a3 	rbit	r3, r3
 8003572:	61bb      	str	r3, [r7, #24]
  return result;
 8003574:	69bb      	ldr	r3, [r7, #24]
 8003576:	fab3 f383 	clz	r3, r3
 800357a:	b2db      	uxtb	r3, r3
 800357c:	005b      	lsls	r3, r3, #1
 800357e:	6879      	ldr	r1, [r7, #4]
 8003580:	fa01 f303 	lsl.w	r3, r1, r3
 8003584:	431a      	orrs	r2, r3
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	60da      	str	r2, [r3, #12]
}
 800358a:	bf00      	nop
 800358c:	3724      	adds	r7, #36	; 0x24
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr

08003596 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8003596:	b480      	push	{r7}
 8003598:	b089      	sub	sp, #36	; 0x24
 800359a:	af00      	add	r7, sp, #0
 800359c:	60f8      	str	r0, [r7, #12]
 800359e:	60b9      	str	r1, [r7, #8]
 80035a0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	6a1a      	ldr	r2, [r3, #32]
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	fa93 f3a3 	rbit	r3, r3
 80035b0:	613b      	str	r3, [r7, #16]
  return result;
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	fab3 f383 	clz	r3, r3
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	210f      	movs	r1, #15
 80035be:	fa01 f303 	lsl.w	r3, r1, r3
 80035c2:	43db      	mvns	r3, r3
 80035c4:	401a      	ands	r2, r3
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	fa93 f3a3 	rbit	r3, r3
 80035d0:	61bb      	str	r3, [r7, #24]
  return result;
 80035d2:	69bb      	ldr	r3, [r7, #24]
 80035d4:	fab3 f383 	clz	r3, r3
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	6879      	ldr	r1, [r7, #4]
 80035de:	fa01 f303 	lsl.w	r3, r1, r3
 80035e2:	431a      	orrs	r2, r3
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 80035e8:	bf00      	nop
 80035ea:	3724      	adds	r7, #36	; 0x24
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr

080035f4 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b089      	sub	sp, #36	; 0x24
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	0a1b      	lsrs	r3, r3, #8
 8003608:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	fa93 f3a3 	rbit	r3, r3
 8003610:	613b      	str	r3, [r7, #16]
  return result;
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	fab3 f383 	clz	r3, r3
 8003618:	b2db      	uxtb	r3, r3
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	210f      	movs	r1, #15
 800361e:	fa01 f303 	lsl.w	r3, r1, r3
 8003622:	43db      	mvns	r3, r3
 8003624:	401a      	ands	r2, r3
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	0a1b      	lsrs	r3, r3, #8
 800362a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	fa93 f3a3 	rbit	r3, r3
 8003632:	61bb      	str	r3, [r7, #24]
  return result;
 8003634:	69bb      	ldr	r3, [r7, #24]
 8003636:	fab3 f383 	clz	r3, r3
 800363a:	b2db      	uxtb	r3, r3
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	6879      	ldr	r1, [r7, #4]
 8003640:	fa01 f303 	lsl.w	r3, r1, r3
 8003644:	431a      	orrs	r2, r3
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800364a:	bf00      	nop
 800364c:	3724      	adds	r7, #36	; 0x24
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr

08003656 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8003656:	b580      	push	{r7, lr}
 8003658:	b088      	sub	sp, #32
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
 800365e:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8003660:	2300      	movs	r3, #0
 8003662:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8003664:	2300      	movs	r3, #0
 8003666:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	fa93 f3a3 	rbit	r3, r3
 8003674:	613b      	str	r3, [r7, #16]
  return result;
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	fab3 f383 	clz	r3, r3
 800367c:	b2db      	uxtb	r3, r3
 800367e:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003680:	e050      	b.n	8003724 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	2101      	movs	r1, #1
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	fa01 f303 	lsl.w	r3, r1, r3
 800368e:	4013      	ands	r3, r2
 8003690:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d042      	beq.n	800371e <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	2b01      	cmp	r3, #1
 800369e:	d003      	beq.n	80036a8 <LL_GPIO_Init+0x52>
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d10d      	bne.n	80036c4 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	461a      	mov	r2, r3
 80036ae:	69b9      	ldr	r1, [r7, #24]
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f7ff ff12 	bl	80034da <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	461a      	mov	r2, r3
 80036bc:	69b9      	ldr	r1, [r7, #24]
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f7ff fef3 	bl	80034aa <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	691b      	ldr	r3, [r3, #16]
 80036c8:	461a      	mov	r2, r3
 80036ca:	69b9      	ldr	r1, [r7, #24]
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f7ff ff33 	bl	8003538 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d11a      	bne.n	8003710 <LL_GPIO_Init+0xba>
 80036da:	69bb      	ldr	r3, [r7, #24]
 80036dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	fa93 f3a3 	rbit	r3, r3
 80036e4:	60bb      	str	r3, [r7, #8]
  return result;
 80036e6:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80036e8:	fab3 f383 	clz	r3, r3
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	2b07      	cmp	r3, #7
 80036f0:	d807      	bhi.n	8003702 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	695b      	ldr	r3, [r3, #20]
 80036f6:	461a      	mov	r2, r3
 80036f8:	69b9      	ldr	r1, [r7, #24]
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f7ff ff4b 	bl	8003596 <LL_GPIO_SetAFPin_0_7>
 8003700:	e006      	b.n	8003710 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	695b      	ldr	r3, [r3, #20]
 8003706:	461a      	mov	r2, r3
 8003708:	69b9      	ldr	r1, [r7, #24]
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f7ff ff72 	bl	80035f4 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	461a      	mov	r2, r3
 8003716:	69b9      	ldr	r1, [r7, #24]
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f7ff fe97 	bl	800344c <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	3301      	adds	r3, #1
 8003722:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	fa22 f303 	lsr.w	r3, r2, r3
 800372e:	2b00      	cmp	r3, #0
 8003730:	d1a7      	bne.n	8003682 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8003732:	2300      	movs	r3, #0
}
 8003734:	4618      	mov	r0, r3
 8003736:	3720      	adds	r7, #32
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}

0800373c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800373c:	b480      	push	{r7}
 800373e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003740:	4b04      	ldr	r3, [pc, #16]	; (8003754 <LL_RCC_GetSysClkSource+0x18>)
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	f003 030c 	and.w	r3, r3, #12
}
 8003748:	4618      	mov	r0, r3
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr
 8003752:	bf00      	nop
 8003754:	40023800 	.word	0x40023800

08003758 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8003758:	b480      	push	{r7}
 800375a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800375c:	4b04      	ldr	r3, [pc, #16]	; (8003770 <LL_RCC_GetAHBPrescaler+0x18>)
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003764:	4618      	mov	r0, r3
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	40023800 	.word	0x40023800

08003774 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003774:	b480      	push	{r7}
 8003776:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003778:	4b04      	ldr	r3, [pc, #16]	; (800378c <LL_RCC_GetAPB1Prescaler+0x18>)
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8003780:	4618      	mov	r0, r3
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr
 800378a:	bf00      	nop
 800378c:	40023800 	.word	0x40023800

08003790 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8003790:	b480      	push	{r7}
 8003792:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003794:	4b04      	ldr	r3, [pc, #16]	; (80037a8 <LL_RCC_GetAPB2Prescaler+0x18>)
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 800379c:	4618      	mov	r0, r3
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr
 80037a6:	bf00      	nop
 80037a8:	40023800 	.word	0x40023800

080037ac <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80037ac:	b480      	push	{r7}
 80037ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80037b0:	4b04      	ldr	r3, [pc, #16]	; (80037c4 <LL_RCC_PLL_GetMainSource+0x18>)
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr
 80037c2:	bf00      	nop
 80037c4:	40023800 	.word	0x40023800

080037c8 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80037c8:	b480      	push	{r7}
 80037ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80037cc:	4b04      	ldr	r3, [pc, #16]	; (80037e0 <LL_RCC_PLL_GetN+0x18>)
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	099b      	lsrs	r3, r3, #6
 80037d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr
 80037e0:	40023800 	.word	0x40023800

080037e4 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 80037e4:	b480      	push	{r7}
 80037e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 80037e8:	4b04      	ldr	r3, [pc, #16]	; (80037fc <LL_RCC_PLL_GetP+0x18>)
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr
 80037fa:	bf00      	nop
 80037fc:	40023800 	.word	0x40023800

08003800 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003800:	b480      	push	{r7}
 8003802:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003804:	4b04      	ldr	r3, [pc, #16]	; (8003818 <LL_RCC_PLL_GetDivider+0x18>)
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 800380c:	4618      	mov	r0, r3
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop
 8003818:	40023800 	.word	0x40023800

0800381c <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8003824:	f000 f820 	bl	8003868 <RCC_GetSystemClockFreq>
 8003828:	4602      	mov	r2, r0
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4618      	mov	r0, r3
 8003834:	f000 f840 	bl	80038b8 <RCC_GetHCLKClockFreq>
 8003838:	4602      	mov	r2, r0
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	4618      	mov	r0, r3
 8003844:	f000 f84e 	bl	80038e4 <RCC_GetPCLK1ClockFreq>
 8003848:	4602      	mov	r2, r0
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	4618      	mov	r0, r3
 8003854:	f000 f85a 	bl	800390c <RCC_GetPCLK2ClockFreq>
 8003858:	4602      	mov	r2, r0
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	60da      	str	r2, [r3, #12]
}
 800385e:	bf00      	nop
 8003860:	3708      	adds	r7, #8
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
	...

08003868 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800386e:	2300      	movs	r3, #0
 8003870:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8003872:	f7ff ff63 	bl	800373c <LL_RCC_GetSysClkSource>
 8003876:	4603      	mov	r3, r0
 8003878:	2b08      	cmp	r3, #8
 800387a:	d00c      	beq.n	8003896 <RCC_GetSystemClockFreq+0x2e>
 800387c:	2b08      	cmp	r3, #8
 800387e:	d80f      	bhi.n	80038a0 <RCC_GetSystemClockFreq+0x38>
 8003880:	2b00      	cmp	r3, #0
 8003882:	d002      	beq.n	800388a <RCC_GetSystemClockFreq+0x22>
 8003884:	2b04      	cmp	r3, #4
 8003886:	d003      	beq.n	8003890 <RCC_GetSystemClockFreq+0x28>
 8003888:	e00a      	b.n	80038a0 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800388a:	4b09      	ldr	r3, [pc, #36]	; (80038b0 <RCC_GetSystemClockFreq+0x48>)
 800388c:	607b      	str	r3, [r7, #4]
      break;
 800388e:	e00a      	b.n	80038a6 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8003890:	4b08      	ldr	r3, [pc, #32]	; (80038b4 <RCC_GetSystemClockFreq+0x4c>)
 8003892:	607b      	str	r3, [r7, #4]
      break;
 8003894:	e007      	b.n	80038a6 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8003896:	2008      	movs	r0, #8
 8003898:	f000 f84c 	bl	8003934 <RCC_PLL_GetFreqDomain_SYS>
 800389c:	6078      	str	r0, [r7, #4]
      break;
 800389e:	e002      	b.n	80038a6 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 80038a0:	4b03      	ldr	r3, [pc, #12]	; (80038b0 <RCC_GetSystemClockFreq+0x48>)
 80038a2:	607b      	str	r3, [r7, #4]
      break;
 80038a4:	bf00      	nop
  }

  return frequency;
 80038a6:	687b      	ldr	r3, [r7, #4]
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3708      	adds	r7, #8
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	00f42400 	.word	0x00f42400
 80038b4:	007a1200 	.word	0x007a1200

080038b8 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80038c0:	f7ff ff4a 	bl	8003758 <LL_RCC_GetAHBPrescaler>
 80038c4:	4603      	mov	r3, r0
 80038c6:	091b      	lsrs	r3, r3, #4
 80038c8:	f003 030f 	and.w	r3, r3, #15
 80038cc:	4a04      	ldr	r2, [pc, #16]	; (80038e0 <RCC_GetHCLKClockFreq+0x28>)
 80038ce:	5cd3      	ldrb	r3, [r2, r3]
 80038d0:	461a      	mov	r2, r3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	40d3      	lsrs	r3, r2
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3708      	adds	r7, #8
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	080045c8 	.word	0x080045c8

080038e4 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b082      	sub	sp, #8
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80038ec:	f7ff ff42 	bl	8003774 <LL_RCC_GetAPB1Prescaler>
 80038f0:	4603      	mov	r3, r0
 80038f2:	0a9b      	lsrs	r3, r3, #10
 80038f4:	4a04      	ldr	r2, [pc, #16]	; (8003908 <RCC_GetPCLK1ClockFreq+0x24>)
 80038f6:	5cd3      	ldrb	r3, [r2, r3]
 80038f8:	461a      	mov	r2, r3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	40d3      	lsrs	r3, r2
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3708      	adds	r7, #8
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	080045d8 	.word	0x080045d8

0800390c <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b082      	sub	sp, #8
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8003914:	f7ff ff3c 	bl	8003790 <LL_RCC_GetAPB2Prescaler>
 8003918:	4603      	mov	r3, r0
 800391a:	0b5b      	lsrs	r3, r3, #13
 800391c:	4a04      	ldr	r2, [pc, #16]	; (8003930 <RCC_GetPCLK2ClockFreq+0x24>)
 800391e:	5cd3      	ldrb	r3, [r2, r3]
 8003920:	461a      	mov	r2, r3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	40d3      	lsrs	r3, r2
}
 8003926:	4618      	mov	r0, r3
 8003928:	3708      	adds	r7, #8
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	080045d8 	.word	0x080045d8

08003934 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8003934:	b590      	push	{r4, r7, lr}
 8003936:	b087      	sub	sp, #28
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 800393c:	2300      	movs	r3, #0
 800393e:	617b      	str	r3, [r7, #20]
 8003940:	2300      	movs	r3, #0
 8003942:	60fb      	str	r3, [r7, #12]
 8003944:	2300      	movs	r3, #0
 8003946:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8003948:	f7ff ff30 	bl	80037ac <LL_RCC_PLL_GetMainSource>
 800394c:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d004      	beq.n	800395e <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800395a:	d003      	beq.n	8003964 <RCC_PLL_GetFreqDomain_SYS+0x30>
 800395c:	e005      	b.n	800396a <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800395e:	4b12      	ldr	r3, [pc, #72]	; (80039a8 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8003960:	617b      	str	r3, [r7, #20]
      break;
 8003962:	e005      	b.n	8003970 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8003964:	4b11      	ldr	r3, [pc, #68]	; (80039ac <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8003966:	617b      	str	r3, [r7, #20]
      break;
 8003968:	e002      	b.n	8003970 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 800396a:	4b0f      	ldr	r3, [pc, #60]	; (80039a8 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800396c:	617b      	str	r3, [r7, #20]
      break;
 800396e:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2b08      	cmp	r3, #8
 8003974:	d113      	bne.n	800399e <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003976:	f7ff ff43 	bl	8003800 <LL_RCC_PLL_GetDivider>
 800397a:	4602      	mov	r2, r0
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	fbb3 f4f2 	udiv	r4, r3, r2
 8003982:	f7ff ff21 	bl	80037c8 <LL_RCC_PLL_GetN>
 8003986:	4603      	mov	r3, r0
 8003988:	fb03 f404 	mul.w	r4, r3, r4
 800398c:	f7ff ff2a 	bl	80037e4 <LL_RCC_PLL_GetP>
 8003990:	4603      	mov	r3, r0
 8003992:	0c1b      	lsrs	r3, r3, #16
 8003994:	3301      	adds	r3, #1
 8003996:	005b      	lsls	r3, r3, #1
 8003998:	fbb4 f3f3 	udiv	r3, r4, r3
 800399c:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 800399e:	693b      	ldr	r3, [r7, #16]
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	371c      	adds	r7, #28
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd90      	pop	{r4, r7, pc}
 80039a8:	00f42400 	.word	0x00f42400
 80039ac:	007a1200 	.word	0x007a1200

080039b0 <LL_USART_IsEnabled>:
{
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039c4:	bf0c      	ite	eq
 80039c6:	2301      	moveq	r3, #1
 80039c8:	2300      	movne	r3, #0
 80039ca:	b2db      	uxtb	r3, r3
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	370c      	adds	r7, #12
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr

080039d8 <LL_USART_SetStopBitsLength>:
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	691b      	ldr	r3, [r3, #16]
 80039e6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	431a      	orrs	r2, r3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	611a      	str	r2, [r3, #16]
}
 80039f2:	bf00      	nop
 80039f4:	370c      	adds	r7, #12
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr

080039fe <LL_USART_SetHWFlowCtrl>:
{
 80039fe:	b480      	push	{r7}
 8003a00:	b083      	sub	sp, #12
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
 8003a06:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	695b      	ldr	r3, [r3, #20]
 8003a0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	431a      	orrs	r2, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	615a      	str	r2, [r3, #20]
}
 8003a18:	bf00      	nop
 8003a1a:	370c      	adds	r7, #12
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr

08003a24 <LL_USART_SetBaudRate>:
{
 8003a24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a28:	b0c0      	sub	sp, #256	; 0x100
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003a30:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8003a34:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8003a38:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8003a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a44:	f040 810c 	bne.w	8003c60 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8003a48:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003a52:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003a56:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003a5a:	4622      	mov	r2, r4
 8003a5c:	462b      	mov	r3, r5
 8003a5e:	1891      	adds	r1, r2, r2
 8003a60:	6639      	str	r1, [r7, #96]	; 0x60
 8003a62:	415b      	adcs	r3, r3
 8003a64:	667b      	str	r3, [r7, #100]	; 0x64
 8003a66:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003a6a:	4621      	mov	r1, r4
 8003a6c:	eb12 0801 	adds.w	r8, r2, r1
 8003a70:	4629      	mov	r1, r5
 8003a72:	eb43 0901 	adc.w	r9, r3, r1
 8003a76:	f04f 0200 	mov.w	r2, #0
 8003a7a:	f04f 0300 	mov.w	r3, #0
 8003a7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a8a:	4690      	mov	r8, r2
 8003a8c:	4699      	mov	r9, r3
 8003a8e:	4623      	mov	r3, r4
 8003a90:	eb18 0303 	adds.w	r3, r8, r3
 8003a94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003a98:	462b      	mov	r3, r5
 8003a9a:	eb49 0303 	adc.w	r3, r9, r3
 8003a9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003aa2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	469a      	mov	sl, r3
 8003aaa:	4693      	mov	fp, r2
 8003aac:	eb1a 030a 	adds.w	r3, sl, sl
 8003ab0:	65bb      	str	r3, [r7, #88]	; 0x58
 8003ab2:	eb4b 030b 	adc.w	r3, fp, fp
 8003ab6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ab8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003abc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003ac0:	f7fc fb90 	bl	80001e4 <__aeabi_uldivmod>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	460b      	mov	r3, r1
 8003ac8:	4b64      	ldr	r3, [pc, #400]	; (8003c5c <LL_USART_SetBaudRate+0x238>)
 8003aca:	fba3 2302 	umull	r2, r3, r3, r2
 8003ace:	095b      	lsrs	r3, r3, #5
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	011b      	lsls	r3, r3, #4
 8003ad4:	b29c      	uxth	r4, r3
 8003ad6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003ada:	2200      	movs	r2, #0
 8003adc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003ae0:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003ae4:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8003ae8:	4642      	mov	r2, r8
 8003aea:	464b      	mov	r3, r9
 8003aec:	1891      	adds	r1, r2, r2
 8003aee:	6539      	str	r1, [r7, #80]	; 0x50
 8003af0:	415b      	adcs	r3, r3
 8003af2:	657b      	str	r3, [r7, #84]	; 0x54
 8003af4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003af8:	4641      	mov	r1, r8
 8003afa:	1851      	adds	r1, r2, r1
 8003afc:	64b9      	str	r1, [r7, #72]	; 0x48
 8003afe:	4649      	mov	r1, r9
 8003b00:	414b      	adcs	r3, r1
 8003b02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b04:	f04f 0200 	mov.w	r2, #0
 8003b08:	f04f 0300 	mov.w	r3, #0
 8003b0c:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 8003b10:	4659      	mov	r1, fp
 8003b12:	00cb      	lsls	r3, r1, #3
 8003b14:	4651      	mov	r1, sl
 8003b16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b1a:	4651      	mov	r1, sl
 8003b1c:	00ca      	lsls	r2, r1, #3
 8003b1e:	4610      	mov	r0, r2
 8003b20:	4619      	mov	r1, r3
 8003b22:	4603      	mov	r3, r0
 8003b24:	4642      	mov	r2, r8
 8003b26:	189b      	adds	r3, r3, r2
 8003b28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003b2c:	464b      	mov	r3, r9
 8003b2e:	460a      	mov	r2, r1
 8003b30:	eb42 0303 	adc.w	r3, r2, r3
 8003b34:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003b38:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003b42:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8003b46:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003b4a:	460b      	mov	r3, r1
 8003b4c:	18db      	adds	r3, r3, r3
 8003b4e:	643b      	str	r3, [r7, #64]	; 0x40
 8003b50:	4613      	mov	r3, r2
 8003b52:	eb42 0303 	adc.w	r3, r2, r3
 8003b56:	647b      	str	r3, [r7, #68]	; 0x44
 8003b58:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003b5c:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8003b60:	f7fc fb40 	bl	80001e4 <__aeabi_uldivmod>
 8003b64:	4602      	mov	r2, r0
 8003b66:	460b      	mov	r3, r1
 8003b68:	4611      	mov	r1, r2
 8003b6a:	4b3c      	ldr	r3, [pc, #240]	; (8003c5c <LL_USART_SetBaudRate+0x238>)
 8003b6c:	fba3 2301 	umull	r2, r3, r3, r1
 8003b70:	095b      	lsrs	r3, r3, #5
 8003b72:	2264      	movs	r2, #100	; 0x64
 8003b74:	fb02 f303 	mul.w	r3, r2, r3
 8003b78:	1acb      	subs	r3, r1, r3
 8003b7a:	00db      	lsls	r3, r3, #3
 8003b7c:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003b80:	4b36      	ldr	r3, [pc, #216]	; (8003c5c <LL_USART_SetBaudRate+0x238>)
 8003b82:	fba3 2302 	umull	r2, r3, r3, r2
 8003b86:	095b      	lsrs	r3, r3, #5
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	005b      	lsls	r3, r3, #1
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	4423      	add	r3, r4
 8003b96:	b29c      	uxth	r4, r3
 8003b98:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003ba2:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003ba6:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 8003baa:	4642      	mov	r2, r8
 8003bac:	464b      	mov	r3, r9
 8003bae:	1891      	adds	r1, r2, r2
 8003bb0:	63b9      	str	r1, [r7, #56]	; 0x38
 8003bb2:	415b      	adcs	r3, r3
 8003bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bb6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003bba:	4641      	mov	r1, r8
 8003bbc:	1851      	adds	r1, r2, r1
 8003bbe:	6339      	str	r1, [r7, #48]	; 0x30
 8003bc0:	4649      	mov	r1, r9
 8003bc2:	414b      	adcs	r3, r1
 8003bc4:	637b      	str	r3, [r7, #52]	; 0x34
 8003bc6:	f04f 0200 	mov.w	r2, #0
 8003bca:	f04f 0300 	mov.w	r3, #0
 8003bce:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003bd2:	4659      	mov	r1, fp
 8003bd4:	00cb      	lsls	r3, r1, #3
 8003bd6:	4651      	mov	r1, sl
 8003bd8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003bdc:	4651      	mov	r1, sl
 8003bde:	00ca      	lsls	r2, r1, #3
 8003be0:	4610      	mov	r0, r2
 8003be2:	4619      	mov	r1, r3
 8003be4:	4603      	mov	r3, r0
 8003be6:	4642      	mov	r2, r8
 8003be8:	189b      	adds	r3, r3, r2
 8003bea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003bee:	464b      	mov	r3, r9
 8003bf0:	460a      	mov	r2, r1
 8003bf2:	eb42 0303 	adc.w	r3, r2, r3
 8003bf6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003bfa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003c04:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8003c08:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003c0c:	460b      	mov	r3, r1
 8003c0e:	18db      	adds	r3, r3, r3
 8003c10:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c12:	4613      	mov	r3, r2
 8003c14:	eb42 0303 	adc.w	r3, r2, r3
 8003c18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c1a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003c1e:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8003c22:	f7fc fadf 	bl	80001e4 <__aeabi_uldivmod>
 8003c26:	4602      	mov	r2, r0
 8003c28:	460b      	mov	r3, r1
 8003c2a:	4b0c      	ldr	r3, [pc, #48]	; (8003c5c <LL_USART_SetBaudRate+0x238>)
 8003c2c:	fba3 1302 	umull	r1, r3, r3, r2
 8003c30:	095b      	lsrs	r3, r3, #5
 8003c32:	2164      	movs	r1, #100	; 0x64
 8003c34:	fb01 f303 	mul.w	r3, r1, r3
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	00db      	lsls	r3, r3, #3
 8003c3c:	3332      	adds	r3, #50	; 0x32
 8003c3e:	4a07      	ldr	r2, [pc, #28]	; (8003c5c <LL_USART_SetBaudRate+0x238>)
 8003c40:	fba2 2303 	umull	r2, r3, r2, r3
 8003c44:	095b      	lsrs	r3, r3, #5
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	f003 0307 	and.w	r3, r3, #7
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	4423      	add	r3, r4
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	461a      	mov	r2, r3
 8003c54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c58:	609a      	str	r2, [r3, #8]
}
 8003c5a:	e107      	b.n	8003e6c <LL_USART_SetBaudRate+0x448>
 8003c5c:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8003c60:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003c64:	2200      	movs	r2, #0
 8003c66:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003c6a:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003c6e:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8003c72:	4642      	mov	r2, r8
 8003c74:	464b      	mov	r3, r9
 8003c76:	1891      	adds	r1, r2, r2
 8003c78:	6239      	str	r1, [r7, #32]
 8003c7a:	415b      	adcs	r3, r3
 8003c7c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c7e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003c82:	4641      	mov	r1, r8
 8003c84:	1854      	adds	r4, r2, r1
 8003c86:	4649      	mov	r1, r9
 8003c88:	eb43 0501 	adc.w	r5, r3, r1
 8003c8c:	f04f 0200 	mov.w	r2, #0
 8003c90:	f04f 0300 	mov.w	r3, #0
 8003c94:	00eb      	lsls	r3, r5, #3
 8003c96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c9a:	00e2      	lsls	r2, r4, #3
 8003c9c:	4614      	mov	r4, r2
 8003c9e:	461d      	mov	r5, r3
 8003ca0:	4643      	mov	r3, r8
 8003ca2:	18e3      	adds	r3, r4, r3
 8003ca4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003ca8:	464b      	mov	r3, r9
 8003caa:	eb45 0303 	adc.w	r3, r5, r3
 8003cae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003cb2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003cbc:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003cc0:	f04f 0200 	mov.w	r2, #0
 8003cc4:	f04f 0300 	mov.w	r3, #0
 8003cc8:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8003ccc:	4629      	mov	r1, r5
 8003cce:	008b      	lsls	r3, r1, #2
 8003cd0:	4621      	mov	r1, r4
 8003cd2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003cd6:	4621      	mov	r1, r4
 8003cd8:	008a      	lsls	r2, r1, #2
 8003cda:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8003cde:	f7fc fa81 	bl	80001e4 <__aeabi_uldivmod>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	460b      	mov	r3, r1
 8003ce6:	4b64      	ldr	r3, [pc, #400]	; (8003e78 <LL_USART_SetBaudRate+0x454>)
 8003ce8:	fba3 2302 	umull	r2, r3, r3, r2
 8003cec:	095b      	lsrs	r3, r3, #5
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	011b      	lsls	r3, r3, #4
 8003cf2:	b29c      	uxth	r4, r3
 8003cf4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003cfe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003d02:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 8003d06:	4642      	mov	r2, r8
 8003d08:	464b      	mov	r3, r9
 8003d0a:	1891      	adds	r1, r2, r2
 8003d0c:	61b9      	str	r1, [r7, #24]
 8003d0e:	415b      	adcs	r3, r3
 8003d10:	61fb      	str	r3, [r7, #28]
 8003d12:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d16:	4641      	mov	r1, r8
 8003d18:	1851      	adds	r1, r2, r1
 8003d1a:	6139      	str	r1, [r7, #16]
 8003d1c:	4649      	mov	r1, r9
 8003d1e:	414b      	adcs	r3, r1
 8003d20:	617b      	str	r3, [r7, #20]
 8003d22:	f04f 0200 	mov.w	r2, #0
 8003d26:	f04f 0300 	mov.w	r3, #0
 8003d2a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d2e:	4659      	mov	r1, fp
 8003d30:	00cb      	lsls	r3, r1, #3
 8003d32:	4651      	mov	r1, sl
 8003d34:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d38:	4651      	mov	r1, sl
 8003d3a:	00ca      	lsls	r2, r1, #3
 8003d3c:	4610      	mov	r0, r2
 8003d3e:	4619      	mov	r1, r3
 8003d40:	4603      	mov	r3, r0
 8003d42:	4642      	mov	r2, r8
 8003d44:	189b      	adds	r3, r3, r2
 8003d46:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003d4a:	464b      	mov	r3, r9
 8003d4c:	460a      	mov	r2, r1
 8003d4e:	eb42 0303 	adc.w	r3, r2, r3
 8003d52:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003d56:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003d60:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003d64:	f04f 0200 	mov.w	r2, #0
 8003d68:	f04f 0300 	mov.w	r3, #0
 8003d6c:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8003d70:	4649      	mov	r1, r9
 8003d72:	008b      	lsls	r3, r1, #2
 8003d74:	4641      	mov	r1, r8
 8003d76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d7a:	4641      	mov	r1, r8
 8003d7c:	008a      	lsls	r2, r1, #2
 8003d7e:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8003d82:	f7fc fa2f 	bl	80001e4 <__aeabi_uldivmod>
 8003d86:	4602      	mov	r2, r0
 8003d88:	460b      	mov	r3, r1
 8003d8a:	4b3b      	ldr	r3, [pc, #236]	; (8003e78 <LL_USART_SetBaudRate+0x454>)
 8003d8c:	fba3 1302 	umull	r1, r3, r3, r2
 8003d90:	095b      	lsrs	r3, r3, #5
 8003d92:	2164      	movs	r1, #100	; 0x64
 8003d94:	fb01 f303 	mul.w	r3, r1, r3
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	011b      	lsls	r3, r3, #4
 8003d9c:	3332      	adds	r3, #50	; 0x32
 8003d9e:	4a36      	ldr	r2, [pc, #216]	; (8003e78 <LL_USART_SetBaudRate+0x454>)
 8003da0:	fba2 2303 	umull	r2, r3, r2, r3
 8003da4:	095b      	lsrs	r3, r3, #5
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	4423      	add	r3, r4
 8003db0:	b29c      	uxth	r4, r3
 8003db2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003db6:	2200      	movs	r2, #0
 8003db8:	67bb      	str	r3, [r7, #120]	; 0x78
 8003dba:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003dbc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003dc0:	4642      	mov	r2, r8
 8003dc2:	464b      	mov	r3, r9
 8003dc4:	1891      	adds	r1, r2, r2
 8003dc6:	60b9      	str	r1, [r7, #8]
 8003dc8:	415b      	adcs	r3, r3
 8003dca:	60fb      	str	r3, [r7, #12]
 8003dcc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003dd0:	4641      	mov	r1, r8
 8003dd2:	1851      	adds	r1, r2, r1
 8003dd4:	6039      	str	r1, [r7, #0]
 8003dd6:	4649      	mov	r1, r9
 8003dd8:	414b      	adcs	r3, r1
 8003dda:	607b      	str	r3, [r7, #4]
 8003ddc:	f04f 0200 	mov.w	r2, #0
 8003de0:	f04f 0300 	mov.w	r3, #0
 8003de4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003de8:	4659      	mov	r1, fp
 8003dea:	00cb      	lsls	r3, r1, #3
 8003dec:	4651      	mov	r1, sl
 8003dee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003df2:	4651      	mov	r1, sl
 8003df4:	00ca      	lsls	r2, r1, #3
 8003df6:	4610      	mov	r0, r2
 8003df8:	4619      	mov	r1, r3
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	4642      	mov	r2, r8
 8003dfe:	189b      	adds	r3, r3, r2
 8003e00:	673b      	str	r3, [r7, #112]	; 0x70
 8003e02:	464b      	mov	r3, r9
 8003e04:	460a      	mov	r2, r1
 8003e06:	eb42 0303 	adc.w	r3, r2, r3
 8003e0a:	677b      	str	r3, [r7, #116]	; 0x74
 8003e0c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003e10:	2200      	movs	r2, #0
 8003e12:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e14:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003e16:	f04f 0200 	mov.w	r2, #0
 8003e1a:	f04f 0300 	mov.w	r3, #0
 8003e1e:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 8003e22:	4649      	mov	r1, r9
 8003e24:	008b      	lsls	r3, r1, #2
 8003e26:	4641      	mov	r1, r8
 8003e28:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e2c:	4641      	mov	r1, r8
 8003e2e:	008a      	lsls	r2, r1, #2
 8003e30:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8003e34:	f7fc f9d6 	bl	80001e4 <__aeabi_uldivmod>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	460b      	mov	r3, r1
 8003e3c:	4b0e      	ldr	r3, [pc, #56]	; (8003e78 <LL_USART_SetBaudRate+0x454>)
 8003e3e:	fba3 1302 	umull	r1, r3, r3, r2
 8003e42:	095b      	lsrs	r3, r3, #5
 8003e44:	2164      	movs	r1, #100	; 0x64
 8003e46:	fb01 f303 	mul.w	r3, r1, r3
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	011b      	lsls	r3, r3, #4
 8003e4e:	3332      	adds	r3, #50	; 0x32
 8003e50:	4a09      	ldr	r2, [pc, #36]	; (8003e78 <LL_USART_SetBaudRate+0x454>)
 8003e52:	fba2 2303 	umull	r2, r3, r2, r3
 8003e56:	095b      	lsrs	r3, r3, #5
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	f003 030f 	and.w	r3, r3, #15
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	4423      	add	r3, r4
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	461a      	mov	r2, r3
 8003e66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e6a:	609a      	str	r2, [r3, #8]
}
 8003e6c:	bf00      	nop
 8003e6e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003e72:	46bd      	mov	sp, r7
 8003e74:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e78:	51eb851f 	.word	0x51eb851f

08003e7c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b088      	sub	sp, #32
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f7ff fd8e 	bl	80039b0 <LL_USART_IsEnabled>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d149      	bne.n	8003f2e <LL_USART_Init+0xb2>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003ea2:	f023 030c 	bic.w	r3, r3, #12
 8003ea6:	683a      	ldr	r2, [r7, #0]
 8003ea8:	6851      	ldr	r1, [r2, #4]
 8003eaa:	683a      	ldr	r2, [r7, #0]
 8003eac:	68d2      	ldr	r2, [r2, #12]
 8003eae:	4311      	orrs	r1, r2
 8003eb0:	683a      	ldr	r2, [r7, #0]
 8003eb2:	6912      	ldr	r2, [r2, #16]
 8003eb4:	4311      	orrs	r1, r2
 8003eb6:	683a      	ldr	r2, [r7, #0]
 8003eb8:	6992      	ldr	r2, [r2, #24]
 8003eba:	430a      	orrs	r2, r1
 8003ebc:	431a      	orrs	r2, r3
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	4619      	mov	r1, r3
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f7ff fd85 	bl	80039d8 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	695b      	ldr	r3, [r3, #20]
 8003ed2:	4619      	mov	r1, r3
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f7ff fd92 	bl	80039fe <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8003eda:	f107 0308 	add.w	r3, r7, #8
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f7ff fc9c 	bl	800381c <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	4a14      	ldr	r2, [pc, #80]	; (8003f38 <LL_USART_Init+0xbc>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d102      	bne.n	8003ef2 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	61bb      	str	r3, [r7, #24]
 8003ef0:	e00c      	b.n	8003f0c <LL_USART_Init+0x90>
    }
    else if (USARTx == USART2)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a11      	ldr	r2, [pc, #68]	; (8003f3c <LL_USART_Init+0xc0>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d102      	bne.n	8003f00 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	61bb      	str	r3, [r7, #24]
 8003efe:	e005      	b.n	8003f0c <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	4a0f      	ldr	r2, [pc, #60]	; (8003f40 <LL_USART_Init+0xc4>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d101      	bne.n	8003f0c <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8003f0c:	69bb      	ldr	r3, [r7, #24]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d00d      	beq.n	8003f2e <LL_USART_Init+0xb2>
        && (USART_InitStruct->BaudRate != 0U))
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d009      	beq.n	8003f2e <LL_USART_Init+0xb2>
    {
      status = SUCCESS;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	699a      	ldr	r2, [r3, #24]
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	69b9      	ldr	r1, [r7, #24]
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f7ff fd7b 	bl	8003a24 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8003f2e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3720      	adds	r7, #32
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	40011000 	.word	0x40011000
 8003f3c:	40004400 	.word	0x40004400
 8003f40:	40011400 	.word	0x40011400

08003f44 <__libc_init_array>:
 8003f44:	b570      	push	{r4, r5, r6, lr}
 8003f46:	4d0d      	ldr	r5, [pc, #52]	; (8003f7c <__libc_init_array+0x38>)
 8003f48:	4c0d      	ldr	r4, [pc, #52]	; (8003f80 <__libc_init_array+0x3c>)
 8003f4a:	1b64      	subs	r4, r4, r5
 8003f4c:	10a4      	asrs	r4, r4, #2
 8003f4e:	2600      	movs	r6, #0
 8003f50:	42a6      	cmp	r6, r4
 8003f52:	d109      	bne.n	8003f68 <__libc_init_array+0x24>
 8003f54:	4d0b      	ldr	r5, [pc, #44]	; (8003f84 <__libc_init_array+0x40>)
 8003f56:	4c0c      	ldr	r4, [pc, #48]	; (8003f88 <__libc_init_array+0x44>)
 8003f58:	f000 f820 	bl	8003f9c <_init>
 8003f5c:	1b64      	subs	r4, r4, r5
 8003f5e:	10a4      	asrs	r4, r4, #2
 8003f60:	2600      	movs	r6, #0
 8003f62:	42a6      	cmp	r6, r4
 8003f64:	d105      	bne.n	8003f72 <__libc_init_array+0x2e>
 8003f66:	bd70      	pop	{r4, r5, r6, pc}
 8003f68:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f6c:	4798      	blx	r3
 8003f6e:	3601      	adds	r6, #1
 8003f70:	e7ee      	b.n	8003f50 <__libc_init_array+0xc>
 8003f72:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f76:	4798      	blx	r3
 8003f78:	3601      	adds	r6, #1
 8003f7a:	e7f2      	b.n	8003f62 <__libc_init_array+0x1e>
 8003f7c:	080045e8 	.word	0x080045e8
 8003f80:	080045e8 	.word	0x080045e8
 8003f84:	080045e8 	.word	0x080045e8
 8003f88:	080045ec 	.word	0x080045ec

08003f8c <memset>:
 8003f8c:	4402      	add	r2, r0
 8003f8e:	4603      	mov	r3, r0
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d100      	bne.n	8003f96 <memset+0xa>
 8003f94:	4770      	bx	lr
 8003f96:	f803 1b01 	strb.w	r1, [r3], #1
 8003f9a:	e7f9      	b.n	8003f90 <memset+0x4>

08003f9c <_init>:
 8003f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f9e:	bf00      	nop
 8003fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fa2:	bc08      	pop	{r3}
 8003fa4:	469e      	mov	lr, r3
 8003fa6:	4770      	bx	lr

08003fa8 <_fini>:
 8003fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003faa:	bf00      	nop
 8003fac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fae:	bc08      	pop	{r3}
 8003fb0:	469e      	mov	lr, r3
 8003fb2:	4770      	bx	lr
